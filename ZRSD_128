

*&---------------------------------------------------------------------*
*& Report  ZSDR_RELATORIO_GERAL_SD
*&---------------------------------------------------------------------*
REPORT zsdr_relatorio_geral_sd_c3 MESSAGE-ID zsd NO STANDARD PAGE HEADING.
TABLES: sscrfields, ztsd_geral2, vbak. "Fields on selection screens
TYPE-POOLS : icon.

TABLES: konv, mbew.

TYPES:

  BEGIN OF tp_vbak2,
    vbeln TYPE vbak-vbeln,
    erdat TYPE vbak-erdat,
    audat TYPE vbak-audat,
    auart TYPE vbak-auart,
    vkorg TYPE vbak-vkorg,
    vtweg TYPE vbak-vtweg,
    spart TYPE vbak-spart,
    vkgrp TYPE vbak-vkgrp,
    vkbur TYPE vbak-vkbur,
    kunnr TYPE vbak-kunnr,
    lifsk TYPE vbak-lifsk,
    faksk TYPE vbak-faksk,
    knumv TYPE vbak-knumv,
    vbtyp TYPE vbak-vbtyp,
    augru TYPE vbak-augru,
  END OF tp_vbak2,

  BEGIN OF tp_ordens,
    vbeln TYPE vbak-vbeln,
  END OF tp_ordens,

  BEGIN OF tp_mbew,
    matnr TYPE matnr,
    bwkey TYPE bwkey,
    mtorg TYPE j_1bmatorg,
  END OF tp_mbew,

  BEGIN OF tp_vbap2,
    vbeln           TYPE vbap-vbeln,
    posnr           TYPE vbap-posnr,
    matnr           TYPE vbap-matnr,
    matkl           TYPE vbap-matkl,
    werks           TYPE vbap-werks,
    j_3asean        TYPE vbap-j_3asean,
    /afs/theme      TYPE vbap-/afs/theme,
    /afs/collection TYPE vbap-/afs/collection,
    arktx           TYPE vbap-arktx,
    kwmeng          TYPE vbap-kwmeng,
    zmeng           TYPE vbap-zmeng,
    zieme           TYPE vbap-zieme,
    netpr           TYPE vbap-netpr,
    abgru           TYPE vbap-abgru,
    faksp           TYPE vbap-faksp,
    j_1bcfop        TYPE vbap-j_1bcfop,
    pstyv           TYPE vbap-pstyv,
    ntgew           TYPE vbap-ntgew,
    brgew           TYPE vbap-brgew,
    prctr           TYPE vbap-prctr,
    lgort           TYPE vbap-lgort,
    route           TYPE vbap-route,
    vgbel           TYPE vbap-vgbel,
    vgpos           TYPE vbap-vgpos,
    j_3arqda        TYPE vbap-j_3arqda,
    netwr           TYPE vbap-netwr,
    mwsbp           TYPE vbap-mwsbp,
  END OF tp_vbap2,

  BEGIN OF tp_vbrp2,
    vbeln     TYPE vbrp-vbeln,
    posnr     TYPE vbrp-posnr,
    matnr     TYPE vbrp-matnr,
    fkimg     TYPE vbrp-fkimg,
    vrkme     TYPE vbrp-vrkme,
    shkzg     TYPE vbrp-shkzg,
    j_3asize  TYPE vbrp-j_3asize,
    j_3avgete TYPE j_3avgete,
    j_4kscat  TYPE vbrp-j_4krcat,
    aubel     TYPE vbrp-aubel,
    aupos     TYPE vbrp-aupos,
    vgbel     TYPE vbrp-vgbel,
    vgpos     TYPE vbrp-vgpos,
    netwr     TYPE vbrp-netwr,
  END OF tp_vbrp2,

  BEGIN OF tp_vbrk2,
    vbeln TYPE vbrk-vbeln,
    fkart TYPE vbrk-fkart,
    fkdat TYPE vbrk-fkdat,
    netwr TYPE vbrk-netwr,
  END OF tp_vbrk2,

  BEGIN OF  tp_inicial,
*   VBAK
    vbeln  TYPE vbeln_va,
    erdat  TYPE erdat,
    audat  TYPE audat,
    auart  TYPE auart,
    vbtyp  TYPE vbtyp,
    augru  TYPE augru,
    xblnr  TYPE vbak-xblnr,
    vkorg  TYPE vkorg,
    vtweg  TYPE vtweg,
    spart  TYPE spart,
    vkgrp  TYPE vkgrp,
    vkbur  TYPE vkbur,
    kunnr  TYPE kunag,
    lifsk  TYPE lifsk,
    faksk  TYPE faksk,
    knumv  TYPE knumv,
    "Lucas Pereira - Squad Logística - 28/02/2022 - Início.
    bukrs_vf TYPE bukrs_vf,
    "Lucas Pereira - Squad Logística - 28/02/2022 - Fim.
*   VBAP
    posnr           TYPE posnr_va,
    matnr           TYPE matnr,
    matkl           TYPE matkl,
    werks           TYPE werks_ext,
    vgbel           TYPE vgbel,
    vgpos           TYPE vgpos,
    j_3asean        TYPE j_3aseand,
    /afs/theme      TYPE /afs/theme,
    /afs/collection TYPE /afs/collection,
    arktx           TYPE arktx,
    kwmeng          TYPE kwmeng,
    zmeng           TYPE dzmeng,
    zieme           TYPE dzieme,
    netwr           TYPE netwr_ap,
    netpr           TYPE netpr,
    abgru           TYPE abgru_va,
    faksp           TYPE faksp_ap,
    j_1bcfop        TYPE j_1bcfop,
    pstyv           TYPE pstyv,
    uepos           TYPE uepos,
    ntgew           TYPE ntgew_ap,
    brgew           TYPE brgew_ap,
    prctr           TYPE prctr,
    lgort           TYPE lgort_d,
    route           TYPE route,
    j_3arqda        TYPE j_3arqda,
    mwsbp           TYPE mwsbp,
  END OF tp_inicial,

  BEGIN OF ty_3adbbad,
    matnr           TYPE j_3adbbad-matnr,
    werks           TYPE j_3adbbad-werks,
    aufnr           TYPE j_3adbbad-aufnr,
    posnr           TYPE j_3adbbad-posnr,
    etenr           TYPE j_3adbbad-etenr,
    j_3absnr        TYPE j_3adbbad-j_3absnr,
    j_3astat        TYPE j_3adbbad-j_3astat,
    j_3abskz        TYPE j_3adbbad-j_3abskz,
  END OF ty_3adbbad,

  BEGIN OF tp_proforma,
    vbeln TYPE vbeln_vf,
    posnr TYPE posnr_vf,
    aubel TYPE vbeln_va,
    aupos TYPE posnr_va,
    fkart TYPE fkart,
  END OF tp_proforma,

  BEGIN OF tp_kna1,
    kunnr       TYPE kunnr,
    name1       TYPE name1_gp,
    ort01       TYPE kna1-ort01,
    adrnr       TYPE kna1-adrnr,
    regio       TYPE kna1-regio,
    stcd1       TYPE kna1-stcd1,
    txjcd       TYPE kna1-txjcd,
    zznomeshop  TYPE kna1-zznomeshop,
    sperr       TYPE sperr,
  END OF tp_kna1,

  BEGIN OF tp_adrc,
    addrnumber  TYPE adrc-addrnumber,
    sort1       TYPE adrc-sort1,
  END OF tp_adrc,

  BEGIN OF tp_zterm,
    zterm TYPE t052u-zterm,
    text1 TYPE t052u-text1,
  END OF tp_zterm,

  BEGIN OF tp_vbkd,
    vbeln   TYPE vbeln,
    posnr   TYPE posnr,
    kdgrp   TYPE kdgrp,
    zterm   TYPE dzterm,
    bzirk   TYPE bzirk,
    prsdt   TYPE prsdt,
    inco1   TYPE inco1,
    bstkd_e TYPE bstkd_e,
    bstkd   TYPE bstkd,
    ihrez   TYPE ihrez,
  END OF tp_vbkd,

  BEGIN OF tp_vbpa,
    vbeln  TYPE vbeln,
    parvw  TYPE parvw,
    kunnr  TYPE kunnr,
    lifnr  TYPE lifnr,
  END OF tp_vbpa,

  BEGIN OF tp_knvp,
    kunnr  TYPE kunnr,
    vkorg  TYPE vkorg,
    vtweg  TYPE vtweg,
    spart  TYPE spart,
    parvw  TYPE parvw,
    kunn2  TYPE kunn2,
    lifnr  TYPE lifnr,
  END OF tp_knvp,

  BEGIN OF tp_vbuk,
    vbeln    TYPE vbeln,
    gbstk    TYPE gbstk,
    abstk    TYPE abstk,
    lfstk    TYPE lfstk,
    cmgst    TYPE cmgst,
    j_3arun1 TYPE j_3arun1,
  END OF tp_vbuk,

  BEGIN OF tp_vbup,
    vbeln    TYPE vbeln,
    posnr    TYPE posnr,
    j_3arun1 TYPE j_3arun1,
  END OF tp_vbup,

 BEGIN OF tp_vbep,
    vbeln     TYPE vbeln_va,
    posnr     TYPE posnr_va,
    etenr     TYPE etenr,
    wmeng     TYPE wmeng,
    bmeng     TYPE bmeng,
    vrkme     TYPE vrkme,
    j_3asize  TYPE j_3asize,
    j_4krcat  TYPE j_4krcat,
    j_3aean11 TYPE ean11,
    j_3areten TYPE j_3areten,
    j_3aabgru TYPE abgru_va,
  END OF tp_vbep,

  BEGIN OF tp_mvke,
    matnr  TYPE matnr,
    vkorg  TYPE vkorg,
    vtweg  TYPE vtweg,
    mvgr5  TYPE mvgr5,
    zmvgr4 TYPE zesd_mvgr4,
    zmvgr6 TYPE zesd_mvgr6,
  END OF tp_mvke,

  BEGIN OF tp_mean,
    matnr  TYPE matnr,
    ean11  TYPE ean11,
  END OF tp_mean,

  BEGIN OF tp_marc,
    matnr  TYPE matnr,
    werks  TYPE werks_d,
    steuc  TYPE steuc,
  END OF tp_marc,

  BEGIN OF tp_lips,
    vbeln     TYPE vbeln_vl,
    posnr     TYPE posnr_vl,
    vgbel     TYPE vgbel,
    vgpos     TYPE vgpos,
    matnr     TYPE matnr,
    lfimg     TYPE lfimg,
    vrkme     TYPE vrkme,
    j_3asize  TYPE j_3asize,
    j_4krcat  TYPE j_4krcat,
    faksp     TYPE faksp,
    ntgew     TYPE ntgew_15,
    brgew     TYPE brgew_15,
    j_3aeten  TYPE j_3aetenv,
  END OF tp_lips,

  BEGIN OF tp_likp,
    vbeln  TYPE vbeln_vl,
    bldat  TYPE bldat,
    faksk  TYPE faksk,
    "Lucas Pereira - Squad Logística - 01/03/2022 - Início.
    vbtyp TYPE vbtyp,
    vlstk TYPE vlstk,
    "Lucas Pereira - Squad Logística - 01/03/2022 - Fim.
  END OF tp_likp,

  BEGIN OF tp_vbrp,
*   VBRP
    vbeln    TYPE vbeln_vf,
    posnr    TYPE posnr_vf,
    knumv    TYPE knumv,
    zterm    TYPE dzterm,
    matnr    TYPE matnr,
    fkimg    TYPE fkimg,
    vrkme    TYPE vrkme,
    shkzg    TYPE shkzg,
    j_3asize TYPE j_3asize,
    j_3avgete TYPE j_3avgete,
    j_4kscat TYPE j_4krcat,
    aubel    TYPE vbeln_va,
    aupos    TYPE posnr_va,
    vgbel    TYPE vbrp-vgbel,
    vgpos    TYPE vbrp-vgpos,
    netwr    TYPE netwr_fp,
*   VBRK
    vbeln_k  TYPE vbeln_vf,
    fkart    TYPE fkart,
    fkdat    TYPE fkdat,
    netwr_k  TYPE netwr,
  END OF tp_vbrp,

  BEGIN OF tp_vbrk,
    vbeln  TYPE vbeln_vf,
    fkart  TYPE fkart,
  END OF tp_vbrk,

  BEGIN OF tp_bnflin,
    docnum  TYPE j_1bdocnum,
    itmnum  TYPE j_1bitmnum,
    matnr   TYPE matnr,
    refkey  TYPE j_1brefkey,
    refitm  TYPE j_1brefitm,
    menge   TYPE j_1bnetqty,
    meins   TYPE j_1bnetunt,
    netpr   TYPE j_1bnetpri,
  END OF tp_bnflin,

  BEGIN OF tp_bnfdoc,
    docnum  TYPE j_1bdocnum,
    nfenum  TYPE j_1bnfnum9,
    series  TYPE j_1bseries,
    docdat  TYPE j_1bdocdat,
  END OF tp_bnfdoc,

  BEGIN OF tp_fnad,
    docnum TYPE j_1bdocnum,
    nfenum TYPE j_1bnfnum9,
    series TYPE j_1bseries,
    parid  TYPE j_1bparid,
  END OF tp_fnad,

  BEGIN OF tp_bkpf,
    bukrs   TYPE bukrs,
    belnr   TYPE belnr_d,
    xblnr   TYPE xblnr1,
  END OF tp_bkpf,

  BEGIN OF tp_j_3adbba ,
    matnr    TYPE matnr,
    werks    TYPE werks_d,
    aufnr    TYPE j_3aaufn,
    posnr    TYPE posnr,
    j_3abskz TYPE j_3abskz,
  END OF tp_j_3adbba ,

  BEGIN OF tp_ekbe,
    ebeln   TYPE ebeln,
    ebelp   TYPE ebelp,
    bewtp   TYPE bewtp,
  END OF tp_ekbe,

  BEGIN OF tp_rbkp,
    belnr   TYPE re_belnr,
    gjahr   TYPE gjahr,
    xblnr   TYPE xblnr1,
  END OF tp_rbkp,

  BEGIN OF tp_eket,
    ebeln    TYPE ebeln,
    ebelp    TYPE ebelp,
    eindt    TYPE eindt,
    banfn    TYPE banfn,
    bnfpo    TYPE bnfpo,
    j_3auanr TYPE j_3auanr,
    j_3aupos TYPE j_3aupos,
  END OF tp_eket,

  BEGIN OF tp_konv,
    knumv     TYPE knumv,
    kposn     TYPE kposn,
    j_3aetenr TYPE etenr,
    kappl     TYPE kappl,
    kschl     TYPE kscha,
    kbetr     TYPE kbetr,
    kwert     TYPE kwert,
    kmprs     TYPE kmprs,
  END OF tp_konv,

  BEGIN OF tp_j3abdbs,
    werks    TYPE werks_d,
    matnr    TYPE matnr,
    aufnr    TYPE j_3aaufn,
    posnr    TYPE posnr,
    etenr    TYPE etenr,
    j_3astat TYPE j_3astat,
    j_3abskz TYPE j_3abskz,
    j_3absnr TYPE j_3absnr,
    j_3ahbsp TYPE j_3ahbsp,
    j_3aebsp TYPE j_3aebsp,
    menge    TYPE menge_d,
    edatu_po TYPE j_3aedatp,
  END OF tp_j3abdbs,

  BEGIN OF tp_mska,
    matnr    TYPE mska-matnr,
    werks    TYPE mska-werks,
    lgort    TYPE mska-lgort,
    vbeln    TYPE mska-vbeln,
    posnr    TYPE mska-posnr,
    j_3asize TYPE mska-j_3asize,
    kalab    TYPE mska-kalab,
  END OF tp_mska,

  BEGIN OF tp_alvout,
    vbeln                TYPE   vbeln,
    posnr                TYPE   posnr,
    audat                TYPE   audat,
    erdat                TYPE   erdat, ">>> Eduardo Sbyte - 2023070 - 31/07/2023
    auart                TYPE   auart,
    vkorg                TYPE   vkorg,
    vkorg_txt            TYPE   vtxtk,
    vtweg                TYPE   vtweg,
    vtweg_txt            TYPE   vtxtk,
    spart                TYPE   spart,
    spart_txt            TYPE   vtxtk,
    vkbur                TYPE   vkbur,
    vkbur_txt            TYPE   bezei20,
    vkgrp                TYPE   vkgrp,
    vkgrp_txt            TYPE   bezei20,
    prctr                TYPE   prctr,
    zterm                TYPE   dzterm,
    zterm_txt            TYPE   text1_052,
    lgort                TYPE   lgort_d,
    bzirk                TYPE   bzirk,
    bzirk_txt            TYPE   bztxt,
    prsdt                TYPE   prsdt,
    inco1                TYPE   inco1,
    bstkd_e              TYPE   bstkd_e,
    kunnr1               TYPE   kunag,
    name1                TYPE   name1_gp,
    sort1                TYPE   adrc-sort1,
    city1                TYPE   adrc-city1,
    uf                   TYPE   kna1-regio,
    zznomeshop           TYPE   kna1-zznomeshop,
    kunnr1_receb         TYPE   kunag, ">>> Adilson Sbyte - 2022034 - 05/07/2022
    name1_receb          TYPE   name1_gp,
    sort1_receb          TYPE   adrc-sort1,
    city1_receb          TYPE   adrc-city1,
    uf_receb             TYPE   kna1-regio,
    zznomeshop_receb     TYPE   kna1-zznomeshop, "<<< Adilson Sbyte - 2022034 - 05/07/2022
    kdgrp                TYPE   kdgrp,
    kdgrp_txt            TYPE   vtxtk,
    parvw3               TYPE   lifnr,
    parvw3_txt           TYPE   name1_gp,
    parvw4               TYPE   kunnr,
    parvw4_txt           TYPE   name1_gp,
    parvw5               TYPE   lifnr,
    parvw5_txt           TYPE   name1_gp,
    parvw6               TYPE   kunnr,
    parvw14              TYPE   kunnr,
    parvw15              TYPE   kunnr,
    parvw16              TYPE   kunnr,
    matkl                TYPE   matkl,
    matkl_txt            TYPE   wgbez,
    j_3asean             TYPE   j_3aseand,
    text_sean            TYPE   j_3aseant-text,
    /afs/theme           TYPE   /afs/theme,
    text_theme           TYPE   j_3aseant-text,
    /afs/collection      TYPE   /afs/collection,
    text_colle           TYPE   j_3aseant-text,
    dt_sellout           TYPE   /afs/dprg_kond-j_3adldv,
    j_3adldv             TYPE   /afs/dprg_kond2-j_3adldv,
    j_3adldb             TYPE   /afs/dprg_kond2-j_3adldb,
    cmgst                TYPE   cmgst,
    cmgst_txt            TYPE   ddtext,
    matnr                TYPE   matnr,
    matnr_vans           TYPE   char18,
    mtorg                TYPE   mbew-mtorg,
    text_mtorg           TYPE   val_text,
    wmeng                TYPE   wmeng,
    bmeng                TYPE   bmeng,
    vrkme                TYPE   vrkme,
    j_3asize             TYPE   j_3asize,
    j_4krcat             TYPE   j_4krcat,
    j_3aean11            TYPE   ean11,
    j_3aabgru            TYPE   abgru_va,
    j_3aabgru_txt        TYPE   ddtext, "Gazzi - 02.12
    arktx                TYPE   arktx,
    steuc                TYPE   steuc,
    lifsk                TYPE   lifsk,
    lifsk_txt            TYPE   ddtext, "Gazzi - 02.12
    fakskord             TYPE   faksk,
    fakskord_txt         TYPE   ddtext, "Gazzi - 02.12
    abgru                TYPE   abgru_va,
    abgru_txt            TYPE   ddtext, "Gazzi - 02.12
    fakspord             TYPE   faksp_ap,
    fakspord_txt         TYPE   ddtext, "Gazzi - 02.12
    j_1bcfop             TYPE   j_1bcfop,
    numrem               TYPE   num10,
    datrem               TYPE   bldat,
    itmrem               TYPE   num10,
    lfimg                TYPE   lfimg,
    matrizrem            TYPE   j_3asize,
    fakskrem             TYPE   faksk,
    fakskrem_txt         TYPE   ddtext, "Gazzi - 02.12
    faksprem             TYPE   faksp_ap,
    faksprem_txt         TYPE   ddtext, "Gazzi - 02.12
    numfat               TYPE   num10,
    datfat               TYPE   fkdat,
    itmfat               TYPE   posnr,
    fkimg                TYPE   fkimg,
    vlrbrtitmfat         TYPE   j_1blppbrt,
    vlrbrtfat            TYPE   j_1blppbrt,
    vlrbrtitmord         TYPE   netwr_ap,
    vlrbrtord            TYPE   netwr_ap,
    estfat               TYPE   vbeln,
    nfenum               TYPE   j_1bnfnum9,
    series               TYPE   j_1bseries,
    datanf               TYPE   j_1bdocdat,
    menge                TYPE   j_1bnetqty,
    pstyv                TYPE   pstyv,
    pedcomp              TYPE   ebeln,
    eindt                TYPE   eindt,
    stataloc             TYPE   j_3astat,
    stataloc_txt         TYPE   j_3atext,
    stataloc_etq         TYPE   j_3abskz,
    stataloc_etq_txt     TYPE   ddtext,
    vl_zpvl	             TYPE   kwert,
    mt_zpvl               TYPE   kbetr,
    vl_zpvb	             TYPE   kwert,
    mt_zpvb	             TYPE   kbetr,
    vl_zicp	             TYPE   kwert,
    mt_zicp	             TYPE   kbetr,
    mt_ziib	             TYPE   kbetr,
    vl_zinf               TYPE   kwert,
    mt_zinf	             TYPE   kbetr,
    vl_ztpv	             TYPE   kwert,
    mt_ztpv	             TYPE   kbetr,
    vl_vprs	             TYPE   kwert,
    mt_vprs	             TYPE   kbetr,
    vl_zroy	             TYPE   kwert,
    mt_zroy	             TYPE   kbetr,
    vl_zfpr	             TYPE   kwert,
    mt_zfpr	             TYPE   kbetr,
    vl_zpnf	             TYPE   kwert,
    mt_zpnf	             TYPE   kbetr,
    vl_zrom               TYPE   kwert,
    mt_zrom               TYPE   kbetr,
    vl_zfpm	             TYPE   kwert,
    mt_zfpm	             TYPE   kbetr,
    vl_zcom	             TYPE   kwert,
    mt_zcom	             TYPE   kbetr,
    vl_zdsc	             TYPE   kwert,
    mt_zdsc	             TYPE   kbetr,
    knumv                TYPE   knumv,
    vgbel                TYPE   vgbel,
    xblnr                TYPE   xblnr,
    vgpos                TYPE   vgpos,
    augru                TYPE   augru,
    augru_txt            TYPE   bezei,
    " Gazzi - 02.12
    mt_uroy	             TYPE   kbetr,
    mt_ufpr	             TYPE   kbetr,
    kalab                TYPE   labst,
    j_3arqda             TYPE   j_3arqda,
    netwr                TYPE   netwr,
    mwsbp                TYPE   mwsbp,
    werks                TYPE   vbap-werks,
    vl_zapi              TYPE   kwert,
    mt_zapi              TYPE   kbetr,
    vl_zpvl2             TYPE   kwert,
    vl_zpvb2             TYPE kwert,
    mt_zpvb2             TYPE kbetr,
    vl_zapi2             TYPE kwert,
    mt_zapi2             TYPE kbetr,
    vl_zicp2             TYPE kwert,
    mt_zicp2             TYPE kbetr,
    vl_zdsc2             TYPE kwert,
    mt_zdsc2             TYPE kbetr,
    vl_ziib2             TYPE kwert,
    mt_ziib2             TYPE kwert,
    vl_zinf2             TYPE kbetr,
    mt_zinf2             TYPE kbetr,
    vl_zroy2             TYPE kwert,
    mt_zroy2             TYPE kbetr,
    vl_zfpr2             TYPE kwert,
    mt_zfpr2             TYPE kbetr,
    vl_zcom2             TYPE kwert,
    mt_zcom2             TYPE kbetr,
    vl_zpnf2             TYPE kwert,
    mt_zpnf2             TYPE kbetr,
    vl_ztpv2             TYPE kwert,
    mt_ztpv2             TYPE kbetr,
    zterm2               TYPE dzterm,
    zterm_txt2           TYPE text1_052,
    status               TYPE zde_status,
    cod_ocorr            TYPE zocorr,
    dt_ocorr             TYPE zdt_ocorr,
    tx_ocorr             TYPE ztx_ocorr,
    dt_eloja             TYPE zdt_eloja,
    lprio                TYPE char20,
    kvgr2                TYPE char20,
    kvgr3                TYPE char20,
    zzgenero             TYPE char060,
    zzsilhueta           TYPE zesd_silhueta_desc,
    zzsize_category      TYPE zesd_size_category_desc,
    zzcarry_over         TYPE char060,
    zzsub_grupo          TYPE zesd_sub_grupo_desc,
    zzsub_linha          TYPE zesd_sub_linha_desc,
    bstkd                TYPE bstkd,
    mvgr5_descr          TYPE bezei40,
    zmvgr4_desc          TYPE bezei40,
    zmvgr6_desc          TYPE bezei40,
    obs_pedido           TYPE tdline,
    status_mercadoria    TYPE char12,
    ihrez                TYPE ihrez,
    stcd1                TYPE stcd1,
    pedido_bi            TYPE ebeln,
  END OF tp_alvout,

  BEGIN OF tp_alvout2,
    vbeln                TYPE   vbeln,
    posnr                TYPE   posnr,
    audat                TYPE   audat,
    erdat                TYPE   erdat, ">>> Eduardo Sbyte - 2023070 - 31/07/2023
    auart                TYPE   auart,
    vkorg                TYPE   vkorg,
    vkorg_txt            TYPE   vtxtk,
    vtweg                TYPE   vtweg,
    vtweg_txt            TYPE   vtxtk,
    spart                TYPE   spart,
    spart_txt            TYPE   vtxtk,
    vkbur                TYPE   vkbur,
    vkbur_txt            TYPE   bezei20,
    vkgrp                TYPE   vkgrp,
    vkgrp_txt            TYPE   bezei20,
    prctr                TYPE   prctr,
    zterm                TYPE   dzterm,
    zterm_txt            TYPE   text1_052,
    lgort                TYPE   lgort_d,
    bzirk                TYPE   bzirk,
    bzirk_txt            TYPE   bztxt,
    prsdt                TYPE   prsdt,
    inco1                TYPE   inco1,
    bstkd_e              TYPE   bstkd_e,
    kunnr1               TYPE   kunag,
    name1                TYPE   name1_gp,
    sort1                TYPE   adrc-sort1,
    city1                TYPE   adrc-city1,
    uf                   TYPE   kna1-regio,
    zznomeshop           TYPE   kna1-zznomeshop,
    kunnr1_receb         TYPE   kunag, ">>> Adilson Sbyte - 2022034 - 05/07/2022
    name1_receb          TYPE   name1_gp,
    sort1_receb          TYPE   adrc-sort1,
    city1_receb          TYPE   adrc-city1,
    uf_receb             TYPE   kna1-regio,
    zznomeshop_receb     TYPE   kna1-zznomeshop, "<<< Adilson Sbyte - 2022034 - 05/07/2022
    kdgrp                TYPE   kdgrp,
    kdgrp_txt            TYPE   vtxtk,
    parvw3               TYPE   lifnr,
    parvw3_txt           TYPE   name1_gp,
    parvw4               TYPE   kunnr,
    parvw4_txt           TYPE   name1_gp,
    parvw5               TYPE   lifnr,
    parvw5_txt           TYPE   name1_gp,
    parvw6               TYPE   kunnr,
    parvw14              TYPE   kunnr,
    parvw15              TYPE   kunnr,
    parvw16              TYPE   kunnr,
    matkl                TYPE   matkl,
    matkl_txt            TYPE   wgbez,
    j_3asean             TYPE   j_3aseand,
    text_sean            TYPE   j_3aseant-text,
    /afs/theme           TYPE   /afs/theme,
    text_theme           TYPE   j_3aseant-text,
    /afs/collection      TYPE   /afs/collection,
    text_colle           TYPE   j_3aseant-text,
    dt_sellout           TYPE   /afs/dprg_kond-j_3adldv,
    j_3adldv             TYPE   /afs/dprg_kond2-j_3adldv,
    j_3adldb             TYPE   /afs/dprg_kond2-j_3adldb,
    cmgst                TYPE   cmgst,
    cmgst_txt            TYPE   ddtext,
    matnr                TYPE   matnr,
    matnr_vans           TYPE   char18,
    mtorg                TYPE   mbew-mtorg,
    text_mtorg           TYPE   val_text,
    wmeng                TYPE   wmeng,
    bmeng                TYPE   bmeng,
    vrkme                TYPE   vrkme,
    j_3asize             TYPE   j_3asize,
    j_4krcat             TYPE   j_4krcat,
    j_3aabgru            TYPE   abgru_va,
    j_3aabgru_txt        TYPE   ddtext, "Gazzi - 02.12
    arktx                TYPE   arktx,
    steuc                TYPE   steuc,
    lifsk                TYPE   lifsk,
    lifsk_txt            TYPE   ddtext, "Gazzi - 02.12
    fakskord             TYPE   faksk,
    fakskord_txt         TYPE   ddtext, "Gazzi - 02.12
    abgru                TYPE   abgru_va,
    abgru_txt            TYPE   ddtext, "Gazzi - 02.12
    fakspord             TYPE   faksp_ap,
    fakspord_txt         TYPE   ddtext, "Gazzi - 02.12
    j_1bcfop             TYPE   j_1bcfop,
    numrem               TYPE   num10,
    datrem               TYPE   bldat,
    lfimg                TYPE   lfimg,
    fakskrem             TYPE   faksk,
    fakskrem_txt         TYPE   ddtext, "Gazzi - 02.12
    faksprem             TYPE   faksp_ap,
    faksprem_txt         TYPE   ddtext, "Gazzi - 02.12
    numfat               TYPE   num10,
    datfat               TYPE   fkdat,
    fkimg                TYPE   fkimg,
    vlrbrtitmfat         TYPE   j_1blppbrt,
    vlrbrtfat            TYPE   j_1blppbrt,
    vlrbrtitmord         TYPE   netwr_ap,
    vlrbrtord            TYPE   netwr_ap,
    estfat               TYPE   vbeln,
    nfenum               TYPE   j_1bnfnum9,
    series               TYPE   j_1bseries,
    datanf               TYPE   j_1bdocdat,
    menge                TYPE   j_1bnetqty,
    pstyv                TYPE   pstyv,
    pedcomp              TYPE   ebeln,
    stataloc             TYPE   string,
    stataloc2            TYPE   string,
    stataloc_etq         TYPE   string,
    stataloc_etq2        TYPE   string,
    vl_zpvl	             TYPE   kwert,
    mt_zpvl               TYPE   kbetr,
    vl_zpvb	             TYPE   kwert,
    mt_zpvb	             TYPE   kbetr,
    vl_zicp	             TYPE   kwert,
    mt_zicp	             TYPE   kbetr,
    mt_ziib	             TYPE   kbetr,
    vl_zinf               TYPE   kwert,
    mt_zinf	             TYPE   kbetr,
    vl_ztpv	             TYPE   kwert,
    mt_ztpv	             TYPE   kbetr,
    vl_vprs	             TYPE   kwert,
    mt_vprs	             TYPE   kbetr,
    vl_zroy	             TYPE   kwert,
    mt_zroy	             TYPE   kbetr,
    vl_zfpr	             TYPE   kwert,
    mt_zfpr	             TYPE   kbetr,
    vl_zpnf	             TYPE   kwert,
    mt_zpnf	             TYPE   kbetr,
    vl_zrom               TYPE   kwert,
    mt_zrom               TYPE   kbetr,
    vl_zfpm	             TYPE   kwert,
    mt_zfpm	             TYPE   kbetr,
    vl_zcom	             TYPE   kwert,
    mt_zcom	             TYPE   kbetr,
    vl_zdsc	             TYPE   kwert,
    mt_zdsc	             TYPE   kbetr,
    knumv                TYPE   knumv,
    vgbel                TYPE   vgbel,
    xblnr                TYPE   xblnr,
*    vgpos                TYPE   vgpos,
    augru                TYPE   augru,
    augru_txt            TYPE   bezei,
    mt_uroy	             TYPE   kbetr,
    mt_ufpr	             TYPE   kbetr,
    kalab                TYPE   labst,
    j_3arqda             TYPE   j_3arqda,
    netwr                TYPE   netwr,
    mwsbp                TYPE   mwsbp,
    werks                TYPE   vbap-werks,
    vl_zapi              TYPE   kwert,
    mt_zapi              TYPE   kbetr,
    vl_zpvl2             TYPE   kwert,
    vl_zpvb2             TYPE kwert,
    mt_zpvb2             TYPE kbetr,
    vl_zapi2             TYPE kwert,
    mt_zapi2             TYPE kbetr,
    vl_zicp2             TYPE kwert,
    mt_zicp2             TYPE kbetr,
    vl_zdsc2             TYPE kwert,
    mt_zdsc2             TYPE kbetr,
    vl_ziib2             TYPE kwert,
    mt_ziib2             TYPE kwert,
    vl_zinf2             TYPE kbetr,
    mt_zinf2             TYPE kbetr,
    vl_zroy2             TYPE kwert,
    mt_zroy2             TYPE kbetr,
    vl_zfpr2             TYPE kwert,
    mt_zfpr2             TYPE kbetr,
    vl_zcom2             TYPE kwert,
    mt_zcom2             TYPE kbetr,
    vl_zpnf2             TYPE kwert,
    mt_zpnf2             TYPE kbetr,
    vl_ztpv2             TYPE kwert,
    mt_ztpv2             TYPE kbetr,
    zterm2               TYPE dzterm,
    zterm_txt2           TYPE text1_052,
    status               TYPE zde_status,
    stat_ord             TYPE zde_status2,
    cod_ocorr            TYPE zocorr,
    dt_ocorr             TYPE zdt_ocorr,
    tx_ocorr             TYPE ztx_ocorr,
    dt_eloja             TYPE zdt_eloja,
    eindt                TYPE eindt,
    lprio                TYPE char20,
    kvgr2                TYPE char20,
    kvgr3                TYPE char20,
    zzgenero             TYPE char060,
    zzsilhueta           TYPE zesd_silhueta,
    zzsize_category      TYPE zesd_size_category,
    zzcarry_over         TYPE char060,
    zzsub_grupo          TYPE zesd_sub_grupo,
    zzsub_linha          TYPE zesd_sub_linha,
    bstkd                TYPE bstkd,
    mvgr5_descr          TYPE bezei40,
    zmvgr4_desc          TYPE bezei40,
    zmvgr6_desc          TYPE bezei40,
    obs_pedido           TYPE tdline,
    status_mercadoria    TYPE char12,
    ihrez                TYPE ihrez,
    stcd1                TYPE stcd1,
    "Lucas Pereira - Squad Logística - 01/03/2022 - Início.
     lib_bloq            TYPE string,
     tipo_bloq           TYPE string,
     bloqueios           TYPE string,
    "Lucas Pereira - Squad Logística - 01/03/2022 - Fim.
     saldo_contrato      TYPE string,
     pedido_bi           TYPE ebeln,
     dtcanc              TYPE datum, "Sbyte Adilson - 13.03.2023
     usercanc            TYPE user,
  END OF tp_alvout2,

  BEGIN OF tp_no_sum,
    vbeln                TYPE vbeln,
    posnr                TYPE posnr,
    vl_zpvl              TYPE kwert,
    mt_zpvb              TYPE kwert,
    mt_zicp              TYPE kwert,
    mt_ziib              TYPE kwert,
    mt_zinf              TYPE kwert,
    mt_ztpv              TYPE kwert,
    mt_vprs              TYPE kwert,
    mt_zroy              TYPE kwert,
    mt_zfpr              TYPE kwert,
    mt_zpnf              TYPE kwert,
    mt_zcom              TYPE kwert,
    mt_zdsc              TYPE kwert,
    mt_uroy              TYPE kwert,
    mt_ufpr              TYPE kwert,
    netwr                TYPE kwert,
    mwsbp                TYPE kwert,
    mt_zapi              TYPE kwert,
    mt_zpvb2             TYPE kwert,
    mt_zapi2             TYPE kwert,
    mt_zicp2             TYPE kwert,
    mt_zdsc2             TYPE kwert,
    mt_ziib2             TYPE kwert,
    mt_zinf2             TYPE kwert,
    mt_zroy2             TYPE kwert,
    mt_zfpr2             TYPE kwert,
    mt_zcom2             TYPE kwert,
    mt_zpnf2             TYPE kwert,
    mt_ztpv2             TYPE kwert,
  END OF  tp_no_sum,

  BEGIN OF tp_parceiros_txt,
    codpa                TYPE kunnr,
    name1                TYPE name1_gp,
  END OF tp_parceiros_txt,

  BEGIN OF tp_vbap,
    vbeln   TYPE vbeln,
    posnr   TYPE posnr,
    kwmeng  TYPE vbap-kwmeng,
  END OF tp_vbap.

TYPES: BEGIN OF ty_ordem_nf,
          vbeln   TYPE ztsd_geral2-vbeln,
          posnr   TYPE ztsd_geral2-posnr,
          nfenum  TYPE ztsd_geral2-nfenum,
       END OF ty_ordem_nf,

       BEGIN OF tp_knvv,
         kunnr TYPE kunnr,
         vkorg TYPE vkorg,
         vtweg TYPE vtweg,
         spart TYPE spart,
         lprio TYPE lprio,
         kvgr2 TYPE kvgr2,
         kvgr3 TYPE kvgr3,
         faksd TYPE knvv-faksd,
       END OF tp_knvv,

       BEGIN OF tp_mara,
         matnr           TYPE matnr,
         bismt           TYPE bismt,
         zzgenero        TYPE zesd_genero,
         zzsilhueta      TYPE zesd_silhueta,
         zzsize_category TYPE zesd_size_category,
         zzcarry_over    TYPE zesd_carry_over,
         zzsub_grupo     TYPE zesd_sub_grupo,
         zzsub_linha     TYPE zesd_sub_linha,
       END OF tp_mara,

       BEGIN OF ty_cross_stat,
        vbeln    TYPE ztmm_cross_stat-vbeln,
        vbelp    TYPE ztmm_cross_stat-vbelp,
        ebeln    TYPE ztmm_cross_stat-ebeln,
        ebelp    TYPE ztmm_cross_stat-ebelp,
        vbeln_vl TYPE ztmm_cross_stat-vbeln_vl,
       END   OF ty_cross_stat,

       BEGIN OF ty_vbuk_stat,
        vbeln TYPE vbuk-vbeln,
        wbstk TYPE vbuk-wbstk,
       END   OF ty_vbuk_stat,

       "Lucas Pereira - Squad Logística - 01/03/2022 - Início.
   BEGIN OF tp_dados_remessa,
           vbeln TYPE vbeln,
           posnr TYPE posnr,
           numrem TYPE numc10,
           bukrs TYPE bukrs,
           vlstk TYPE vlstk,
           cmgst TYPE cmgst,
           faksk TYPE faksk,
           faksp TYPE faksp,
           sperr_kna1 TYPE sperr,
           sperr_knb1 TYPE sperr,
           faksd_knvv TYPE knvv-faksd,
         END OF tp_dados_remessa,


   BEGIN OF tp_dados_ordem,
           vbeln TYPE vbeln,
           posnr TYPE posnr,
           etenr TYPE etenr,
           aufnr TYPE j_3aaufn,
           kunnr TYPE kunnr,
           bukrs TYPE bukrs,
           vkorg TYPE vkorg,
           vtweg TYPE vtweg,
           spart TYPE spart,
           werks TYPE werks_d,
           regio TYPE regio,
           txjcd TYPE txjcd,
           dt_lib_s_1 TYPE dats,
           lifsk TYPE lifsk,
           abgru TYPE abgru,
           status TYPE zde_status,
           faksk TYPE faksk,
           pstyv TYPE pstyv,
           matkl TYPE matkl,
           grade TYPE j_4krcat,
           j_3asean TYPE j_3asean,
           scampo TYPE char1,
           sabgru TYPE abgru,
           scmgst TYPE cmgst,
           scmgst2 TYPE cmgst,
           slifsk TYPE lifsk,
           sfaksk TYPE faksk,
           slifsp TYPE lifsp,
           ssperr TYPE ssperr,
           slifsd TYPE lifsd_v,
           slifsd2 TYPE lifsd_v,
         END OF tp_dados_ordem.


DATA: lt_dados_ordens TYPE TABLE OF tp_dados_ordem,
      lt_dados_remessas TYPE TABLE OF tp_dados_remessa.
FIELD-SYMBOLS: <fs_alvout2> TYPE  tp_alvout2.
"Lucas Pereira - Squad Logística - 01/03/2022 - Fim.

TYPES:
   type_t_inicial  TYPE TABLE OF tp_inicial,
   type_t_proforma TYPE TABLE OF tp_proforma,
   type_t_kna1    TYPE TABLE OF tp_kna1,
   type_t_vbkd    TYPE TABLE OF tp_vbkd,
   type_t_vbpa    TYPE TABLE OF tp_vbpa,
   type_t_knvp    TYPE TABLE OF tp_knvp,
   type_t_vbuk    TYPE TABLE OF tp_vbuk,
   type_t_vbup    TYPE TABLE OF tp_vbup,
   type_t_vbep    TYPE TABLE OF tp_vbep,
   type_t_mvke    TYPE TABLE OF tp_mvke,
   type_t_mean    TYPE TABLE OF tp_mean,
   type_t_marc    TYPE TABLE OF tp_marc,
   type_t_lips    TYPE TABLE OF tp_lips,
   type_t_likp    TYPE TABLE OF tp_likp,
   type_t_vbrp    TYPE TABLE OF tp_vbrp,
   type_t_vbrk    TYPE TABLE OF tp_vbrk,
   type_t_bnflin  TYPE TABLE OF tp_bnflin,
   type_t_bnfdoc  TYPE TABLE OF tp_bnfdoc,
   type_t_j3adbba TYPE TABLE OF tp_j_3adbba,
   type_t_ekbe    TYPE TABLE OF tp_ekbe,
   type_t_rbkp    TYPE TABLE OF tp_rbkp,
   type_t_eket    TYPE TABLE OF tp_eket,
   type_t_konv    TYPE TABLE OF tp_konv,
   type_t_j3abdbs TYPE TABLE OF tp_j3abdbs,
   type_t_mska    TYPE TABLE OF tp_mska,
   type_t_alvout  TYPE TABLE OF tp_alvout,
   type_t_zterm   TYPE TABLE OF tp_zterm,
   type_t_parceiros_txt  TYPE TABLE OF tp_parceiros_txt,
   type_t_3adbbad TYPE TABLE OF ty_3adbbad,
   type_t_ordemnf TYPE TABLE OF ty_ordem_nf,
   type_t_cross   TYPE TABLE OF ty_cross_stat,
   type_t_vbuk_s  TYPE TABLE OF ty_vbuk_stat.

DATA:
   t_vbap       TYPE TABLE OF tp_vbap,
   t_inicial    TYPE type_t_inicial,
   t_proforma   TYPE type_t_proforma,
   t_kna1       TYPE type_t_kna1,
   t_kna1_receb TYPE type_t_kna1, " Adilson Sbyte - 2022034 - 05/07/2022
   t_adrc       TYPE TABLE OF tp_adrc,
   t_adrc_receb TYPE TABLE OF tp_adrc,
   t_vbkd       TYPE type_t_vbkd,
   t_vbpa       TYPE type_t_vbpa,
   t_knvp       TYPE type_t_knvp,
   t_vbuk       TYPE type_t_vbuk,
   t_vbup       TYPE type_t_vbup,
   t_vbep       TYPE type_t_vbep,
   t_mvke       TYPE type_t_mvke,
   t_mean       TYPE type_t_mean,
   t_marc       TYPE type_t_marc,
   t_tvlst      TYPE TABLE OF tvlst,
   t_tvfst      TYPE TABLE OF tvfst,
   t_tvagt      TYPE TABLE OF tvagt,
   t_lips       TYPE type_t_lips,
   t_likp       TYPE type_t_likp,
   t_vbrp       TYPE type_t_vbrp,
   t_vbrk       TYPE type_t_vbrk,
   t_bnflin     TYPE type_t_bnflin,
   t_bnfdoc     TYPE type_t_bnfdoc,
   t_nad        TYPE TABLE OF tp_fnad,
   t_sd002      TYPE TABLE OF ztsd_002,
   t_j3adbba    TYPE type_t_j3adbba,
   t_ekbe       TYPE type_t_ekbe,
   t_rbkp       TYPE type_t_rbkp,
   t_eket       TYPE type_t_eket,
   t_konv       TYPE type_t_konv,
   t_konv2      TYPE type_t_konv,
   t_j3abdbs    TYPE type_t_j3abdbs,
   t_mska       TYPE type_t_mska,
   t_alvout     TYPE type_t_alvout,
   t_alvout2    TYPE TABLE OF tp_alvout2,
   t_lead_time  TYPE TABLE OF ztsd_lead_time,
   t_config     TYPE TABLE OF ztsd_config_ckpt,
   t_3aseant    TYPE TABLE OF j_3aseant,
   t_dprg_kond2 TYPE TABLE OF /afs/dprg_kond2,
   t_dprg_kond  TYPE TABLE OF /afs/dprg_kond,
   t_zterm     TYPE type_t_zterm,
   t_tvkot     TYPE TABLE OF tvkot,
   t_tvtwt     TYPE TABLE OF tvtwt,
   t_tspat     TYPE TABLE OF tspat,
   t_tvkbt     TYPE TABLE OF tvkbt,
   t_tvgrt     TYPE TABLE OF tvgrt,
   t_tvaut     TYPE TABLE OF tvaut,
   t_t151t     TYPE TABLE OF t151t,
   t_t023t     TYPE TABLE OF t023t,
   t_t171t     TYPE TABLE OF t171t,
   t_3addtt    TYPE TABLE OF j_3addtt,
   t_3arun1    TYPE TABLE OF tvbst,
   t_3abskz    TYPE TABLE OF rmdi_domvl,
   t_statv     TYPE TABLE OF rmdi_domvl,
   t_cmgst     TYPE TABLE OF rmdi_domvl,
   t_genero    TYPE TABLE OF rmdi_domvl,
   t_carry     TYPE TABLE OF rmdi_domvl,
   t_dbba      TYPE j_3adbbad_t,
   gt_ordens   TYPE TABLE OF tp_ordens,
   gv_auto(1),
   t_parceiros_txt TYPE type_t_parceiros_txt,
   gt_vbfa_j    TYPE STANDARD TABLE OF vbfa,
   gt_vbfa_m    TYPE STANDARD TABLE OF vbfa,
   gs_vbfa      TYPE vbfa,
   t_mbew       TYPE TABLE OF tp_mbew,
   t_3adbbad    TYPE type_t_3adbbad,
   t_knvv       TYPE TABLE OF tp_knvv,
   t_mara       TYPE TABLE OF tp_mara,
   t_tvm5t      TYPE TABLE OF tvm5t,
   t_zmvgr4     TYPE TABLE OF ztsd_zmvgr4,
   t_zmvgr6     TYPE TABLE OF ztsd_zmvgr6,
   t_grp_linha  TYPE TABLE OF ztsd_grp_linha,
   t_silhueta   TYPE TABLE OF ztsd_silhueta,
   t_size_categ TYPE TABLE OF ztsd_size_categ,
   t_tprit      TYPE TABLE OF tprit,
   t_tvv2t      TYPE TABLE OF tvv2t,
   t_tvv3t      TYPE TABLE OF tvv3t,
   t_cross_stat TYPE type_t_cross,
   t_vbuk_stat  TYPE type_t_vbuk_s,
   gt_geral     TYPE TABLE OF ztsd_geral2. "Sbyte Adilson - 16/12/2022

DATA: gt_exec128 TYPE TABLE OF ztsd_exec128.

DATA:
   gt_registro_da_ultima_execucao TYPE STANDARD TABLE OF ztsd_last_exe.

DATA: gt_konv_aux   TYPE type_t_konv,
      gt_konv2_aux  TYPE type_t_konv,
      gt_vbrp_aux   TYPE type_t_vbrp.

DATA: gv_erdat  TYPE erdat,
      gv_vkorg  TYPE vkorg,
      gv_werks  TYPE werks_ext,
      gv_vbeln  TYPE vbak-vbeln,
      gv_posnr  TYPE vbap-posnr,
      gv_matnr  TYPE matnr,
      gv_vtweg  TYPE vtweg,
      gv_kunnr  TYPE kunnr,
      gv_zterm  TYPE dzterm,
      gv_auart  TYPE vbak-auart,
      gv_augru  TYPE vbak-augru,
      gv_kdgrp  TYPE vbkd-kdgrp,
      gv_matkl  TYPE matkl,
      gv_asean  TYPE j_3aseand,
      gv_colle  TYPE /afs/collection,
      gv_theme  TYPE /afs/theme,
      gv_vkbur  TYPE vbak-vkbur,
      gv_vkgrp  TYPE vbak-vkgrp,
      gv_abgru  TYPE vbap-abgru,
      gv_fkdat  TYPE fkdat,
      gv_ernam  TYPE vbak-ernam,
      gv_status TYPE zde_status,
      gv_credat TYPE credat,
      gv_cretim TYPE j_1bcretim.

DATA: gs_last_exe TYPE ztsd_last_exe,
      gv_hour03   TYPE j_1bcretim VALUE '010000'.

">>> Eduardo (SB) - 14.01.2022 - 2022004 - Parametrização PSTYV
DATA: gr_catipts TYPE RANGE OF pstyv,
      gr_catioth TYPE RANGE OF pstyv,
      gr_caticon TYPE RANGE OF pstyv.

DATA: flg_proforma(1),
      flg_vbuk(1),
      flg_vbep(1),
      flg_kna1(1),
      flg_vbpa(1),
      flg_kond(1),
      flg_vbkd(1),
      flg_marc(1),
      flg_lips(1),
      flg_doc(1),
      flg_eket(1),
      flg_j3abdbs(1),
      flg_mska(1),
      flg_konv(1),
      flg_disp(1).

RANGES:
  r_kschl FOR konv-kschl.

CONSTANTS:
c_x            TYPE char1       VALUE   'X',
c_a            TYPE char1       VALUE   'A',
c_c            TYPE char1       VALUE   'C',
c_e            TYPE char1       VALUE   'E',
c_u            TYPE char1       VALUE   'U',
c_s            TYPE char1       VALUE   'S',
c_i            TYPE char1       VALUE   'I',
c_v            TYPE char1       VALUE   'V',
c_h            TYPE char1       VALUE   'H',
c_t            TYPE char1       VALUE   'T',
c_o            TYPE char1       VALUE   'O',
c_zr           TYPE char2       VALUE   'ZR',
c_za           TYPE char2       VALUE   'ZA',
c_zb           TYPE char2       VALUE   'ZB',
c_zc           TYPE char2       VALUE   'ZC',
c_zd           TYPE char2       VALUE   'ZD',
c_ze           TYPE char2       VALUE   'ZE',
c_zf           TYPE char2       VALUE   'ZF',
c_zg           TYPE char2       VALUE   'ZG',
c_zh           TYPE char2       VALUE   'ZH',
c_zi           TYPE char2       VALUE   'ZI',
c_zj           TYPE char2       VALUE   'ZJ',
c_zk           TYPE char2       VALUE   'ZK',
c_af           TYPE char2       VALUE   'AF',
c_tr           TYPE char2       VALUE   'TR',
c_ag           TYPE char2       VALUE   'AG',
c_re           TYPE char2       VALUE   'RE',
c_we           TYPE char2       VALUE   'WE',
c_rg           TYPE char2       VALUE   'RG',
c_f5           TYPE char2       VALUE   'F5',
c_f8           TYPE char2       VALUE   'F8',
c_s1           TYPE char2       VALUE   'S1',
c_ast          TYPE char1       VALUE   '*',
c_0001         TYPE char4       VALUE   '0001',

c_zpvl         TYPE char4       VALUE   'ZPVL',
c_zpvb         TYPE char4       VALUE   'ZPVB',
c_zicp         TYPE char4       VALUE   'ZICP',
c_ziib         TYPE char4       VALUE   'ZIIB',
c_zinf         TYPE char4       VALUE   'ZINF',
c_ztpv         TYPE char4       VALUE   'ZTPV',
c_vprs         TYPE char4       VALUE   'VPRS',
c_zroy         TYPE char4       VALUE   'ZROY',
c_zfpr         TYPE char4       VALUE   'ZFPR',
c_zse5         TYPE char4       VALUE   'ZSE5',
c_zou5         TYPE char4       VALUE   'ZOU5',
c_zpnf         TYPE char4       VALUE   'ZPNF',
c_zrom         TYPE char4       VALUE   'ZROM',
c_zfpm         TYPE char4       VALUE   'ZFPM',
c_zdsc         TYPE char4       VALUE   'ZDSC',
c_zcmi         TYPE char4       VALUE   'ZCMI',  " Gazzi - 02.12
c_ypto         TYPE char4       VALUE   'YPTO',
c_zcom         TYPE char4       VALUE   'ZCOM',
c_icbs         TYPE char4       VALUE   'ICBS', "CPOSE
c_mvke         TYPE thead-tdobject VALUE 'MVKE',
c_vbbk         TYPE thead-tdobject VALUE 'VBBK'.


CLASS gcl_event_handler DEFINITION.
  PUBLIC SECTION.
    METHODS toolbar FOR EVENT toolbar OF cl_gui_alv_grid
                              IMPORTING e_object.

    METHODS hotspot FOR EVENT hotspot_click OF cl_gui_alv_grid
                    IMPORTING e_row_id
                              e_column_id
                              es_row_no.

ENDCLASS.                    "gcl_event_handler DEFINITION

CLASS gcl_event_handler IMPLEMENTATION.

  METHOD toolbar.
    PERFORM alv_toolbar USING e_object.
  ENDMETHOD.                    "toolbar

  METHOD hotspot.
    DATA: ls_linha LIKE LINE OF t_alvout2,
          ls_doc   LIKE LINE OF t_bnfdoc,
          lv_campo(20),
          lv_banfn TYPE eban-banfn,
          lv_ebeln TYPE ekko-ebeln.
    FIELD-SYMBOLS <valor> TYPE any.

    READ TABLE t_alvout2 INTO ls_linha INDEX e_row_id.

    CONCATENATE 'LS_LINHA-' e_column_id INTO lv_campo.
    ASSIGN (lv_campo) TO <valor>.

    CHECK <valor> IS NOT INITIAL.

    CASE e_column_id.
      WHEN 'VBELN'.

        SET PARAMETER ID 'AUN' FIELD <valor>.
        CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.

      WHEN 'KUNNR1'  OR 'PARVW2'  OR 'PARVW4'  OR 'PARVW6'  OR 'PARVW6'  OR 'PARVW7'  OR  'PARVW8' OR 'PARVW9' OR
           'PARVW10' OR 'PARVW11' OR 'PARVW13' OR 'PARVW14' OR 'PARVW15' OR 'PARVW16'.

        SET PARAMETER ID 'KUN' FIELD <valor>.
        CALL TRANSACTION 'XD03' AND SKIP FIRST SCREEN.

      WHEN 'PARVW5' OR 'PARVW3' OR 'PARVW12'.

        SET PARAMETER ID 'LIF' FIELD <valor>.
        CALL TRANSACTION 'XK03' AND SKIP FIRST SCREEN.

      WHEN 'NUMREM'.
        SET PARAMETER ID 'VL' FIELD <valor>.
        CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN.

      WHEN 'NUMFAT' OR 'FATPROFORD' OR 'FATPROFREM' OR 'ESTFAT'.
        SET PARAMETER ID 'VF' FIELD <valor>.
        CALL TRANSACTION 'VF03' AND SKIP FIRST SCREEN.

      WHEN 'NFENUM'.
        READ TABLE t_bnfdoc INTO ls_doc WITH KEY nfenum = <valor>.
        IF sy-subrc EQ 0.
          SET PARAMETER ID 'JEF' FIELD ls_doc-docnum.
          CALL TRANSACTION 'J1B3N' AND SKIP FIRST SCREEN.
        ENDIF.

      WHEN 'PEDCOMP'.

        SELECT SINGLE banfn FROM eban INTO lv_banfn
          WHERE banfn = <valor>.
        IF sy-subrc = 0.
          SET PARAMETER ID 'BAN' FIELD <valor>.
          CALL TRANSACTION 'ME53N' AND SKIP FIRST SCREEN.
        ENDIF.

        SELECT SINGLE ebeln FROM ekko INTO lv_banfn
          WHERE ebeln = <valor>.
        IF sy-subrc = 0.
          SET PARAMETER ID 'BES' FIELD <valor>.
          CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
        ENDIF.


    ENDCASE.

  ENDMETHOD.                    "hotspot

ENDCLASS.                    "gcl_event_handler IMPLEMENTATION

DATA:
  go_grid     TYPE REF TO cl_gui_alv_grid,          "ALV List Viewer
  go_handler  TYPE REF TO gcl_event_handler.        "ALV Context Menu

DATA: gv_hour TYPE j_1bcretim VALUE '003000'.

DATA: gt_vbkd TYPE TABLE OF vbkd.

DATA: go_geral_fatur TYPE REF TO zcl_sd_geral.

SELECTION-SCREEN FUNCTION KEY 1.
*SELECTION-SCREEN FUNCTION KEY 2.

SELECTION-SCREEN BEGIN OF BLOCK b5 WITH FRAME TITLE text-p02.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETER r_auto RADIOBUTTON GROUP rb2 USER-COMMAND radio2.
SELECTION-SCREEN COMMENT  3(21) text-p01.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
*    SELECTION-SCREEN COMMENT 1(1) text-t01.
PARAMETER r_log AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN COMMENT  3(21) text-p06.

SELECTION-SCREEN COMMENT 27(5) text-p04.
PARAMETER p_credat TYPE ztsd_geral2-credat.
SELECTION-SCREEN COMMENT 72(5) text-p05.
PARAMETER p_cretim TYPE ztsd_geral2-cretim.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETER r_fatur AS CHECKBOX DEFAULT ''.
SELECTION-SCREEN COMMENT  3(21) text-p07.

SELECTION-SCREEN COMMENT 27(5) text-p04.
PARAMETER p_fatini TYPE ztsd_geral2-credat.
SELECTION-SCREEN COMMENT 52(5) text-p09.
PARAMETER p_fatfim TYPE ztsd_geral2-credat.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETER r_aloc AS CHECKBOX DEFAULT ''.
SELECTION-SCREEN COMMENT  3(21) text-p08.

SELECTION-SCREEN COMMENT 27(5) text-p04.
PARAMETER p_aloini TYPE ztsd_geral2-credat.
SELECTION-SCREEN COMMENT 52(5) text-p09.
PARAMETER p_alofim TYPE ztsd_geral2-credat.
SELECTION-SCREEN COMMENT 72(5) text-p05.
PARAMETER p_alotim TYPE ztsd_geral2-cretim.
SELECTION-SCREEN END OF LINE.

SELECT-OPTIONS: s_auart FOR vbak-auart.
PARAMETER p_ovold AS CHECKBOX DEFAULT ''.
PARAMETER p_cancel AS CHECKBOX DEFAULT ''.

SELECTION-SCREEN: SKIP.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETER r_manual RADIOBUTTON GROUP rb2 DEFAULT 'X'.
SELECTION-SCREEN COMMENT  3(21) text-p03.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK b5.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-000.

SELECT-OPTIONS: so_erdat FOR gv_erdat NO-DISPLAY,
                so_vkorg FOR gv_vkorg NO-DISPLAY,
                so_werks FOR gv_werks NO-DISPLAY,
                so_vbeln FOR gv_vbeln,
                so_posnr FOR gv_posnr NO-DISPLAY,
                so_matnr FOR gv_matnr NO-DISPLAY,
                so_vtweg FOR gv_vtweg NO-DISPLAY,
                so_kunnr FOR gv_kunnr NO-DISPLAY,
                so_auart FOR gv_auart NO-DISPLAY,
                so_augru FOR gv_augru NO-DISPLAY,
                so_kdgrp FOR gv_kdgrp NO-DISPLAY,
                so_matkl FOR gv_matkl NO-DISPLAY,
                so_asean FOR gv_asean NO-DISPLAY,
                so_colle FOR gv_colle NO-DISPLAY,
                so_theme FOR gv_theme NO-DISPLAY,
                so_vkbur FOR gv_vkbur NO-DISPLAY,
                so_vkgrp FOR gv_vkgrp NO-DISPLAY,
                so_abgru FOR gv_abgru NO-DISPLAY,
                so_fkdat FOR gv_fkdat NO-DISPLAY,
                so_ernam FOR gv_ernam NO-DISPLAY,
                so_mtorg FOR mbew-mtorg NO-DISPLAY,
                so_stat  FOR gv_status NO-DISPLAY,
                so_parvw FOR gv_kunnr NO-DISPLAY,
                so_zterm FOR gv_zterm NO-DISPLAY. " Gazzi - 02.12
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME .
PARAMETER:  rb_venda RADIOBUTTON GROUP rb1 USER-COMMAND radio DEFAULT 'X',
            rb_dev   RADIOBUTTON GROUP rb1.
SELECTION-SCREEN END OF BLOCK b3.

SELECTION-SCREEN BEGIN OF BLOCK b4 WITH FRAME.
PARAMETER:  ch_zdsc  AS CHECKBOX DEFAULT ' ' ,
            ch_zicp  AS CHECKBOX DEFAULT ' '.
SELECTION-SCREEN END OF BLOCK b4.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE text-002.
PARAMETERS: p_layout TYPE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b2.

">>> Eduardo (SB) - 06.09.2023 - Tabela Auxiliar
SELECTION-SCREEN BEGIN OF BLOCK b6 WITH FRAME.
PARAMETER:  ch_grtb   AS CHECKBOX DEFAULT ' ',
            p_rujb    DEFAULT ' ' TYPE c1 NO-DISPLAY.
SELECTION-SCREEN END OF BLOCK b6.
"<<< Eduardo (SB) - 06.09.2023 - Tabela Auxiliar

PARAMETERS: p_alv(1) DEFAULT 'X' TYPE c NO-DISPLAY. "SB Adilson - 24/03/2022

INITIALIZATION.

  CLEAR gv_auto.
  SELECT SINGLE id
    FROM icon
    INTO sscrfields-functxt_01
    WHERE name = 'ICON_DELETE'.

  sscrfields-functxt_01 = sscrfields-functxt_01 && ' Excluir Todos Logs'.

  SELECT SINGLE id
    FROM icon
    INTO sscrfields-functxt_02
    WHERE name = 'ICON_CHANGE_ORDER'.

  sscrfields-functxt_02 = sscrfields-functxt_02 && ' Ordens Automaticas'.

  SELECT SINGLE credat cretim
        FROM ztsd_last_exe
        INTO (p_credat, p_cretim)
        WHERE exetp = '01'.

  SELECT SINGLE credat cretim
    FROM ztsd_last_exe
    INTO (p_aloini, p_alotim)
    WHERE exetp = '03'.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_layout.
  PERFORM f_alv_f4 USING p_layout.

AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.



    CASE abap_true.
        CHECK screen-name NE 'R_AUTO' AND screen-name NE 'R_MANUAL'.
      WHEN r_auto.
        IF screen-name = 'P_CREDAT' OR screen-name = 'P_CRETIM' OR screen-name = 'R_LOG' OR
           screen-name = 'P_FATINI' OR screen-name = 'P_FATFIM' OR screen-name = 'R_FATUR' OR
           screen-name = 'P_ALOINI' OR screen-name = 'P_ALOFIM' OR screen-name = 'R_ALOC' OR
           screen-name = 'P_ALOTIM' OR screen-name = 'P_OVOLD'  OR screen-name = 'P_CANCEL' OR "Sbyte Adilson - 13.03.2023
           screen-name(7) = 'S_AUART' OR screen-name = '%_S_AUART_%_APP_%-VALU_PUSH'
           OR screen-name = 'P_QTDLOT' OR screen-name = 'CH_GRTB'.

          screen-input = '1'.


        ELSE.
          screen-input = '0'.
        ENDIF.
      WHEN r_manual.
        IF screen-name = 'P_CREDAT' OR screen-name = 'P_CRETIM' OR screen-name = 'R_LOG' OR
           screen-name = 'P_FATINI' OR screen-name = 'P_FATFIM' OR screen-name = 'R_FATUR' OR
           screen-name = 'P_ALOINI' OR screen-name = 'P_ALOFIM' OR screen-name = 'R_ALOC' OR
           screen-name = 'P_ALOTIM' OR screen-name = 'P_OVOLD'  OR screen-name = 'P_CANCEL' OR "Sbyte Adilson - 13.03.2023
           screen-name(7) = 'S_AUART' OR screen-name = '%_S_AUART_%_APP_%-VALU_PUSH'.
          screen-input = '0'.
        ELSE.
          screen-input = '1'.
        ENDIF.
    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.

AT SELECTION-SCREEN.

  CASE sscrfields-ucomm.
    WHEN 'FC01'.
      CALL FUNCTION 'AUTHORITY_CHECK'
        EXPORTING
          user                = sy-uname
          object              = 'Z128'
        EXCEPTIONS
          user_dont_exist     = 1
          user_is_authorized  = 2
          user_not_authorized = 3
          user_is_locked      = 4
          OTHERS              = 5.
      IF sy-subrc <> 0. "AND sy-uname NE 'RAOLIVEIRA'.
        DATA: msg(300).
        msg = |O usuário | && sy-uname && | não possui autorização|.
        MESSAGE msg TYPE 'S' DISPLAY LIKE 'E'.
      ELSE.
        DATA: lv_answ(1),
              lt_geral2 TYPE TABLE OF ztsd_geral2,
              lv_lines  TYPE i,
              lv_question(300).

        SELECT COUNT( * ) INTO lv_lines
          FROM ztsd_geral2.

        IF lv_lines NE 0.

          lv_question = |Deseja excluir todos os | && lv_lines && | registros de log?|.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              text_question  = lv_question
              text_button_1  = 'Sim'
              text_button_2  = 'Não'
            IMPORTING
              answer         = lv_answ
            EXCEPTIONS
              text_not_found = 1
              OTHERS         = 2.
          IF lv_answ = '1'.
            DELETE FROM ztsd_geral2.
            COMMIT WORK.
            IF sy-subrc = 0.
              MESSAGE 'Todas as entradas foram excluídas com sucesso!' TYPE 'S'.
            ENDIF.
          ENDIF.
        ELSE.
          MESSAGE 'Não há registros de log' TYPE 'S' DISPLAY LIKE 'W'.
        ENDIF.
      ENDIF.

    WHEN 'FC02'.
      gv_auto = abap_true.

      FREE gt_ordens.

      SELECT SINGLE MAX( credat ) "MAX( cretim )
        FROM ztsd_geral2
        INTO ztsd_geral2-credat.

      SELECT SINGLE MAX( cretim )
        FROM ztsd_geral2
        INTO ztsd_geral2-cretim
        WHERE credat = ztsd_geral2-credat.
      IF sy-subrc = 0.

        IF sy-batch IS INITIAL.
          CALL SCREEN 0050 STARTING AT 10 5.

          IF sy-ucomm = 'CANC'.
            MESSAGE 'Ação Cancelada' TYPE 'S' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
        ENDIF.

        PERFORM zf_busca_ordens
        TABLES gt_ordens
        USING ztsd_geral2-credat ztsd_geral2-cretim.

        IF gt_ordens IS NOT INITIAL.
          PERFORM clear_tab_estru.

          PERFORM seleciona_dados.

          PERFORM procesa_dados.
          IF t_alvout IS INITIAL.
            MESSAGE text-001 TYPE 'S' DISPLAY LIKE 'E'.
            PERFORM zf_registra_execucao.
          ELSE.
            PERFORM exibe_dados USING p_layout.
          ENDIF.
        ELSE.
          MESSAGE text-001 TYPE 'S' DISPLAY LIKE 'E'.
          PERFORM zf_registra_execucao.
        ENDIF.
      ENDIF.
  ENDCASE.



INITIALIZATION.
  SELECT SINGLE *
    FROM ztsd_last_exe INTO gs_last_exe
    WHERE exetp = '03'.
  IF sy-subrc = 0.
    p_aloini = gs_last_exe-credat.
    p_alotim = gs_last_exe-cretim.
  ENDIF.

START-OF-SELECTION.
  perform zf_start.

END-OF-SELECTION.
  perform zf_fim.

FORM zf_start.
  DATA: ls_last_exe TYPE ztsd_last_exe,
        lv_msg(300),
        lv_lcretim TYPE ztsd_geral2-cretim.

  lv_msg = |Atualizando tabela: Eliminando ordens excluídas|.
  PERFORM zf_progress_ind USING lv_msg 100 100.

  lv_msg = |Tabela Atualizada!|.
  PERFORM zf_progress_ind USING lv_msg 100 100.

  IF r_auto IS NOT INITIAL.

    IF r_log IS NOT INITIAL.
      IF p_credat IS INITIAL.
        SELECT SINGLE credat cretim
          FROM ztsd_last_exe
          INTO (p_credat, p_cretim)
          WHERE exetp = '01'.

        lv_msg = |Execução ultimo LOG   | &&
                  p_credat+6(2) && |/| && p_credat+4(2) && |/| && p_credat(4) &&
                  | as | &&
                  p_cretim(2) && |:| && p_cretim+2(2) && |:| && p_cretim+4(2).
        PERFORM zf_progress_ind USING lv_msg 100 100.

        ">>>Alterado por Eduardo (SB) - Na troca do dia, ele esta pegando todas ovs alteradas no dia anterior - 24.12.2020
        lv_lcretim = p_cretim.
        p_cretim = p_cretim - gv_hour.
        IF p_cretim(2) EQ '23' AND lv_lcretim(2) NE '23'.
          SUBTRACT 1 FROM p_credat.
        ENDIF.

      ELSE.
        lv_msg = |Execução LOG a partir da seleção | &&
                  p_credat+6(2) && |/| && p_credat+4(2) && |/| && p_credat(4) &&
                  | as | &&
                  p_cretim(2) && |:| && p_cretim+2(2) && |:| && p_cretim+4(2).

        PERFORM zf_progress_ind USING lv_msg 100 100.
      ENDIF.

      gv_credat = sy-datum.
      gv_cretim = sy-uzeit.

      PERFORM zf_busca_ordens
       TABLES gt_ordens
        USING p_credat p_cretim .

      lv_msg = |Execução por Ordens Modificadas a partir de | &&
                p_credat+6(2) && |/| && p_credat+4(2) && |/| && p_credat(4) &&
                | as | &&
                p_cretim(2) && |:| && p_cretim+2(2) && |:| && p_cretim+4(2).
      PERFORM zf_progress_ind USING lv_msg 100 100.
    ENDIF.

    "*-----------------------------------------
    "* Faturamento
    "*-----------------------------------------
    IF r_fatur IS NOT INITIAL.
      IF ( p_fatfim IS INITIAL     AND p_fatini <= sy-datum ) OR
         ( p_fatfim IS NOT INITIAL AND p_fatini <= p_fatfim ).

        IF p_fatini IS INITIAL.
          p_fatini = sy-datum - 1.
        ENDIF.

        IF p_fatfim IS INITIAL.
          p_fatfim = sy-datum.
        ENDIF.
      ENDIF.

      gv_credat = sy-datum.
      gv_cretim = sy-uzeit.

      PERFORM zf_busca_fatur_ordens
       TABLES gt_ordens
        USING p_fatini p_fatfim.

      lv_msg = |Execução por Faturamento a partir de | &&
                p_fatini+6(2) && |/| && p_fatini+4(2) && |/| && p_fatini(4) &&
                | até | &&
                p_fatfim+6(2) && |/| && p_fatfim+4(2) && |/| && p_fatfim(4).

      PERFORM zf_progress_ind USING lv_msg 100 100.

      PERFORM zf_atualiza_ocorencias.
    ENDIF.

    "*-----------------------------------------
    "* ARun
    "*-----------------------------------------
    IF r_aloc IS NOT INITIAL.
      IF ( p_alofim IS INITIAL     AND p_aloini <= sy-datum ) OR
         ( p_alofim IS NOT INITIAL AND p_aloini <= p_alofim ).

        IF p_aloini IS INITIAL AND p_alofim IS INITIAL.
          p_aloini  = gs_last_exe-credat. "- 1.
          p_alotim  = gs_last_exe-cretim.

          lv_msg = |Execução ultimo ARun   | &&
                    p_aloini+6(2) && |/| && p_aloini+4(2) && |/| && p_aloini(4) &&
                    | as | &&
                    p_alotim(2) && |:| && p_alotim+2(2) && |:| && p_alotim+4(2).
          PERFORM zf_progress_ind USING lv_msg 100 100.

          p_alotim  = p_alotim - gv_hour03.

          IF p_alotim(2) = '23'.
            SUBTRACT 1 FROM p_aloini.
          ENDIF.

        ENDIF.
        IF p_alofim IS INITIAL.
          p_alofim = sy-datum.
        ENDIF.
      ELSE.
        lv_msg = |Execução ARun a partir da seleção | &&
                  p_aloini+6(2) && |/| && p_aloini+4(2) && |/| && p_aloini(4) &&
                  | as | &&
                  p_alotim(2) && |:| && p_alotim+2(2) && |:| && p_alotim+4(2).
        PERFORM zf_progress_ind USING lv_msg 100 100.
      ENDIF.

      gv_credat = sy-datum.
      gv_cretim = sy-uzeit.

      PERFORM zf_busca_alocation_ordens
       TABLES gt_ordens
        USING p_aloini p_alofim p_alotim.

      lv_msg = |Execução por Allocation a partir de | &&
                p_aloini+6(2) && |/| && p_aloini+4(2) && |/| && p_aloini(4) &&
                | as | &&
                p_alotim(2) && |:| && p_alotim+2(2) && |:| && p_alotim+4(2).

      PERFORM zf_progress_ind USING lv_msg 100 100.
    ENDIF.

    SORT gt_ordens BY vbeln.
    DELETE ADJACENT DUPLICATES FROM gt_ordens COMPARING ALL FIELDS.

    ">>> SBYTE(Diego) - 02.12.2021 - Ajuste para não carregar OVs antiga - Solicitação Marcelo Manoel
    "Havia problema de excesso de consumo de recursos, a suspeita era que seria em função das OVs antigas
    IF gt_ordens IS NOT INITIAL AND p_ovold IS NOT INITIAL.
      "IF gt_ordens IS NOT INITIAL.
      "<<< SBYTE(Diego) - 02.12.2021
      PERFORM zf_ordens_nf.
    ENDIF.
  ELSE.
    PERFORM zf_progress_ind USING text-i10 100 100.
  ENDIF.

  ">>> Diego(SB) - 18.10.2023 - Tabela Auxiliar
  "Efetua a gravação da OV na tabela ZTSD_EXEC128
  IF p_rujb EQ 'X'.
    PERFORM zf_grava_execucao.
  ENDIF.

  ">>> Eduardo (SB) - 08.09.2023 - Tabela Auxiliar
  IF ch_grtb IS NOT INITIAL.

    IF sy-batch = 'X'.
      PERFORM zf_grava_tabela_aux. ">>> Eduardo (SB) - 08.09.2023 - Tabela Auxiliar
      PERFORM zf_registra_execucao.
      PERFORM zf_grava_ultima_execucao.
      EXIT.
    ELSE.
      MESSAGE 'Gravar tabela auxiliar apenas via job.' TYPE 'I'.
    ENDIF.

  ENDIF.
  "<<< Eduardo (SB) - 08.09.2023 - Tabela Auxiliar

  PERFORM zf_find_params.

  PERFORM clear_tab_estru.

  PERFORM seleciona_dados.

  PERFORM procesa_dados.

ENDFORM.


FORM zf_fim.
  IF t_alvout IS INITIAL.
*    MESSAGE w398(00) WITH text-001 space space space.
    MESSAGE text-001 TYPE 'S' DISPLAY LIKE 'E'.

    IF flg_vbuk    EQ abap_true
      AND flg_vbep    EQ abap_true
      AND flg_kna1    EQ abap_true
      AND flg_vbkd    EQ abap_true
      AND flg_marc    EQ abap_true
      AND flg_doc     EQ abap_true
      AND flg_eket    EQ abap_true
      AND flg_mska    EQ abap_true
      AND flg_konv    EQ abap_true
      AND flg_vbep    EQ abap_true
      AND flg_vbpa    EQ abap_true
      AND flg_kond    EQ abap_true
      AND flg_lips    EQ abap_true.

    ENDIF.

    PERFORM zf_registra_execucao.
    PERFORM zf_grava_ultima_execucao.
  ELSE.
    PERFORM zf_registra_execucao.
****">>>> SBYTE - Diego - Correção na gravação do horario ultima execução.
    "Movido de lugar
    "existe um metodo de alv_grid_display que faz o program terminar nessa subrotina.
    PERFORM exibe_dados USING p_layout.
****"<<<< SBYTE - Diego - Correção na gravação do horario ultima execução.
  ENDIF.
ENDFORM.



FORM clear_tab_estru.

  CLEAR:
     t_inicial,
     t_kna1,
     t_vbkd,
     t_vbpa,
     t_knvp,
     t_vbuk,
     t_vbep,
     t_mvke,
     t_mean,
     t_marc,
     t_mara,
     t_knvv,
     t_lips,
     t_likp,
     t_vbrp,
     t_vbrk,
     t_bnflin,
     t_bnfdoc,
     t_j3adbba,
     t_ekbe,
     t_rbkp,
     t_eket,
     t_konv,
     t_j3abdbs,
     t_alvout,
     flg_proforma,
     flg_vbuk,
     flg_vbep,
     flg_kna1,
     flg_vbpa,
     flg_kond,
     flg_vbkd,
     flg_marc,
     flg_lips,
     flg_doc,
     flg_eket,
     flg_j3abdbs,
     flg_mska,
     flg_konv,
     flg_disp.

  REFRESH:
     t_inicial,
     t_kna1,
     t_vbkd,
     t_vbpa,
     t_knvp,
     t_vbuk,
     t_vbep,
     t_mvke,
     t_mean,
     t_marc,
     t_lips,
     t_likp,
     t_vbrp,
     t_vbrk,
     t_bnflin,
     t_bnfdoc,
     t_j3adbba,
     t_ekbe,
     t_rbkp,
     t_eket,
     t_konv,
     t_j3abdbs,
     t_alvout.

ENDFORM.                    " CLEAR_TAB_ESTRU
FORM seleciona_dados.
  IF r_manual IS NOT INITIAL AND so_vbeln IS INITIAL.
    EXIT.
  ENDIF.

  PERFORM zf_progress_ind USING text-i01 10 100.
* Preenche ranges.
  PERFORM preenche_range.

* Documento de vendas: dados de cabeçalho/Item
  PERFORM seleciona_dados_inicial CHANGING t_inicial.

* ">>>>SBYTE Diego 08.05.2023 - Gravação Log
* Grava Log ZTSD_GERAL2_LOG
  PERFORM zf_progress_ind USING text-i11 10 100.
  PERFORM zf_grava_log IN PROGRAM (sy-repid) IF FOUND. "Sinosbyte Diego - 13.03.2023.
* "<<<<SBYTE Diego 08.05.2023 - Gravação Log

* AFS atribuição de necessidades/estoques
  PERFORM seleciona_dados_j3abdbs CHANGING t_j3abdbs.

  PERFORM zf_seleciona_dados_dispo_displ CHANGING t_3adbbad.

* Dados Proforma
  PERFORM seleciona_dados_proforma CHANGING t_proforma.

* Mestre de clientes (parte geral)
  PERFORM seleciona_dados_kna1 CHANGING t_kna1.

* Documento de vendas: dados comerciais
  PERFORM seleciona_dados_vbkd CHANGING t_vbkd.

* Documento SD: parceiro ou função do parceiro
  PERFORM seleciona_dados_vbpa_knvp CHANGING t_vbpa
                                             t_knvp.

* Dados de venda para material
  PERFORM seleciona_dados_mvke CHANGING t_mvke.

* Documento SD: status de cabeçalho e dados adm.
  PERFORM seleciona_dados_vbuk CHANGING t_vbuk.

* Documento SD: status de item e dados adm.
  PERFORM seleciona_dados_vbup CHANGING t_vbup.

* Documento de venda: dados de divisão do programa de remessas
  PERFORM seleciona_dados_vbep CHANGING t_vbep.

* Dados de centro para material
  PERFORM seleciona_dados_marc CHANGING t_marc.

*  documento sd: fornecimento: dados de item
  PERFORM seleciona_dados_lips CHANGING t_lips.

*  documento sd: fornecimento: dados de cabeçalho
  PERFORM seleciona_dados_likp CHANGING t_likp.

*  documento de faturamento: dados de item
  PERFORM seleciona_dados_vbrp CHANGING t_vbrp.

*  itens da nota fiscal
  PERFORM seleciona_dados_bnflin CHANGING t_bnflin.

*  cabeçalho da nota fiscal
  PERFORM seleciona_dados_bnfdoc CHANGING t_bnfdoc.

*  divisões do programa de remessas
  PERFORM seleciona_dados_eket CHANGING t_eket.

* Divisões do programa de remessas
  PERFORM seleciona_dados_konv CHANGING t_konv.

* Estoque por ordem do cliente
  PERFORM seleciona_dados_mska CHANGING t_mska.

* Origem do Material
  PERFORM seleciona_origem_material.

  PERFORM seleciona_textos.

  PERFORM seleciona_cross_stat CHANGING t_cross_stat t_vbuk_stat.

* Mestre de clientes recebedor
  PERFORM seleciona_dados_kna1_receb CHANGING t_kna1_receb. " Adilson Sbyte - 2022034 - 05/07/2022


  PERFORM zf_progress_ind USING text-i02 90 100.

  ">>>Alterado por Eduardo (SB) - Quando não encontra nenhuma ov, esta demorando muito para finalizar - 24.12.2020
  IF t_inicial[] IS NOT INITIAL.
    SELECT *
      FROM vbkd
      INTO TABLE gt_vbkd
       FOR ALL ENTRIES IN t_inicial
     WHERE vbeln = t_inicial-vbeln.
    IF sy-subrc IS INITIAL.
      SORT gt_vbkd BY vbeln posnr.
    ENDIF.
  ENDIF.

ENDFORM.                    " SELECIONA_DADOS

FORM procesa_dados.

  FIELD-SYMBOLS:
       <fs_vbap>       TYPE tp_vbap,
       <fs_inicial>    TYPE tp_inicial,
       <fs_kna1>       TYPE tp_kna1,
       <fs_kna1_receb> TYPE tp_kna1, " Adilson Sbyte - 2022034 - 05/07/2022
       <fs_adrc>       LIKE LINE OF t_adrc,
       <fs_adrc_receb> LIKE LINE OF t_adrc,
       <fs_vbkd>       TYPE tp_vbkd,
       <fs_vbkdaux>    TYPE vbkd,
       <fs_vbpa>       TYPE tp_vbpa,
       <fs_knvp>       TYPE tp_knvp,
       <fs_vbuk>       TYPE tp_vbuk,
       <fs_vbup>       TYPE tp_vbup,
       <fs_vbep>       TYPE tp_vbep,
       <fs_mvke>       TYPE tp_mvke,
       <fs_mean>       TYPE tp_mean,
       <fs_marc>       TYPE tp_marc,
       <fs_tvlst>      TYPE tvlst,
       <fs_tvfst>      TYPE tvfst,
       <fs_tvagt>      TYPE tvagt,
       <fs_lips>       TYPE tp_lips,
       <fs_likp>       TYPE tp_likp,
       <fs_vbrp>       TYPE tp_vbrp,
       <fs_vbrk>       TYPE tp_vbrk,
       <fs_j3adbba>    TYPE tp_j_3adbba,
       <fs_ekbe>       TYPE tp_ekbe,
       <fs_rbkp>       TYPE tp_rbkp,
       <fs_eket>       TYPE tp_eket,
       <fs_konv>       TYPE tp_konv,
       <fs_j3abdbs>    TYPE tp_j3abdbs,
       <fs_3addtt>     TYPE j_3addtt,
       <fs_3abskz>     TYPE rmdi_domvl,
       <fs_tvkot>      TYPE tvkot,
       <fs_tvaut>      TYPE tvaut,
       <fs_tvtwt>      TYPE tvtwt,
       <fs_tspat>      TYPE tspat,
       <fs_tvkbt>      TYPE tvkbt,
       <fs_tvgrt>      TYPE tvgrt,
       <fs_t151t>      TYPE t151t,
       <fs_t171t>      TYPE t171t,
       <fs_t023t>      TYPE t023t,
       <fs_cmgst>      TYPE rmdi_domvl,
       <fs_statv>      TYPE rmdi_domvl,
       <fs_genero>     TYPE rmdi_domvl,
       <fs_carry>      TYPE rmdi_domvl,
       <fs_3arun1>     TYPE tvbst,
       <fs_mska>       TYPE tp_mska,
       <fs_prof>       TYPE tp_proforma,
       <fs_bnflin>     TYPE tp_bnflin,
       <fs_bnfdoc>     TYPE tp_bnfdoc,
       <fs_sd002>      TYPE ztsd_002,
       <fs_nad>        LIKE LINE OF t_nad,
       <fs_zterm>      TYPE tp_zterm,
       <fs_knvv>       TYPE tp_knvv,
       <fs_mara>       TYPE tp_mara,
       <fs_grp_linha>  TYPE ztsd_grp_linha,
       <fs_size_categ> TYPE ztsd_size_categ,
       <fs_silhueta>   TYPE ztsd_silhueta,
       <tvm5t>         TYPE tvm5t,
       <zmvgr4>        TYPE ztsd_zmvgr4,
       <zmvgr6>        TYPE ztsd_zmvgr6,
       <fs_tprit>      TYPE tprit,
       <fs_tvv2t>      TYPE tvv2t,
       <fs_tvv3t>      TYPE tvv3t,
       <fs_cross_stat> TYPE ty_cross_stat.

  DATA: ls_alvout     TYPE tp_alvout,
        ls_alvout_aux TYPE tp_alvout,
        lv_name       LIKE thead-tdname,
        lv_index      TYPE i.

  DATA: t_lines      TYPE TABLE OF tline,
        w_lines      TYPE tline.

* Gazzi - 02.12
  DATA: lv_bezei        TYPE tvagt-bezei,
        lv_fakspord_txt TYPE tvfst-vtext,
        lv_fakskord_txt TYPE tvfst-vtext,
        lv_lifsk_txt    TYPE tvlst-vtext,
        lv_txjcd        TYPE kna1-txjcd,
        lv_handling(04)       TYPE n,
        lv_dias_logistica(04) TYPE n,
        lv_max_data           TYPE dats,
        lv_days               TYPE i,
        lt_dbba               TYPE j_3adbbad_t,
        ls_dbba               LIKE LINE OF lt_dbba,
        ls_j3                 LIKE LINE OF t_j3abdbs,
        ls_j3abdbs            TYPE tp_j3abdbs,
        ls_vbep_aux           TYPE tp_vbep.

  DATA: lt_dd07v      TYPE TABLE OF dd07v WITH HEADER LINE,
        lt_inicial    TYPE type_t_inicial,
        lv_msg(300).

  DATA: lt_vbep     TYPE type_t_vbep.

  FIELD-SYMBOLS: <fs_3aseant>  LIKE LINE OF t_3aseant,
                 <dprg_kond2>  LIKE LINE OF t_dprg_kond2,
                 <dprg_kond>   LIKE LINE OF t_dprg_kond,
                 <lead_time>   LIKE LINE OF t_lead_time,
                 <config>      LIKE LINE OF t_config,
                 <fs_mbew>     LIKE LINE OF t_mbew,
                 <fs_vbep_aux> LIKE LINE OF lt_vbep.

  WAIT UNTIL: flg_vbuk EQ abap_true,
              flg_vbep EQ abap_true,
              flg_kna1 EQ abap_true,
              flg_vbkd EQ abap_true,
              flg_marc EQ abap_true,
              flg_doc  EQ abap_true,
              flg_eket EQ abap_true,
              flg_mska EQ abap_true,
              flg_konv EQ abap_true,
              flg_disp EQ abap_true.

  gt_konv_aux  = t_konv.
  gt_konv2_aux = t_konv2.
  gt_vbrp_aux  = t_vbrp.

  SORT t_vbep BY vbeln posnr etenr.
  SORT t_likp BY vbeln.

  SORT t_konv2 BY knumv kposn kschl.

  SORT: t_mbew        BY matnr bwkey,
        t_vbap        BY vbeln posnr,
        t_dprg_kond   BY j_3asean /afs/collection /afs/theme,
        t_dprg_kond2  BY j_3asean /afs/collection /afs/theme,
        t_konv        BY knumv kposn kschl kmprs,
        gt_konv_aux   BY knumv kposn j_3aetenr kschl,
        gt_konv2_aux  BY knumv kposn kschl,
        gt_vbrp_aux   BY vgbel vgpos shkzg. "Sinosbyte - JB - 12.04.2024 - Ajuste ZRSD_128.

  lt_vbep = t_vbep.

  CALL FUNCTION 'DD_DOMVALUES_GET'
    EXPORTING
      domname        = 'ZDM_STATUS3'   "<-- Your Domain Here
      text           = 'X'
      langu          = sy-langu
    TABLES
      dd07v_tab      = lt_dd07v
    EXCEPTIONS
      wrong_textflag = 1
      OTHERS         = 2.

  IF so_stat IS NOT INITIAL.
    DELETE lt_dd07v WHERE domvalue_l NOT IN so_stat.
  ENDIF.

  lt_inicial = t_inicial.
  SORT lt_inicial BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING vbeln.

  IF r_auto EQ abap_true AND sy-batch IS NOT INITIAL.
    PERFORM zf_progress_ind USING 'Ordens Selecionadas:' 10 100.
    LOOP AT lt_inicial ASSIGNING <fs_inicial>.
      MESSAGE <fs_inicial>-vbeln TYPE 'S'.
    ENDLOOP.
    COMMIT WORK.
  ENDIF.

  PERFORM zf_progress_ind USING text-i03 10 100.

  SORT t_lips BY vgbel vgpos j_3aeten vbeln.
  SORT t_vbpa BY vbeln parvw.
  SORT t_kna1_receb BY kunnr.

  LOOP AT t_inicial ASSIGNING <fs_inicial>.
    AT NEW vbeln.
      lv_msg = <fs_inicial>-vbeln.
    ENDAT.


    CLEAR ls_alvout.

*   Numero da Ordem de venda
    ls_alvout-vbeln = <fs_inicial>-vbeln.

*   Data Ordem
    ls_alvout-audat = <fs_inicial>-audat.

*   Data Criação
    ls_alvout-erdat = <fs_inicial>-erdat. ">>> Eduardo Sbyte - 2023070 - 31/07/2023

*   Tipo da ordem de venda
    ls_alvout-auart = <fs_inicial>-auart.

*   Organização de vendas
    ls_alvout-vkorg = <fs_inicial>-vkorg.

*   Canal de istribuição
    ls_alvout-vtweg = <fs_inicial>-vtweg.

*   Setor de atividade
    ls_alvout-spart = <fs_inicial>-spart.

*   Eescritório de vendas
    ls_alvout-vkbur = <fs_inicial>-vkbur.

*   Equipe de vendas
    ls_alvout-vkgrp = <fs_inicial>-vkgrp.

*   Cliente da origem de venda
    ls_alvout-kunnr1 = <fs_inicial>-kunnr.

*   Doc Condição
    ls_alvout-knumv = <fs_inicial>-knumv.

*   Motivo da ordem
    ls_alvout-augru = <fs_inicial>-augru.

    ls_alvout-werks = <fs_inicial>-werks.

    IF <fs_inicial>-kwmeng NE 0.
      ls_alvout-netwr = <fs_inicial>-netwr / <fs_inicial>-kwmeng.
    ELSEIF <fs_inicial>-zmeng NE 0.
      ls_alvout-netwr = <fs_inicial>-netwr / <fs_inicial>-zmeng.
    ENDIF.

    IF <fs_inicial>-kwmeng NE 0.
      ls_alvout-mwsbp = <fs_inicial>-mwsbp / <fs_inicial>-kwmeng.
    ELSEIF <fs_inicial>-zmeng NE 0.
      ls_alvout-mwsbp = <fs_inicial>-mwsbp / <fs_inicial>-zmeng.
    ENDIF.

*   Nome motivo da ordem
    READ TABLE t_tvaut ASSIGNING <fs_tvaut> WITH KEY augru = <fs_inicial>-augru
                                                                  BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-augru_txt = <fs_tvaut>-bezei.
    ENDIF.

*   Nome organização de vendas
    READ TABLE t_tvkot ASSIGNING <fs_tvkot> WITH KEY vkorg = <fs_inicial>-vkorg
                                                                  BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vkorg_txt = <fs_tvkot>-vtext.
    ENDIF.

*   Nome canal de distribuição
    READ TABLE t_tvtwt ASSIGNING <fs_tvtwt> WITH KEY vtweg = <fs_inicial>-vtweg
                                                                  BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vtweg_txt = <fs_tvtwt>-vtext.
    ENDIF.

*   Nome setor de atividade
    READ TABLE t_tspat ASSIGNING <fs_tspat> WITH KEY spart = <fs_inicial>-spart
                                                                  BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-spart_txt = <fs_tspat>-vtext.
    ENDIF.

*   Nome escritório de venda
    READ TABLE t_tvkbt ASSIGNING <fs_tvkbt> WITH KEY vkbur = <fs_inicial>-vkbur
                                                                  BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vkbur_txt = <fs_tvkbt>-bezei.
    ENDIF.

*   Nome equipe de venda
    READ TABLE t_tvgrt ASSIGNING <fs_tvgrt> WITH KEY vkgrp = <fs_inicial>-vkgrp
                                                                  BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vkgrp_txt = <fs_tvgrt>-bezei.
    ENDIF.

*   Nome Cliente
    CLEAR lv_txjcd.
    READ TABLE t_kna1 ASSIGNING <fs_kna1> WITH KEY kunnr = <fs_inicial>-kunnr
                                                                BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-name1       = <fs_kna1>-name1.
      ls_alvout-city1       = <fs_kna1>-ort01.
      ls_alvout-uf          = <fs_kna1>-regio.
      ls_alvout-zznomeshop  = <fs_kna1>-zznomeshop.
      ls_alvout-stcd1       = <fs_kna1>-stcd1.
      lv_txjcd              = <fs_kna1>-txjcd.

      READ TABLE t_adrc ASSIGNING <fs_adrc> WITH KEY addrnumber = <fs_kna1>-adrnr
                                                                    BINARY SEARCH.
      IF sy-subrc = 0.
        ls_alvout-sort1 = <fs_adrc>-sort1.
      ENDIF.
    ENDIF.

*   Prioridade de Remessa/Segmento Canal/Segmento Nível
    READ TABLE t_knvv ASSIGNING <fs_knvv> WITH KEY kunnr = <fs_inicial>-kunnr
                                                   vkorg = <fs_inicial>-vkorg
                                                   vtweg = <fs_inicial>-vtweg
                                                   spart = <fs_inicial>-spart
                                                   BINARY SEARCH.
    IF sy-subrc IS INITIAL.

      READ TABLE t_tprit ASSIGNING <fs_tprit> WITH KEY lprio = <fs_knvv>-lprio.
      IF sy-subrc IS INITIAL.
        CONCATENATE <fs_knvv>-lprio '-' <fs_tprit>-bezei INTO ls_alvout-lprio SEPARATED BY space.
      ENDIF.

      READ TABLE t_tvv2t ASSIGNING <fs_tvv2t> WITH KEY kvgr2 = <fs_knvv>-kvgr2.
      IF sy-subrc IS INITIAL.
        ls_alvout-kvgr2 = <fs_tvv2t>-bezei.
      ENDIF.

      READ TABLE t_tvv3t ASSIGNING <fs_tvv3t> WITH KEY kvgr3 = <fs_knvv>-kvgr3.
      IF sy-subrc IS INITIAL.
        ls_alvout-kvgr3 = <fs_tvv3t>-bezei.
      ENDIF.

    ENDIF.

*   Categoria de Cliente
    READ TABLE t_vbkd ASSIGNING <fs_vbkd> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   posnr = <fs_inicial>-posnr BINARY SEARCH.

    IF sy-subrc EQ 0.
      ls_alvout-kdgrp   = <fs_vbkd>-kdgrp.
      ls_alvout-zterm   = <fs_vbkd>-zterm.
      ls_alvout-bzirk   = <fs_vbkd>-bzirk.

      ls_alvout-inco1   = <fs_vbkd>-inco1.
      ls_alvout-bstkd_e = <fs_vbkd>-bstkd_e.
      ls_alvout-bstkd   = <fs_vbkd>-bstkd.
      ls_alvout-ihrez   = <fs_vbkd>-ihrez.

      READ TABLE t_zterm ASSIGNING <fs_zterm> WITH KEY zterm = <fs_vbkd>-zterm
                                                                  BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_alvout-zterm_txt = <fs_zterm>-text1.
      ELSE.
        CLEAR ls_alvout-zterm_txt.
      ENDIF.

      IF so_zterm IS NOT INITIAL AND ls_alvout-zterm NOT IN so_zterm.
        CONTINUE.
      ENDIF.

*   Nome Regiao de vendas
      READ TABLE t_t171t ASSIGNING <fs_t171t> WITH KEY bzirk = <fs_vbkd>-bzirk BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_alvout-bzirk_txt = <fs_t171t>-bztxt.
      ENDIF.

*   Nome Categoria de cliente
      READ TABLE t_t151t ASSIGNING <fs_t151t> WITH KEY kdgrp = <fs_vbkd>-kdgrp BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_alvout-kdgrp_txt = <fs_t151t>-ktext.
      ENDIF.
    ELSE.

      READ TABLE t_vbkd ASSIGNING <fs_vbkd> WITH KEY vbeln = <fs_inicial>-vbeln.

      IF sy-subrc EQ 0.
        ls_alvout-kdgrp   = <fs_vbkd>-kdgrp.
        ls_alvout-zterm   = <fs_vbkd>-zterm.
        ls_alvout-bzirk   = <fs_vbkd>-bzirk.

        ls_alvout-inco1   = <fs_vbkd>-inco1.
        ls_alvout-bstkd_e = <fs_vbkd>-bstkd_e.
        ls_alvout-bstkd   = <fs_vbkd>-bstkd.
        ls_alvout-ihrez   = <fs_vbkd>-ihrez.

        READ TABLE t_zterm ASSIGNING <fs_zterm> WITH KEY zterm = <fs_vbkd>-zterm
                                                                 BINARY SEARCH.
        IF sy-subrc EQ 0.
          ls_alvout-zterm_txt = <fs_zterm>-text1.
        ELSE.
          CLEAR ls_alvout-zterm_txt.
        ENDIF.

        IF so_zterm IS NOT INITIAL AND ls_alvout-zterm NOT IN so_zterm.
          CONTINUE.
        ENDIF.

*   Nome Regiao de vendas
        READ TABLE t_t171t ASSIGNING <fs_t171t> WITH KEY bzirk = <fs_vbkd>-bzirk BINARY SEARCH.
        IF sy-subrc EQ 0.
          ls_alvout-bzirk_txt = <fs_t171t>-bztxt.
        ENDIF.

*   Nome Categoria de cliente
        READ TABLE t_t151t ASSIGNING <fs_t151t> WITH KEY kdgrp = <fs_vbkd>-kdgrp BINARY SEARCH.
        IF sy-subrc EQ 0.
          ls_alvout-kdgrp_txt = <fs_t151t>-ktext.
        ENDIF.
      ENDIF.

    ENDIF.


    READ TABLE gt_vbkd ASSIGNING <fs_vbkdaux> WITH KEY vbeln = <fs_inicial>-vbeln
                                                       posnr = <fs_inicial>-posnr
                                                                  BINARY SEARCH.
    IF sy-subrc IS INITIAL.
      ls_alvout-prsdt   = <fs_vbkdaux>-prsdt.
    ELSE.
      IF ls_alvout-prsdt IS INITIAL.
        READ TABLE gt_vbkd ASSIGNING <fs_vbkdaux> WITH KEY vbeln = <fs_inicial>-vbeln
                                                                      BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          ls_alvout-prsdt   = <fs_vbkdaux>-prsdt.
        ENDIF.
      ENDIF.
    ENDIF.

*   Represent./Consultor
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   parvw = c_zc BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-parvw3 = <fs_vbpa>-lifnr.
      PERFORM busca_descricao_parceiro USING    <fs_vbpa>-lifnr
                                       CHANGING ls_alvout-parvw3_txt.
    ENDIF.

*   Anjo
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   parvw = c_zd BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-parvw4 = <fs_vbpa>-lifnr.
      PERFORM busca_descricao_parceiro USING    <fs_vbpa>-lifnr
                                       CHANGING ls_alvout-parvw4_txt.
    ENDIF.

*   Coordenador/Superv.
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   parvw = c_ze BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-parvw5 = <fs_vbpa>-lifnr.
      PERFORM busca_descricao_parceiro USING    <fs_vbpa>-lifnr
                                       CHANGING ls_alvout-parvw5_txt.
    ENDIF.

*   Loja Matriz
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   parvw = c_zf BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-parvw6 = <fs_vbpa>-kunnr.
      IF so_parvw IS NOT INITIAL AND ls_alvout-parvw6 NOT IN so_parvw.
        CONTINUE.
      ENDIF.
    ENDIF.

*   Emissor da ordem
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   parvw = c_ag BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-parvw14 = <fs_vbpa>-kunnr.
    ENDIF.

*   Recebedor da fatura
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   parvw = c_re  BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-parvw15 = <fs_vbpa>-kunnr.
    ENDIF.
*   Recebedor da Mercadoria
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln ">>> Adilson Sbyte - 2022034 - 05/07/2022
                                                   parvw = c_we  BINARY SEARCH.

    IF sy-subrc EQ 0.
      READ TABLE t_kna1_receb ASSIGNING <fs_kna1_receb> WITH KEY kunnr = <fs_vbpa>-kunnr
                                                                BINARY SEARCH.

      IF sy-subrc IS INITIAL.

        ls_alvout-kunnr1_receb      = <fs_kna1_receb>-kunnr.
        ls_alvout-name1_receb       = <fs_kna1_receb>-name1.
        ls_alvout-city1_receb       = <fs_kna1_receb>-ort01.
        ls_alvout-uf_receb          = <fs_kna1_receb>-regio.
        ls_alvout-zznomeshop_receb  = <fs_kna1_receb>-zznomeshop.
        READ TABLE t_adrc_receb ASSIGNING <fs_adrc_receb> WITH KEY addrnumber = <fs_kna1_receb>-adrnr
                                                                    BINARY SEARCH.
        IF sy-subrc = 0.
          ls_alvout-sort1_receb = <fs_adrc_receb>-sort1.
        ENDIF.

      ENDIF.
    ENDIF. "<<< Adilson Sbyte - 2022034 - 05/07/2022

*   Pagador
    READ TABLE t_vbpa ASSIGNING <fs_vbpa> WITH KEY vbeln = <fs_inicial>-vbeln
                                                   parvw = c_rg BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-parvw16 = <fs_vbpa>-kunnr.
    ENDIF.

*   Grupo de Material
    ls_alvout-matkl = <fs_inicial>-matkl.

*   Estação
    ls_alvout-j_3asean = <fs_inicial>-j_3asean.

*   Tema
    ls_alvout-/afs/theme = <fs_inicial>-/afs/theme.

*   Coleção
    ls_alvout-/afs/collection = <fs_inicial>-/afs/collection.

    READ TABLE t_t023t ASSIGNING <fs_t023t> WITH KEY matkl = <fs_inicial>-matkl BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-matkl_txt = <fs_t023t>-wgbez.
    ENDIF.

*   Descrição Grupo de Material / Descrição Grupo de Cor
    READ TABLE t_mvke ASSIGNING <fs_mvke> WITH KEY vkorg = <fs_inicial>-vkorg
                                                   vtweg = <fs_inicial>-vtweg
                                                   matnr = <fs_inicial>-matnr BINARY SEARCH.
    IF sy-subrc EQ 0.
      READ TABLE t_tvm5t ASSIGNING <tvm5t> WITH KEY mvgr5 = <fs_mvke>-mvgr5.
      IF sy-subrc IS INITIAL.
        ls_alvout-mvgr5_descr = <tvm5t>-bezei.
      ENDIF.

      READ TABLE t_zmvgr4 ASSIGNING <zmvgr4> WITH KEY familia = <fs_mvke>-zmvgr4.
      IF sy-subrc IS INITIAL.
        ls_alvout-zmvgr4_desc = <zmvgr4>-descr.
      ENDIF.

      READ TABLE t_zmvgr6 ASSIGNING <zmvgr6> WITH KEY modelo = <fs_mvke>-zmvgr6.
      IF sy-subrc IS INITIAL.
        ls_alvout-zmvgr6_desc = <zmvgr6>-descr.
      ENDIF.
    ENDIF.

*   Status global/recusa/remessa/crédito
    READ TABLE t_vbuk ASSIGNING <fs_vbuk> WITH KEY vbeln = <fs_inicial>-vbeln
                                                                BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-cmgst       = <fs_vbuk>-cmgst.

      READ TABLE t_cmgst ASSIGNING <fs_cmgst> WITH KEY domvalue_l = <fs_vbuk>-cmgst BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_alvout-cmgst_txt = <fs_cmgst>-ddtext.
      ENDIF.

    ENDIF.

*   Item de ordemd e venda
    ls_alvout-posnr = <fs_inicial>-posnr.

*   Material de ordem de venda
    ls_alvout-matnr = <fs_inicial>-matnr.

*   Desc.do Item da Ordem de venda
    ls_alvout-arktx = <fs_inicial>-arktx.

*   Centro de lucro
    ls_alvout-prctr = <fs_inicial>-prctr.

*   Armazém
    ls_alvout-lgort = <fs_inicial>-lgort.

*   Itinerário
*    ls_alvout-route = <fs_inicial>-route.

*   Doc referência
    ls_alvout-vgbel = <fs_inicial>-vgbel.

*   Doc Origem
    ls_alvout-xblnr = <fs_inicial>-xblnr.

*   Itm do Doc referência
    ls_alvout-vgpos = <fs_inicial>-vgpos.

*   Data desejada de remessa
    ls_alvout-j_3arqda = <fs_inicial>-j_3arqda.

    lv_name = <fs_inicial>-vbeln.

*   Obs Pedido
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        client                  = sy-mandt
        id                      = c_0001
        language                = sy-langu
        name                    = lv_name
        object                  = c_vbbk
      TABLES
        lines                   = t_lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.

    IF sy-subrc EQ 0.
      READ TABLE t_lines INTO w_lines WITH KEY tdformat = c_ast.
      ls_alvout-obs_pedido = w_lines-tdline.
    ENDIF.

    CLEAR lv_name.
    CONCATENATE <fs_inicial>-matnr <fs_inicial>-vkorg <fs_inicial>-vtweg
           INTO lv_name SEPARATED BY space.

*   Dados extra Material
    READ TABLE t_mara ASSIGNING <fs_mara> WITH KEY matnr = <fs_inicial>-matnr
                                                                BINARY SEARCH.
    IF sy-subrc IS INITIAL.

      ls_alvout-matnr_vans = <fs_mara>-bismt.

      READ TABLE t_silhueta ASSIGNING <fs_silhueta> WITH KEY silhueta = <fs_mara>-zzsilhueta.
      IF sy-subrc IS INITIAL.
        ls_alvout-zzsilhueta = <fs_silhueta>-descricao.
      ENDIF.

      READ TABLE t_size_categ ASSIGNING <fs_size_categ> WITH KEY size_category = <fs_mara>-zzsize_category.
      IF sy-subrc IS INITIAL.
        ls_alvout-zzsize_category = <fs_size_categ>-descricao.
      ENDIF.

      READ TABLE t_grp_linha ASSIGNING <fs_grp_linha> WITH KEY sub_grupo = <fs_mara>-zzsub_grupo
                                                               sub_linha = <fs_mara>-zzsub_linha.
      IF sy-subrc IS INITIAL.
        ls_alvout-zzsub_grupo = <fs_grp_linha>-sub_grupo_desc.
        ls_alvout-zzsub_linha = <fs_grp_linha>-sub_linha_desc.
      ENDIF.

      READ TABLE t_genero ASSIGNING <fs_genero> WITH KEY domvalue_l = <fs_mara>-zzgenero.
      IF sy-subrc IS INITIAL.
        ls_alvout-zzgenero = <fs_genero>-ddtext.
      ENDIF.

      READ TABLE t_carry ASSIGNING <fs_carry> WITH KEY domvalue_l = <fs_mara>-zzcarry_over.
      IF sy-subrc IS INITIAL.
        ls_alvout-zzcarry_over = <fs_carry>-ddtext.
      ENDIF.

    ENDIF.

*   NCM do Material
    READ TABLE t_marc ASSIGNING <fs_marc> WITH KEY matnr = <fs_inicial>-matnr
                                                   werks = <fs_inicial>-werks
                                                                BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-steuc = <fs_marc>-steuc.
    ENDIF.

*   Bloq. de Remessa no cabeçalho de Ordem
    ls_alvout-lifsk = <fs_inicial>-lifsk.

*   Gazzi - 02.12
*   Descrição Bloq. de Remessa no cabeçalho de Ordem
    CLEAR: lv_lifsk_txt.

    READ TABLE t_tvlst ASSIGNING <fs_tvlst> WITH KEY lifsp = ls_alvout-lifsk.
    IF sy-subrc = 0.
      ls_alvout-lifsk_txt = <fs_tvlst>-vtext.
    ENDIF.


*   Bloq.de Faturamento
    ls_alvout-fakskord = <fs_inicial>-faksk.

*   Gazzi - 02.12
*   Descrição Bloq. faturamento
    CLEAR: lv_fakskord_txt.

    READ TABLE t_tvfst ASSIGNING <fs_tvfst> WITH KEY faksp = ls_alvout-fakskord.
    IF sy-subrc = 0.
      ls_alvout-fakskord_txt = <fs_tvfst>-vtext.
    ENDIF.

*   Motivo Recusa Item
    ls_alvout-abgru = <fs_inicial>-abgru.

*   Gazzi - 02.12
*   Descrição do Motivo Recusa da divisão de remessa do item
*   Descrição do Motivo Recusa Item
    CLEAR: lv_bezei.
    READ TABLE t_tvagt ASSIGNING <fs_tvagt> WITH KEY abgru = ls_alvout-abgru.
    IF sy-subrc = 0.
      ls_alvout-abgru_txt = <fs_tvagt>-bezei.
    ENDIF.

*   Bloq. faturamento no Item da Ordem
    ls_alvout-fakspord = <fs_inicial>-faksp.

*   Gazzi - 02.12
*   Descrição Bloq. faturamento no Item da Ordem
    CLEAR: lv_fakspord_txt.

    READ TABLE t_tvfst ASSIGNING <fs_tvfst> WITH KEY faksp = ls_alvout-fakspord.
    IF sy-subrc = 0.
      ls_alvout-fakspord_txt = <fs_tvfst>-vtext.
    ENDIF.

*   CFOP
    ls_alvout-j_1bcfop = <fs_inicial>-j_1bcfop.

*   Categoria do item do documento de vendas e distribuição
    ls_alvout-pstyv = <fs_inicial>-pstyv.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv      "CPOSE
                                                   kposn = <fs_inicial>-posnr      "CPOSE
                                                   kschl = c_zpvb BINARY SEARCH.   "CPOSE
    IF sy-subrc EQ 0.                                                              "CPOSE
      ls_alvout-vl_zpvb = <fs_konv>-kwert.                                         "CPOSE
      ls_alvout-mt_zpvb = <fs_konv>-kbetr / 10.                                    "CPOSE
    ENDIF.                                                                         "CPOSE

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zicp BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zicp = <fs_konv>-kwert.
      ls_alvout-mt_zicp = <fs_konv>-kbetr / 10.

    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_ziib BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-mt_ziib = <fs_konv>-kbetr / 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zinf BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zinf = <fs_konv>-kwert.
      ls_alvout-mt_zinf = <fs_konv>-kbetr / 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zroy BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zroy = <fs_konv>-kwert.
      ls_alvout-mt_zroy = <fs_konv>-kbetr / 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zfpr BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zfpr = <fs_konv>-kwert.
      ls_alvout-mt_zfpr = <fs_konv>-kbetr / 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zpnf BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-mt_zpnf = <fs_konv>-kbetr. "/ 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zrom BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zrom = <fs_konv>-kwert.
      ls_alvout-mt_zrom = <fs_konv>-kbetr / 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zfpm BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zfpm = <fs_konv>-kwert.
      ls_alvout-mt_zfpm = <fs_konv>-kbetr / 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zcom BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zcom = <fs_konv>-kwert.
      ls_alvout-mt_zcom = <fs_konv>-kbetr / 10.
    ENDIF.

    READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = <fs_inicial>-knumv
                                                   kposn = <fs_inicial>-posnr
                                                   kschl = c_zdsc
                                                   kmprs = 'X' BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alvout-vl_zdsc = <fs_konv>-kwert.
      ls_alvout-mt_zdsc = <fs_konv>-kbetr / 10.
    ENDIF.


    DATA: lv_kwmeng TYPE vbap-kwmeng.

    READ TABLE t_vbap ASSIGNING <fs_vbap> WITH KEY  vbeln = ls_alvout-vbeln
                                                    posnr = ls_alvout-posnr
                                                    BINARY SEARCH.
    IF sy-subrc = 0.
      lv_kwmeng = <fs_vbap>-kwmeng.
    ENDIF.

**  Calcula o valor unitário do Royalties
    IF ls_alvout-vl_zrom IS NOT INITIAL.
      IF lv_kwmeng IS NOT INITIAL.
        ls_alvout-mt_uroy = ls_alvout-vl_zrom / lv_kwmeng.
      ENDIF.
    ELSE.
      IF lv_kwmeng IS NOT INITIAL.
        ls_alvout-mt_uroy = ls_alvout-vl_zroy / lv_kwmeng.
      ENDIF.
    ENDIF.

**  Calcula o valor unitário do Fundo Propaganda
    IF ls_alvout-vl_zfpm IS NOT INITIAL.
      IF lv_kwmeng IS NOT INITIAL.
        ls_alvout-mt_ufpr = ls_alvout-vl_zfpm / lv_kwmeng.
      ENDIF.
    ELSE.
      IF lv_kwmeng IS NOT INITIAL.
        ls_alvout-mt_ufpr = ls_alvout-vl_zfpr / lv_kwmeng.
      ENDIF.
    ENDIF.

    "Leitura Nova
    ">>> Alteração para abertura das quantidades por status.
    READ TABLE t_j3abdbs TRANSPORTING NO FIELDS BINARY SEARCH
                             WITH KEY werks = <fs_inicial>-werks
                                      matnr = <fs_inicial>-matnr
                                      aufnr = <fs_inicial>-vbeln
                                      posnr = <fs_inicial>-posnr.
    IF sy-subrc IS INITIAL.
      LOOP AT t_j3abdbs ASSIGNING <fs_j3abdbs> FROM sy-tabix.
        IF <fs_j3abdbs>-werks NE <fs_inicial>-werks
        OR <fs_j3abdbs>-matnr NE <fs_inicial>-matnr
        OR <fs_j3abdbs>-aufnr NE <fs_inicial>-vbeln
        OR <fs_j3abdbs>-posnr NE <fs_inicial>-posnr.
          EXIT.
        ENDIF.
        READ TABLE t_vbep TRANSPORTING NO FIELDS BINARY SEARCH
                              WITH KEY vbeln = <fs_inicial>-vbeln
                                       posnr = <fs_inicial>-posnr
                                       etenr = <fs_j3abdbs>-etenr.
        IF sy-subrc EQ 0.
          lv_index = sy-tabix.
          CLEAR ls_alvout_aux.
          ls_alvout_aux = ls_alvout.
        ELSE.
          CONTINUE.
        ENDIF.

        LOOP AT t_vbep ASSIGNING <fs_vbep> FROM lv_index.
          IF <fs_vbep>-vbeln NE <fs_inicial>-vbeln
          OR <fs_vbep>-posnr NE <fs_inicial>-posnr
          OR <fs_vbep>-etenr NE <fs_j3abdbs>-etenr.
            EXIT.
          ENDIF.

          READ TABLE lt_vbep WITH KEY vbeln = <fs_inicial>-vbeln
                                      posnr = <fs_inicial>-posnr
                                      etenr = <fs_j3abdbs>-etenr
                             ASSIGNING <fs_vbep_aux>
                             BINARY SEARCH.
          IF sy-subrc IS INITIAL.
            <fs_vbep_aux>-wmeng = <fs_vbep_aux>-wmeng - <fs_j3abdbs>-menge.

            "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Início.
            IF <fs_vbep_aux>-wmeng IS INITIAL.
              "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Fim.
              LOOP AT lt_vbep ASSIGNING <fs_vbep_aux> FROM sy-tabix.
                IF <fs_vbep_aux>-vbeln NE <fs_inicial>-vbeln
                OR <fs_vbep_aux>-posnr NE <fs_inicial>-posnr
                OR <fs_vbep_aux>-etenr NE <fs_j3abdbs>-etenr.
                  EXIT.
                ENDIF.

                DELETE lt_vbep INDEX sy-tabix.
              ENDLOOP.

            ENDIF.
          ENDIF.

          PERFORM zf_grava_alvout USING <fs_vbep>
                                        <fs_inicial>
                                        <fs_j3abdbs>
                                  CHANGING ls_alvout.
          CLEAR ls_alvout.
          ls_alvout = ls_alvout_aux.
        ENDLOOP.

      ENDLOOP.
    ENDIF.

    READ TABLE t_dbba TRANSPORTING NO FIELDS BINARY SEARCH
                          WITH KEY werks = <fs_inicial>-werks
                                   matnr = <fs_inicial>-matnr
                                   aufnr = <fs_inicial>-vbeln
                                   posnr = <fs_inicial>-posnr.
    IF sy-subrc IS INITIAL.
      LOOP AT t_dbba INTO ls_dbba FROM sy-tabix.
        IF ls_dbba-werks NE <fs_inicial>-werks
        OR ls_dbba-matnr NE <fs_inicial>-matnr
        OR ls_dbba-aufnr NE <fs_inicial>-vbeln
        OR ls_dbba-posnr NE <fs_inicial>-posnr.
          EXIT.
        ENDIF.

        CLEAR ls_j3.
        MOVE-CORRESPONDING ls_dbba TO ls_j3.

        ASSIGN ls_j3 TO <fs_j3abdbs>.

        READ TABLE t_vbep TRANSPORTING NO FIELDS BINARY SEARCH
                              WITH KEY vbeln = <fs_inicial>-vbeln
                                       posnr = <fs_inicial>-posnr
                                       etenr = <fs_j3abdbs>-etenr.
        IF sy-subrc EQ 0.
          lv_index = sy-tabix.
          CLEAR ls_alvout_aux.
          ls_alvout_aux = ls_alvout.
        ELSE.
          CONTINUE.
        ENDIF.

        LOOP AT t_vbep ASSIGNING <fs_vbep> FROM lv_index.
          IF <fs_vbep>-vbeln NE <fs_inicial>-vbeln
          OR <fs_vbep>-posnr NE <fs_inicial>-posnr
          OR <fs_vbep>-etenr NE <fs_j3abdbs>-etenr.
            EXIT.
          ENDIF.

          READ TABLE lt_vbep WITH KEY vbeln = <fs_inicial>-vbeln
                                      posnr = <fs_inicial>-posnr
                                      etenr = <fs_j3abdbs>-etenr
                             ASSIGNING <fs_vbep_aux>
                             BINARY SEARCH.
          IF sy-subrc IS INITIAL.
            <fs_vbep_aux>-wmeng = <fs_vbep_aux>-wmeng - <fs_j3abdbs>-menge.

            "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Início.
            IF <fs_vbep_aux>-wmeng IS INITIAL.
              "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Fim.
              LOOP AT lt_vbep ASSIGNING <fs_vbep_aux> FROM sy-tabix.
                IF <fs_vbep_aux>-vbeln NE <fs_inicial>-vbeln
                OR <fs_vbep_aux>-posnr NE <fs_inicial>-posnr
                OR <fs_vbep_aux>-etenr NE <fs_j3abdbs>-etenr.
                  EXIT.
                ENDIF.

                DELETE lt_vbep INDEX sy-tabix.
              ENDLOOP.
            ENDIF.
          ENDIF.

          PERFORM zf_grava_alvout USING <fs_vbep>
                                        <fs_inicial>
                                        <fs_j3abdbs>
                                  CHANGING ls_alvout.
          CLEAR ls_alvout.
          ls_alvout = ls_alvout_aux.
        ENDLOOP.

      ENDLOOP.

    ENDIF.

    READ TABLE lt_vbep WITH KEY vbeln = <fs_inicial>-vbeln
                                posnr = <fs_inicial>-posnr BINARY SEARCH TRANSPORTING NO FIELDS.
    IF sy-subrc EQ 0.
      lv_index = sy-tabix.
      CLEAR ls_alvout_aux.
      ls_alvout_aux = ls_alvout.
    ELSE.
      CONTINUE.
    ENDIF.

    LOOP AT lt_vbep ASSIGNING <fs_vbep> FROM lv_index.
      IF <fs_vbep>-vbeln NE <fs_inicial>-vbeln
      OR <fs_vbep>-posnr NE <fs_inicial>-posnr.
        EXIT.
      ENDIF.

      CLEAR: ls_j3abdbs.
      PERFORM zf_grava_alvout USING <fs_vbep>
                                    <fs_inicial>
                                    ls_j3abdbs
                              CHANGING ls_alvout.
      CLEAR ls_alvout.
      ls_alvout = ls_alvout_aux.

    ENDLOOP.
    "<<< Fim Alteração para abertura das quantidades por status.
  ENDLOOP.

  FIELD-SYMBOLS: <out> LIKE LINE OF t_alvout.

  LOOP AT t_alvout ASSIGNING <out>.
    CLEAR <out>-status.
    IF <out>-fkimg > 0.
      <out>-status = 'FAT'.
    ELSEIF <out>-j_3aabgru IS NOT INITIAL
        OR <out>-abgru IS NOT INITIAL.
      <out>-status = 'CANC'.
    ELSEIF <out>-lfimg > 0 .
      <out>-status = 'REM'.
    ELSE.

      "IF <out>-pstyv = 'YPTS'.
      IF <out>-pstyv IN gr_catipts. ">>> Eduardo (SB) - 14.01.2022 - 2022004 - Parametrização PSTYV
        CASE <out>-stataloc.
          WHEN 'F'. <out>-status = 'FIXA'.
          WHEN 'R'.
            IF <out>-auart = 'ZKM' AND <out>-stataloc_etq = 'C'. ">>> Adilson (SB) - 06.04.2022
              <out>-status = 'FIXA'.
            ELSE.
              <out>-status = 'RESE'.
            ENDIF. "<<< Adilson (SB) - 06.04.2022
          WHEN OTHERS.
            IF <out>-stataloc IS INITIAL.
              ">>> Eduardo (SB) - 10.03.2022 - 2022004 - StatusContrato
              IF <out>-pstyv IN gr_caticon.
                <out>-status = 'ATE'.
              ELSE.
                <out>-status = 'NPROC'.
              ENDIF.
              ">>> Eduardo (SB) - 10.03.2022 - 2022004 - StatusContrato
            ENDIF.
        ENDCASE.

        "ELSEIF <out>-pstyv = 'YVOL'
        "OR <out>-pstyv = 'YPTO'.
      ELSEIF <out>-pstyv IN gr_catioth. ">>> Eduardo (SB) - 14.01.2022 - 2022004 - Parametrização PSTYV
        IF <out>-kalab > 0.
          <out>-status = 'FIXA'.
        ELSEIF <out>-pedcomp IS NOT INITIAL.
          <out>-status = 'RESE'.
        ENDIF.
      ELSE.
        <out>-status = 'NPROC'.
      ENDIF.
    ENDIF.

    IF <out>-status IS INITIAL.
      <out>-status = 'NPROC'.
    ENDIF.

  ENDLOOP.

  PERFORM zf_progress_ind USING text-i04 100 100.

ENDFORM.                    " PROCESA_DADOS

"Lucas Pereira - Squad Logística - 01/03/2022 - Início.
FORM add_dados_status.
  "Ordem de venda
  PERFORM add_status_ordem_de_venda.

  "Remessa
  PERFORM add_status_remessa.

ENDFORM.                    "add_dados_status

FORM add_status_remessa.
  TYPES: BEGIN OF ty_remessa,
          vbeln TYPE vbeln,
          posnr TYPE posnr,
          numrem TYPE numc10,
          bukrs TYPE bukrs,
          kunnr TYPE kunnr,
      END OF ty_remessa,

      BEGIN OF ty_knb1,
       kunnr TYPE knb1-kunnr,
       bukrs TYPE knb1-bukrs,
       sperr TYPE knb1-sperr,
END   OF ty_knb1.

  DATA: lt_remessas TYPE TABLE OF ty_remessa,
        ls_remessa TYPE ty_remessa,
        lt_alvout_aux TYPE TABLE OF  tp_alvout2,
        lv_tabix TYPE sytabix,
        ls_alvout TYPE tp_alvout2,
        ls_dados_remessa TYPE tp_dados_remessa,
        ls_likp TYPE tp_likp,
        ls_kna1 TYPE tp_kna1,
        lt_knb1 TYPE TABLE OF ty_knb1,
        ls_knb1 TYPE ty_knb1,
        ls_inicial TYPE tp_inicial,
        ls_knvv TYPE tp_knvv.


  CONSTANTS: lc_num_remessa_vazio TYPE numc10 VALUE '0000000000',
             lc_num_fatura_vazio TYPE vbeln   VALUE '0000000000'.

  lt_alvout_aux = t_alvout2.
  SORT: lt_alvout_aux BY numrem.
  DELETE lt_alvout_aux WHERE numrem = lc_num_remessa_vazio.

  SORT: lt_alvout_aux BY numfat.

  LOOP AT lt_alvout_aux INTO ls_alvout.
    IF ls_alvout-numfat <> lc_num_fatura_vazio.
      EXIT.
    ENDIF.
    ls_remessa-vbeln  = ls_alvout-vbeln.
    ls_remessa-posnr  = ls_alvout-posnr.
    ls_remessa-numrem = ls_alvout-numrem.
    ls_remessa-kunnr  = ls_alvout-kunnr1.

    READ TABLE t_inicial INTO ls_inicial WITH KEY vbeln = ls_remessa-vbeln
                                                  posnr = ls_remessa-posnr
                                            BINARY SEARCH.
    IF sy-subrc = 0.
      ls_remessa-bukrs = ls_inicial-bukrs_vf.
    ENDIF.
    APPEND ls_remessa TO lt_remessas.
  ENDLOOP.

  CHECK lt_remessas IS NOT INITIAL.

  SORT: lt_remessas BY vbeln posnr numrem.

  DELETE ADJACENT DUPLICATES FROM lt_remessas COMPARING vbeln posnr numrem.

  SELECT kunnr bukrs sperr
  FROM knb1
  INTO TABLE lt_knb1
  FOR ALL ENTRIES IN lt_remessas
  WHERE kunnr = lt_remessas-kunnr
  AND  bukrs = lt_remessas-bukrs.

  SORT: t_likp    BY vbeln vbtyp,
        t_kna1    BY kunnr,
        lt_knb1   BY kunnr bukrs,
        t_inicial BY vbeln posnr,
        t_knvv BY kunnr vkorg vtweg spart,
        lt_alvout_aux BY vbeln posnr numrem.


  LOOP AT lt_remessas INTO ls_remessa.
    READ TABLE lt_alvout_aux INTO ls_alvout WITH KEY vbeln  = ls_remessa-vbeln
                                                     posnr  = ls_remessa-posnr
                                                     numrem = ls_remessa-numrem
                                                     BINARY SEARCH.
    IF sy-subrc = 0.
      ls_dados_remessa-vbeln      = ls_alvout-vbeln.
      ls_dados_remessa-posnr      = ls_alvout-posnr.
      ls_dados_remessa-numrem     = ls_alvout-numrem.
      ls_dados_remessa-cmgst      = ls_alvout-cmgst.
      ls_dados_remessa-faksk      = ls_alvout-fakskrem.
      ls_dados_remessa-faksp      = ls_alvout-faksprem.
      ls_dados_remessa-bukrs      = ls_remessa-bukrs.

      READ TABLE t_kna1 INTO ls_kna1 WITH KEY kunnr = ls_alvout-kunnr1
                                              BINARY SEARCH.
      IF sy-subrc = 0.
        ls_dados_remessa-sperr_kna1 = ls_kna1-sperr.
      ENDIF.

      READ TABLE lt_knb1 INTO ls_knb1 WITH KEY kunnr = ls_alvout-kunnr1
                                               bukrs = ls_dados_remessa-bukrs
                                               BINARY SEARCH.
      IF sy-subrc = 0.
        ls_dados_remessa-sperr_knb1  = ls_knb1-sperr.
      ENDIF.

      READ TABLE t_knvv INTO ls_knvv WITH KEY kunnr = ls_alvout-kunnr1
                                               vkorg = ls_alvout-vkorg
                                               vtweg = ls_alvout-vtweg
                                               spart = ls_alvout-spart
                                               BINARY SEARCH.
      IF sy-subrc = 0.
        ls_dados_remessa-faksd_knvv = ls_knvv-faksd.
      ENDIF.

      READ TABLE t_likp INTO ls_likp WITH KEY vbeln = ls_dados_remessa-numrem
                                              vbtyp = 'J'
                                              BINARY SEARCH.
      IF sy-subrc = 0.
        ls_dados_remessa-vlstk      = ls_likp-vlstk.
      ENDIF.
      APPEND ls_dados_remessa TO lt_dados_remessas.


    ENDIF.
  ENDLOOP.
  CHECK lt_dados_remessas IS NOT INITIAL.
  PERFORM zf_add_tipos_bloqueio_remessa.

ENDFORM.                    "add_status_remessa

FORM zf_add_tipos_bloqueio_remessa .

**********************************************************************CPOSE_INICIO
  TYPES: BEGIN OF ty_input,
    wa_string TYPE vgbel,
    END OF ty_input.

  DATA : p_file TYPE rlgrap-filename VALUE '/usr/sap/apuracao/zrsd_039_abx30.txt',   " Application Server file path
         lt_input TYPE TABLE OF ty_input,
         ls_input TYPE  ty_input.

*       Carrega -
  OPEN DATASET p_file FOR INPUT IN TEXT MODE ENCODING DEFAULT.
  IF sy-subrc = 0.
    DO.
      READ DATASET p_file INTO ls_input-wa_string.
      IF sy-subrc EQ 0.
        APPEND ls_input TO lt_input.
      ELSE.
        EXIT.
      ENDIF.
    ENDDO.
  ENDIF.
  CLOSE DATASET p_file.

  IF NOT lt_input IS INITIAL.
    SORT lt_input ASCENDING.
  ENDIF.
**********************************************************************CPOSE_FIM
  FIELD-SYMBOLS: <fs_remessa>    TYPE tp_dados_remessa.
  DATA: lv_tabix TYPE sytabix.

  CONSTANTS: lc_num_fatura_vazio TYPE num10 VALUE '0000000000'.

  SORT: lt_dados_ordens BY vbeln posnr,
        t_alvout2 BY vbeln posnr numrem numfat.

  LOOP AT lt_dados_remessas ASSIGNING <fs_remessa>.

    READ TABLE t_alvout2  WITH KEY vbeln = <fs_remessa>-vbeln
                                   posnr = <fs_remessa>-posnr
                                   numrem = <fs_remessa>-numrem
                                   numfat = lc_num_fatura_vazio
                                   TRANSPORTING NO FIELDS
                                   BINARY SEARCH.
    IF sy-subrc = 0.
      lv_tabix = sy-tabix.

      LOOP AT t_alvout2  ASSIGNING <fs_alvout2> FROM lv_tabix.

        IF <fs_alvout2>-vbeln  <> <fs_remessa>-vbeln
        OR <fs_alvout2>-posnr  <> <fs_remessa>-posnr
        OR <fs_alvout2>-numrem <> <fs_remessa>-numrem
        OR <fs_alvout2>-numfat <> lc_num_fatura_vazio.
          EXIT.
        ENDIF.

        CASE <fs_remessa>-vlstk.
          WHEN 'A'.
            IF <fs_remessa>-cmgst EQ 'B'.
              PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                           'Financeiro'.
            ELSEIF <fs_remessa>-cmgst IS INITIAL.
              PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                           'Ausência de Dados Mestres'.
            ENDIF.
          WHEN 'B'.
**********************************************************************CPOSE_INICIO
*CPOSE_06-01-2016
            READ TABLE lt_input INTO ls_input
            WITH KEY wa_string = <fs_alvout2>-vgbel BINARY SEARCH.

            IF sy-subrc EQ 0.
*        Se OV existe no arquivo -
              PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                           'Abaixo Frete Mínimo'.

            ELSE.
**********************************************************************CPOSE_FIM
              PERFORM zf_add_fs_bloq USING 'LIBERADO'
                                           'Liberado para Picking'.
**********************************************************************CPOSE_INICIO
            ENDIF.
**********************************************************************CPOSE_FIM


          WHEN 'C'.
            IF <fs_remessa>-faksk      IS NOT INITIAL OR
               <fs_remessa>-faksp      IS NOT INITIAL OR
               <fs_remessa>-sperr_kna1 IS NOT INITIAL OR
               <fs_remessa>-sperr_knb1 IS NOT INITIAL OR
               <fs_remessa>-faksd_knvv IS NOT INITIAL.
              PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                           'Bloqueado para Faturamento'.
            ELSE.
              PERFORM zf_add_fs_bloq USING 'LIBERADO'
                                           'Liberado para Faturamento'.
            ENDIF.
          WHEN OTHERS.
            PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                         'Ordem de Venda Incompleta'.
        ENDCASE.

      ENDLOOP.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " ZF_ADD_TIPOS_BLOQUEIO

FORM add_status_ordem_de_venda.
  TYPES: BEGIN OF ty_ordem_de_venda,
          vbeln TYPE vbeln,
          posnr TYPE posnr,
       END OF ty_ordem_de_venda.

  DATA: lt_alvout_aux TYPE TABLE OF  tp_alvout2,
        ls_alvout TYPE tp_alvout2,
        lv_tabix TYPE sytabix,
        lt_ordens_de_venda TYPE TABLE OF ty_ordem_de_venda,
        ls_ordem_de_venda TYPE ty_ordem_de_venda,
        ls_dados_ordem TYPE tp_dados_ordem,
        ls_vbep TYPE tp_vbep,
        ls_inicial TYPE tp_inicial,
        ls_kna1 TYPE tp_kna1,
        lt_lead_time TYPE TABLE OF ztsd_lead_time,
        ls_lead_time TYPE ztsd_lead_time,
        lt_config TYPE TABLE OF ztsd_config_ckpt,
        ls_config TYPE ztsd_config_ckpt.

  DATA: lv_max_data           TYPE dats,
        lv_days               TYPE i,
        lv_handling(04)       TYPE n,
        lv_dias_logistica(04) TYPE n.

  CONSTANTS: lc_num_remessa_vazio TYPE numc10 VALUE '0000000000'.

  FIELD-SYMBOLS: <fs_ordem> TYPE tp_dados_ordem.

  "Ordem de Venda
  lt_alvout_aux = t_alvout2.
  SORT: lt_alvout_aux BY numrem.
  READ TABLE lt_alvout_aux WITH KEY numrem = lc_num_remessa_vazio
                           TRANSPORTING NO FIELDS
                           BINARY SEARCH.
  IF sy-subrc = 0.
    lv_tabix = sy-tabix.
    LOOP AT lt_alvout_aux INTO ls_alvout FROM lv_tabix.
      IF ls_alvout-numrem <> lc_num_remessa_vazio.
        EXIT.
      ENDIF.
      ls_ordem_de_venda-vbeln = ls_alvout-vbeln.
      ls_ordem_de_venda-posnr = ls_alvout-posnr.
      APPEND ls_ordem_de_venda TO lt_ordens_de_venda.
    ENDLOOP.

    CHECK lt_ordens_de_venda IS NOT INITIAL.

    SELECT * FROM ztsd_lead_time
    INTO TABLE lt_lead_time
    FOR ALL ENTRIES IN lt_alvout_aux
    WHERE werks = lt_alvout_aux-werks.

    SELECT * FROM ztsd_config_ckpt
    INTO TABLE lt_config
    FOR ALL ENTRIES IN lt_alvout_aux
    WHERE werks = lt_alvout_aux-werks.

    SORT: lt_alvout_aux  BY vbeln posnr,
          lt_ordens_de_venda BY vbeln posnr,
          t_vbep BY vbeln posnr,
          t_inicial BY vbeln posnr,
          t_kna1 BY kunnr.

    DELETE ADJACENT DUPLICATES FROM lt_ordens_de_venda COMPARING vbeln posnr.

    LOOP AT lt_ordens_de_venda INTO ls_ordem_de_venda.
      READ TABLE lt_alvout_aux INTO ls_alvout WITH KEY vbeln = ls_ordem_de_venda-vbeln
                                                       posnr = ls_ordem_de_venda-posnr
                               BINARY SEARCH.
      IF sy-subrc = 0.
        ls_dados_ordem-vbeln    = ls_alvout-vbeln.
        ls_dados_ordem-posnr    = ls_alvout-posnr.
        ls_dados_ordem-aufnr    = ls_alvout-vbeln.
        ls_dados_ordem-vkorg    = ls_alvout-vkorg.
        ls_dados_ordem-vtweg    = ls_alvout-vtweg.
        ls_dados_ordem-abgru    = ls_alvout-abgru.
        ls_dados_ordem-faksk    = ls_alvout-fakskord.
        ls_dados_ordem-pstyv    = ls_alvout-pstyv.
        ls_dados_ordem-matkl    = ls_alvout-matkl.
        ls_dados_ordem-grade    = ls_alvout-j_4krcat.
        ls_dados_ordem-j_3asean = ls_alvout-j_3asean.
        ls_dados_ordem-werks    = ls_alvout-werks.
        ls_dados_ordem-lifsk    = ls_alvout-lifsk.

        READ TABLE t_vbep INTO ls_vbep WITH KEY vbeln = ls_alvout-vbeln
                                                posnr = ls_alvout-posnr
                                                BINARY SEARCH.
        IF sy-subrc = 0.
          ls_dados_ordem-etenr = ls_vbep-etenr.
        ENDIF.

        READ TABLE t_inicial INTO ls_inicial WITH KEY vbeln = ls_alvout-vbeln
                                                      posnr = ls_alvout-posnr
                                                      BINARY SEARCH.
        IF sy-subrc = 0.
          ls_dados_ordem-kunnr = ls_inicial-kunnr.
          ls_dados_ordem-bukrs = ls_inicial-bukrs_vf.
          ls_dados_ordem-spart = ls_inicial-spart.
        ENDIF.
        READ TABLE t_kna1 INTO ls_kna1 WITH KEY kunnr = ls_dados_ordem-kunnr
                                                BINARY SEARCH.
        IF sy-subrc = 0.
          ls_dados_ordem-regio = ls_kna1-regio.
          ls_dados_ordem-txjcd = ls_kna1-txjcd.
        ENDIF.

        "DATA DE LIBERADA DE SAIDA LOJA
        READ TABLE lt_lead_time INTO ls_lead_time WITH KEY werks = ls_dados_ordem-werks
                                                           regio = ls_dados_ordem-regio
                                                           txjcd = ls_dados_ordem-txjcd.
        IF sy-subrc NE 0.
          READ TABLE lt_lead_time INTO ls_lead_time WITH KEY werks = ls_dados_ordem-werks
                                                             regio = ls_dados_ordem-regio
                                                             txjcd = space.
        ENDIF.

        READ TABLE lt_config INTO ls_config WITH KEY parametro = '01'.
        IF sy-subrc = 0.
          lv_handling = ls_config-valor.
        ENDIF.

        READ TABLE lt_config INTO ls_config WITH KEY parametro = '02'.
        IF sy-subrc = 0.
          lv_dias_logistica = ls_config-valor.
        ENDIF.

        lv_days = ( ls_lead_time-lead_time + lv_handling + lv_dias_logistica ) * -1.

        CALL FUNCTION 'BKK_ADD_WORKINGDAY'
          EXPORTING
            i_date      = lv_max_data
            i_days      = lv_days
            i_calendar1 = 'BR'
          IMPORTING
            e_date      = lv_max_data.

        ls_dados_ordem-dt_lib_s_1 = lv_max_data.

        APPEND ls_dados_ordem TO lt_dados_ordens.
      ENDIF.
    ENDLOOP.
    CHECK lt_dados_ordens IS NOT INITIAL.
    PERFORM zf_valida_ordens.
  ENDIF.

ENDFORM.                    "add_status_ordem_de_venda

FORM zf_valida_ordens.
  TYPES: BEGIN OF ty_kna1,
   kunnr TYPE kna1-kunnr,
   sperr TYPE kna1-sperr,
   lifsd TYPE kna1-lifsd,
   texto TYPE bezei_lifsp,
 END OF ty_kna1,

 BEGIN OF ty_knb1,
  kunnr TYPE knb1-kunnr,
  bukrs TYPE knb1-bukrs,
  sperr TYPE knb1-sperr,
 END OF ty_knb1,

 BEGIN OF ty_knvv,
  kunnr TYPE knvv-kunnr,
  vkorg TYPE knvv-vkorg,
  vtweg TYPE knvv-vtweg,
  spart TYPE knvv-spart,
  lifsd TYPE knvv-lifsd,
  lprio TYPE knvv-lprio,
  kvgr2 TYPE knvv-kvgr2,
  kvgr3 TYPE knvv-kvgr3,
  texto TYPE bezei_lifsp,
 END OF ty_knvv,

  BEGIN OF ty_vbep_valid,
    vbeln    TYPE vbep-vbeln,
    posnr    TYPE vbep-posnr,
    etenr    TYPE vbep-etenr,
    lifsp    TYPE vbep-lifsp,
    vtext    TYPE bezei_lifsp,
    j_4krcat TYPE vbep-j_4krcat,
  END OF ty_vbep_valid,

    BEGIN OF ty_vbuk,
    vbeln TYPE vbuk-vbeln,
    cmpsa TYPE vbuk-cmpsa,
    cmgst TYPE vbuk-cmgst,
    cmpsg TYPE vbuk-cmpsg,
  END OF ty_vbuk.

  DATA:
        lt_order_header_kna1 TYPE STANDARD TABLE OF tp_dados_ordem,
        lt_order_header_knb1 TYPE STANDARD TABLE OF tp_dados_ordem,
        lt_order_header_knvv TYPE STANDARD TABLE OF tp_dados_ordem,
        lt_order_header      TYPE STANDARD TABLE OF tp_dados_ordem,
        lt_vbep_valid        TYPE STANDARD TABLE OF ty_vbep_valid,
        lt_kna1              TYPE STANDARD TABLE OF ty_kna1,
        lt_knb1              TYPE STANDARD TABLE OF ty_knb1,
        lt_knvv              TYPE STANDARD TABLE OF ty_knvv,
        lt_vbuk              TYPE STANDARD TABLE OF ty_vbuk,
        ls_vbep_valid        TYPE ty_vbep_valid,
        ls_vbuk              TYPE ty_vbuk,
        lt_orders            TYPE tp_dados_ordem,
        ls_orders            TYPE tp_dados_ordem,
        ls_kna1              TYPE ty_kna1,
        ls_knb1              TYPE ty_knb1,
        lv_vbeln             TYPE vbep-vbeln,
        lv_posnr             TYPE vbep-posnr,
        lv_etenr             TYPE vbep-etenr,
        lv_index             TYPE i,
        ls_log               TYPE zssd_log_msg,
        ls_knvv              TYPE ty_knvv,
        last_vbeln           TYPE vbep-vbeln,
        lv_count_remessas    TYPE i,
        lv_count_bloqs       TYPE i,
        lt_vbuv              TYPE STANDARD TABLE OF vbuv,
        ls_vbuv              TYPE vbuv,
        ls_vbup              TYPE vbup,
        lti_abdbs            TYPE STANDARD TABLE OF j_3abdbs,
        ls_abdbs             TYPE j_3abdbs,
        lv_aufnr_aux         TYPE j_3aaufn,
        lti_vbep_aux         TYPE STANDARD TABLE OF vbep,
        ls_vbep_aux          TYPE vbep,
        lv_vbeln_aux         TYPE vbeln.

  FIELD-SYMBOLS: <fs_ordem>    TYPE tp_dados_ordem,
                 <fs_order_aux> TYPE tp_dados_ordem.

  lt_order_header_kna1 = lt_dados_ordens.
  SORT lt_order_header_kna1 BY kunnr.
  DELETE ADJACENT DUPLICATES FROM lt_order_header_kna1 COMPARING kunnr.
  lt_order_header_knvv = lt_dados_ordens.
  SORT lt_order_header_knvv BY kunnr vkorg vtweg spart.
  DELETE ADJACENT DUPLICATES FROM lt_order_header_knvv COMPARING kunnr vkorg vtweg spart.
  lt_order_header_knb1 = lt_dados_ordens.
  SORT lt_order_header_knb1 BY kunnr bukrs.
  DELETE ADJACENT DUPLICATES FROM lt_order_header_knb1 COMPARING kunnr bukrs.


  lt_order_header[] = lt_dados_ordens[].
  SORT lt_order_header BY vbeln posnr etenr.
  DELETE ADJACENT DUPLICATES FROM lt_order_header COMPARING vbeln posnr etenr.

*** busca informacoes de bloqueio
  SELECT vp~vbeln vp~posnr vp~etenr vp~lifsp tv~vtext
    INTO TABLE lt_vbep_valid
    FROM vbep AS vp
    JOIN tvlst AS tv ON tv~lifsp EQ vp~lifsp AND spras EQ 'P'
    FOR ALL ENTRIES IN lt_order_header
    WHERE vp~vbeln = lt_order_header-vbeln AND
          vp~posnr = lt_order_header-posnr AND
          vp~etenr = lt_order_header-etenr.

  SELECT vbeln posnr etenr bmeng FROM vbep
    INTO CORRESPONDING FIELDS OF TABLE lti_vbep_aux
    FOR ALL ENTRIES IN lt_order_header
    WHERE vbeln EQ lt_order_header-vbeln
      AND posnr EQ lt_order_header-posnr
      AND etenr EQ lt_order_header-etenr.

  SORT lti_vbep_aux BY vbeln posnr etenr.

  SELECT aufnr posnr etenr menge FROM j_3abdbs
    INTO CORRESPONDING FIELDS OF TABLE lti_abdbs
    FOR ALL ENTRIES IN lt_order_header
    WHERE aufnr EQ lt_order_header-aufnr
      AND posnr EQ lt_order_header-posnr
      AND etenr EQ lt_order_header-etenr.

  SORT lti_abdbs BY aufnr posnr etenr.

** busca informacoes da ordem
  SELECT vbeln cmpsa cmgst cmpsg FROM vbuk
    INTO TABLE lt_vbuk
    FOR ALL ENTRIES IN lt_dados_ordens
    WHERE vbeln =  lt_dados_ordens-vbeln.
  SORT lt_vbuk BY vbeln.

*** busca informacoes de cliente para verificar bloqueios
  SELECT k~kunnr k~sperr k~lifsd tx~vtext
    INTO TABLE lt_kna1
    FROM kna1 AS k
    LEFT OUTER JOIN tvlst AS tx ON ( tx~lifsp = k~lifsd AND tx~spras = sy-langu )
    FOR ALL ENTRIES IN lt_order_header_kna1
    WHERE kunnr = lt_order_header_kna1-kunnr.

*** busca dados de informações incompletas na OV
  SELECT * FROM vbuv
    INTO TABLE lt_vbuv
    FOR ALL ENTRIES IN lt_order_header
    WHERE vbeln EQ lt_order_header-vbeln.

  SORT lt_vbuv BY vbeln posnr.

  SORT lt_kna1 BY kunnr.

  SELECT k~kunnr k~bukrs k~sperr
    INTO TABLE lt_knb1
    FROM knb1 AS k
    FOR ALL ENTRIES IN lt_order_header_knb1
    WHERE kunnr = lt_order_header_knb1-kunnr AND
          bukrs = lt_order_header_knb1-bukrs.
  SORT lt_knb1 BY kunnr bukrs.

  SELECT k~kunnr k~vkorg k~vtweg k~spart k~lifsd k~lprio k~kvgr2 k~kvgr3 tx~vtext
    INTO TABLE lt_knvv
    FROM knvv AS k
    JOIN tvlst AS tx ON tx~lifsp = k~lifsd
    FOR ALL ENTRIES IN lt_order_header_knvv
    WHERE k~kunnr = lt_order_header_knvv-kunnr AND
          k~vkorg = lt_order_header_knvv-vkorg AND
          k~vtweg = lt_order_header_knvv-vtweg AND
          k~spart = lt_order_header_knvv-spart AND
          tx~spras = sy-langu.
  SORT lt_knvv BY kunnr vkorg vtweg spart.

**  deleta tabelas internas aceleradoras
  REFRESH: lt_order_header_knb1, lt_order_header_knvv, lt_order_header_kna1.
  SORT lt_dados_ordens BY vbeln posnr etenr.
  SORT lt_vbep_valid BY vbeln posnr etenr.

  LOOP AT lt_dados_ordens ASSIGNING <fs_ordem>.
    lv_index = sy-tabix.

***   valida se existe bloqueio de remessa
    IF lv_index   NE 1 AND last_vbeln NE <fs_ordem>-vbeln.
      lv_index = lv_index - 1.
      READ TABLE lt_dados_ordens ASSIGNING <fs_order_aux> INDEX lv_index.
      IF sy-subrc EQ 0.
        IF lv_count_bloqs EQ lv_count_remessas.
          "WRITE icon_red_light AS ICON TO <fs_order_aux>-status.
          <fs_order_aux>-status = '@0A@'.
        ELSEIF lv_count_bloqs IS INITIAL.
          "WRITE icon_green_light AS ICON TO <fs_order_aux>-status.
          <fs_order_aux>-status = '@08@'.
        ENDIF.
      ENDIF.
      CLEAR: lv_count_remessas, lv_count_bloqs.
    ENDIF.
    last_vbeln = <fs_ordem>-vbeln.
    ADD 1 TO lv_count_remessas.

***   verifica bloqueio de remessas
    READ TABLE lt_vbep_valid INTO ls_vbep_valid
      WITH KEY vbeln = <fs_ordem>-vbeln
               posnr = <fs_ordem>-posnr
               etenr = <fs_ordem>-etenr BINARY SEARCH.
    IF sy-subrc EQ 0 AND ls_vbep_valid-lifsp IS NOT INITIAL.
      ADD 1 TO lv_count_bloqs.
      <fs_ordem>-slifsp = ls_vbep_valid-lifsp.
    ENDIF.

    IF <fs_ordem>-pstyv EQ 'YPTS'.
      CLEAR: ls_vbep_aux, ls_abdbs.

      READ TABLE lti_abdbs INTO ls_abdbs WITH KEY aufnr = <fs_ordem>-aufnr
                                                  posnr = <fs_ordem>-posnr
                                                  etenr = <fs_ordem>-etenr BINARY SEARCH TRANSPORTING menge.
      IF sy-subrc EQ 0.
        READ TABLE lti_vbep_aux INTO ls_vbep_aux WITH KEY vbeln = <fs_ordem>-vbeln
                                                          posnr = <fs_ordem>-posnr
                                                          etenr = <fs_ordem>-etenr BINARY SEARCH TRANSPORTING bmeng.
        IF sy-subrc EQ 0.
          IF ls_abdbs-menge NE ls_vbep_aux-bmeng.
            <fs_ordem>-status = '@0A@'.
            <fs_ordem>-scampo = 'X'.
            ADD 1 TO lv_count_bloqs.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
***   validacoes de cliente
    READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = <fs_ordem>-kunnr BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF ls_kna1-lifsd IS NOT INITIAL.
        "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
        <fs_ordem>-status = '@0A@'.
        .
        <fs_ordem>-slifsd  = ls_kna1-lifsd.
        ADD 1 TO lv_count_bloqs.
      ENDIF.
      IF ls_kna1-sperr IS NOT INITIAL.
        <fs_ordem>-status = '@0A@'.
        <fs_ordem>-ssperr = ls_kna1-sperr.
        ADD 1 TO lv_count_bloqs.
      ENDIF.
    ENDIF.
    READ TABLE lt_knb1 INTO ls_knb1 WITH KEY kunnr = <fs_ordem>-kunnr bukrs = <fs_ordem>-bukrs BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF ls_knb1-sperr IS NOT INITIAL.
        "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
        <fs_ordem>-status = '@0A@'.
        <fs_ordem>-ssperr = ls_knb1-sperr.
        ADD 1 TO lv_count_bloqs.
      ENDIF.
    ENDIF.
    READ TABLE lt_knvv INTO ls_knvv WITH KEY kunnr = <fs_ordem>-kunnr
                                             vkorg = <fs_ordem>-vkorg
                                             vtweg = <fs_ordem>-vtweg
                                             spart = <fs_ordem>-spart BINARY SEARCH.
    IF sy-subrc EQ 0.
      IF ls_knvv-lifsd IS NOT INITIAL.
        "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
        <fs_ordem>-status = '@0A@'.
        <fs_ordem>-slifsd2  = ls_knvv-lifsd.
        ADD 1 TO lv_count_bloqs.
      ENDIF.
    ENDIF.

***   VALIDACOES DE ORDEM
    IF <fs_ordem>-abgru IS NOT INITIAL.
      "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
      <fs_ordem>-status = '@0A@'.
      <fs_ordem>-sabgru = <fs_ordem>-abgru.
      ADD 1 TO lv_count_bloqs.
    ENDIF.
    IF <fs_ordem>-lifsk IS NOT INITIAL.
      "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
      <fs_ordem>-status = '@0A@'.
      <fs_ordem>-slifsk = <fs_ordem>-lifsk.
      ADD 1 TO lv_count_bloqs.
    ENDIF.

    IF <fs_ordem>-faksk IS NOT INITIAL.
      "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
      <fs_ordem>-status = '@0A@'.
      <fs_ordem>-sfaksk    = <fs_ordem>-faksk.
      ADD 1 TO lv_count_bloqs.
    ENDIF.

*** Valida dados incompletos
    READ TABLE lt_vbuv WITH KEY vbeln = <fs_ordem>-vbeln
                                posnr = <fs_ordem>-posnr BINARY SEARCH TRANSPORTING NO FIELDS.
    IF sy-subrc EQ 0.
      CLEAR ls_log.
      "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
      <fs_ordem>-status = '@0A@'.
      <fs_ordem>-scampo = 'X'.
      ADD 1 TO lv_count_bloqs.
    ELSE.
      READ TABLE lt_vbuv WITH KEY vbeln = <fs_ordem>-vbeln TRANSPORTING NO FIELDS.
      IF sy-subrc EQ 0.
        "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
        <fs_ordem>-status = '@0A@'.
        <fs_ordem>-scampo = 'X'.
        ADD 1 TO lv_count_bloqs.
      ENDIF.
    ENDIF.

    READ TABLE lt_vbuk INTO ls_vbuk WITH KEY vbeln = <fs_ordem>-vbeln BINARY SEARCH.

    IF ls_vbuk-cmgst = 'B'.
      "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
      <fs_ordem>-status = '@0A@'.
      <fs_ordem>-scmgst    = ls_vbuk-cmgst.
      ADD 1 TO lv_count_bloqs.
    ENDIF.
    IF ls_vbuk-cmgst = 'C'.
      "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
      <fs_ordem>-status = '@0A@'.
      <fs_ordem>-scmgst2    = ls_vbuk-cmgst.
      ADD 1 TO lv_count_bloqs.
    ENDIF.

    SELECT SINGLE * FROM vbup
      INTO ls_vbup
      WHERE vbeln EQ <fs_ordem>-vbeln
      AND   posnr EQ <fs_ordem>-posnr.
    IF ls_vbup-lfsta EQ 'B'.
      "WRITE icon_red_light AS ICON TO <fs_ordem>-status.
      <fs_ordem>-status = '@0A@'.
      <fs_ordem>-scampo = 'X'.
      ADD 1 TO lv_count_bloqs.
    ENDIF.

  ENDLOOP.

  REFRESH:  lt_order_header_kna1,
            lt_order_header_knb1,
            lt_order_header_knvv,
            lt_order_header     ,
            lt_kna1             ,
            lt_knb1             ,
            lt_knvv             ,
            lt_vbuk             .

  PERFORM zf_add_tipos_bloqueio_ov.
ENDFORM.                    " ZF_VALIDA_ORDENS

FORM zf_add_tipos_bloqueio_ov.
  FIELD-SYMBOLS: <fs_ordem>    TYPE tp_dados_ordem.
  DATA: lv_tabix TYPE sytabix.

  CONSTANTS: lc_num_remessa_vazio TYPE num10 VALUE '0000000000'.

  SORT: lt_dados_ordens BY vbeln posnr,
        t_alvout2 BY vbeln posnr numrem.
  LOOP AT lt_dados_ordens ASSIGNING <fs_ordem>.
    "Legenda:
    "scmgst  = falta completar
    "scmgst2 =
    "Slifsk = Bloqueio de Remessa na OV
    "Sfaksk = Bloqueio no documento de faturameto na OV.
    "Slifsp =
    "SSperr =
    "slifsd2 =

    READ TABLE t_alvout2  WITH KEY vbeln = <fs_ordem>-vbeln
                                   posnr = <fs_ordem>-posnr
                                   numrem = lc_num_remessa_vazio
                                   TRANSPORTING NO FIELDS
                                   BINARY SEARCH.
    IF sy-subrc = 0.
      lv_tabix = sy-tabix.

      LOOP AT t_alvout2  ASSIGNING <fs_alvout2> FROM lv_tabix.

        IF <fs_alvout2>-vbeln <> <fs_ordem>-vbeln
        OR <fs_alvout2>-posnr <> <fs_ordem>-posnr
        OR <fs_alvout2>-numrem <> lc_num_remessa_vazio .
          EXIT.
        ENDIF.
        "Motivo Inauguração
        IF ( ( <fs_ordem>-slifsk   EQ '07' OR <fs_ordem>-slifsp EQ '07') OR" Inauguração Loja
               <fs_ordem>-sfaksk   EQ '07' OR
               <fs_ordem>-ssperr   EQ '07' OR
               <fs_ordem>-slifsd2  EQ '07' ).

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Inauguração'.

        ENDIF.

        "Bloqueio Lancamento
        IF ( ( <fs_ordem>-slifsk   EQ '05' OR <fs_ordem>-slifsp EQ '05') OR
               <fs_ordem>-sfaksk   EQ '05' OR
               <fs_ordem>-ssperr   EQ '05' OR
               <fs_ordem>-slifsd2  EQ '05' ).

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Lançamento'.

        ENDIF.

        "Motivo Comercial
        IF ( ( <fs_ordem>-slifsk   EQ '01' OR <fs_ordem>-slifsp EQ '01') OR"Condição de pagamento
               <fs_ordem>-sfaksk   EQ '01' OR
               <fs_ordem>-ssperr   EQ '01' OR
               <fs_ordem>-slifsd2  EQ '01' ) OR
           ( ( <fs_ordem>-slifsk   EQ '02' OR <fs_ordem>-slifsp EQ '02') OR"Solicitação Comercial
               <fs_ordem>-sfaksk   EQ '02' OR
               <fs_ordem>-ssperr   EQ '02' OR
               <fs_ordem>-slifsd2  EQ '02' ) OR
           ( ( <fs_ordem>-slifsk   EQ '08' OR <fs_ordem>-slifsp EQ '08') OR"Reforma de Loja
               <fs_ordem>-sfaksk   EQ '08' OR
               <fs_ordem>-ssperr   EQ '08' OR
               <fs_ordem>-slifsd2  EQ '08' ) OR
           ( ( <fs_ordem>-slifsk   EQ '09' OR <fs_ordem>-slifsp EQ '09') OR"Bloqueio de Item
               <fs_ordem>-sfaksk   EQ '09' OR
               <fs_ordem>-ssperr   EQ '09' OR
               <fs_ordem>-slifsd2  EQ '09' ) OR
           ( ( <fs_ordem>-slifsk   EQ '10' OR <fs_ordem>-slifsp EQ '10') OR"Alteração Ordem Venda
               <fs_ordem>-sfaksk   EQ '10' OR
               <fs_ordem>-ssperr   EQ '10' OR
               <fs_ordem>-slifsd2  EQ '10' ) OR
           ( ( <fs_ordem>-slifsk   EQ '12' OR <fs_ordem>-slifsp EQ '12') OR"negociação Comercial
               <fs_ordem>-sfaksk   EQ '12' OR
               <fs_ordem>-ssperr   EQ '12' OR
               <fs_ordem>-slifsd2  EQ '12' ) OR
           ( ( <fs_ordem>-slifsk   EQ '13' OR <fs_ordem>-slifsp EQ '13') OR"Transferencia de OV
               <fs_ordem>-sfaksk   EQ '13' OR
               <fs_ordem>-ssperr   EQ '13' OR
               <fs_ordem>-slifsd2  EQ '13' ) OR
           ( ( <fs_ordem>-slifsk   EQ '14' OR <fs_ordem>-slifsp EQ '14') OR"Cancelamento de OV
               <fs_ordem>-sfaksk   EQ '14' OR
               <fs_ordem>-ssperr   EQ '14' OR
               <fs_ordem>-slifsd2  EQ '14' ) OR
           ( ( <fs_ordem>-slifsk   EQ '18' OR <fs_ordem>-slifsp EQ '18') OR"Dep Ant Negociação ME
               <fs_ordem>-sfaksk   EQ '18' OR
               <fs_ordem>-ssperr   EQ '18' OR
               <fs_ordem>-slifsd2  EQ '18' ) OR
           ( ( <fs_ordem>-slifsk   EQ '19' OR <fs_ordem>-slifsp EQ '19') OR"Emenda carta Credito ME
               <fs_ordem>-sfaksk   EQ '19' OR
               <fs_ordem>-ssperr   EQ '19' OR
               <fs_ordem>-slifsd2  EQ '19' ) OR
           ( ( <fs_ordem>-slifsk   EQ '20' OR <fs_ordem>-slifsp EQ '20') OR"Licenças Exportaçao ME
               <fs_ordem>-sfaksk   EQ '20' OR
               <fs_ordem>-ssperr   EQ '20' OR
               <fs_ordem>-slifsd2  EQ '20' ) OR
           ( ( <fs_ordem>-slifsk   EQ '21' OR <fs_ordem>-slifsp EQ '21') OR"Alteração Documento ME.
               <fs_ordem>-sfaksk   EQ '21' OR
               <fs_ordem>-ssperr   EQ '21' OR
               <fs_ordem>-slifsd2  EQ '21' ) OR
           ( ( <fs_ordem>-slifsk   EQ '22' OR <fs_ordem>-slifsp EQ '22') OR"Consolidação OV ME.
               <fs_ordem>-sfaksk   EQ '22' OR
               <fs_ordem>-ssperr   EQ '22' OR
               <fs_ordem>-slifsd2  EQ '22' ) OR
           ( ( <fs_ordem>-slifsk   EQ '23' OR <fs_ordem>-slifsp EQ '23') OR"Instrução Produção ME.
               <fs_ordem>-sfaksk   EQ '23' OR
               <fs_ordem>-ssperr   EQ '23' OR
               <fs_ordem>-slifsd2  EQ '23' ).

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Comercial'.

        ENDIF.

        "Imprevistos da Loja
        IF ( ( <fs_ordem>-slifsk   EQ '03' OR <fs_ordem>-slifsp EQ '03') OR
               <fs_ordem>-sfaksk   EQ '03' OR
               <fs_ordem>-ssperr   EQ '03' OR
               <fs_ordem>-slifsd2  EQ '03' ).


          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Imprevistos Loja'.

        ENDIF.

        "Bloqueio Coleção
        IF ( ( <fs_ordem>-slifsk   EQ '04' OR <fs_ordem>-slifsp EQ '04') OR
               <fs_ordem>-sfaksk   EQ '04' OR
               <fs_ordem>-ssperr   EQ '04' OR
               <fs_ordem>-slifsd2  EQ '04' ) .

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Coleção'.

        ENDIF.

        "Bloqueio estação
        IF ( ( <fs_ordem>-slifsk   EQ '06' OR <fs_ordem>-slifsp EQ '06') OR
               <fs_ordem>-sfaksk   EQ '06' OR
               <fs_ordem>-ssperr   EQ '06' OR
               <fs_ordem>-slifsd2  EQ '06' )..

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Estação'.

        ENDIF.

        "Motivo Inconsistencias OV
        IF <fs_ordem>-scampo IS NOT INITIAL.
          "OR <fs_ordem>-menge  IS NOT INITIAL. ---> Alterado por Eduardo (SB) - Mover Inconsistência Menge para - Faturamento Item Parcial

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Inconsistências OV'.

        ENDIF.

        "Motivo Sourcing - Qualidade
        IF ( ( <fs_ordem>-slifsk   EQ '11' OR <fs_ordem>-slifsp EQ '11') OR"Inspeção Qualidade
               <fs_ordem>-sfaksk   EQ '11' OR
               <fs_ordem>-ssperr   EQ '11' OR
               <fs_ordem>-slifsd2  EQ '11' ) OR
           ( ( <fs_ordem>-slifsk   EQ '17' OR <fs_ordem>-slifsp EQ '17') OR"Bloqueio por Programação
               <fs_ordem>-sfaksk   EQ '17' OR
               <fs_ordem>-ssperr   EQ '17' OR
               <fs_ordem>-slifsd2  EQ '17' ).

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Qualidade'.

        ENDIF.


        "Motivo Fiscal
        IF ( ( <fs_ordem>-slifsk   EQ '15' OR <fs_ordem>-slifsp EQ '15') OR"Suframa Irregular
               <fs_ordem>-sfaksk   EQ '15' OR
               <fs_ordem>-ssperr   EQ '15' OR
               <fs_ordem>-slifsd2  EQ '15' OR
               <fs_ordem>-slifsd   EQ '15' ) OR
           ( ( <fs_ordem>-slifsk   EQ '16' OR <fs_ordem>-slifsp EQ '16') OR"Pendências Fiscais
               <fs_ordem>-sfaksk   EQ '16' OR
               <fs_ordem>-ssperr   EQ '16' OR
               <fs_ordem>-slifsd2  EQ '16' OR
               <fs_ordem>-slifsd   EQ '16' ).

          PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                       'Fiscal'.

        ENDIF.

        "---> Alterado por Eduardo (SB) -  Alteração ordem de bloqueio quando VKORG EQ 'VANS' 10-Data Bloqueada 11-Financeiro
        "--->IFs repetidos, pois trocam a ordem quando outras marcas
        IF <fs_ordem>-vkorg EQ '1111' OR <fs_ordem>-vkorg EQ '1211' OR <fs_ordem>-vkorg EQ '1511'.

          IF <fs_alvout2>-tipo_bloq IS INITIAL.
            IF <fs_ordem>-dt_lib_s_1 > sy-datum.

              <fs_alvout2>-lib_bloq  = 'BLOQUEADO'.
              <fs_alvout2>-tipo_bloq = 'Data Bloqueada'.
              IF <fs_alvout2>-bloqueios IS INITIAL.
                <fs_alvout2>-bloqueios = <fs_alvout2>-tipo_bloq.
              ELSE.
                CONCATENATE <fs_alvout2>-bloqueios
                            <fs_alvout2>-tipo_bloq
                       INTO <fs_alvout2>-bloqueios
                       SEPARATED BY '/'.
              ENDIF.
            ENDIF.
          ENDIF.

          "Motivo Financeiro
          IF ( <fs_ordem>-scmgst  EQ 'B' OR" ???
               <fs_ordem>-scmgst2 EQ 'B' ) OR
             ( <fs_ordem>-scmgst  EQ 'C' OR" ???
               <fs_ordem>-scmgst2 EQ 'C' ) OR
             ( ( <fs_ordem>-slifsk   EQ '24' OR <fs_ordem>-slifsp EQ '24') OR"Restrição Serasa
                 <fs_ordem>-sfaksk   EQ '24' OR
                 <fs_ordem>-ssperr   EQ '24' OR
                 <fs_ordem>-slifsd2  EQ '24' ) OR
             ( ( <fs_ordem>-slifsk   EQ '25' OR <fs_ordem>-slifsp EQ '25') OR"Inadimplencia
                 <fs_ordem>-sfaksk   EQ '25' OR
                 <fs_ordem>-ssperr   EQ '25' OR
                 <fs_ordem>-slifsd2  EQ '25' ) OR
             ( ( <fs_ordem>-slifsk   EQ '26' OR <fs_ordem>-slifsp EQ '26') OR"Restrição + Inadimplencia
                 <fs_ordem>-sfaksk   EQ '26' OR
                 <fs_ordem>-ssperr   EQ '26' OR
                 <fs_ordem>-slifsd2  EQ '26' ) OR
             ( ( <fs_ordem>-slifsk   EQ '27' OR <fs_ordem>-slifsp EQ '27') OR"Dep ant Negociação
                 <fs_ordem>-sfaksk   EQ '27' OR
                 <fs_ordem>-ssperr   EQ '27' OR
                 <fs_ordem>-slifsd2  EQ '27' ) OR
             ( ( <fs_ordem>-slifsk   EQ '28' OR <fs_ordem>-slifsp EQ '28') OR"Dep ant fundação
                 <fs_ordem>-sfaksk   EQ '28' OR
                 <fs_ordem>-ssperr   EQ '28' OR
                 <fs_ordem>-slifsd2  EQ '28' ) OR
             ( ( <fs_ordem>-slifsk   EQ '29' OR <fs_ordem>-slifsp EQ '29') OR"Limite de crédito
                 <fs_ordem>-sfaksk   EQ '29' OR
                 <fs_ordem>-ssperr   EQ '29' OR
                 <fs_ordem>-slifsd2  EQ '29' ).

            PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                         'Financeiro'.

          ENDIF.

          "Faturamento Item Parcial
          IF <fs_ordem>-status  EQ '@0A@'  AND
             <fs_ordem>-faksk   IS INITIAL AND
             <fs_ordem>-sfaksk  IS INITIAL AND
             <fs_ordem>-scmgst  IS INITIAL AND
             <fs_ordem>-scmgst2 IS INITIAL AND
             <fs_ordem>-slifsk  IS INITIAL AND
             <fs_ordem>-ssperr  IS INITIAL AND
             <fs_ordem>-slifsd  IS INITIAL AND "bloqueio completo no cliente.
             <fs_ordem>-slifsd2 IS INITIAL AND "bloqueio no cliente por area de vendas.
             <fs_ordem>-slifsp  IS INITIAL AND
             <fs_ordem>-sabgru  IS INITIAL AND
             <fs_ordem>-abgru   IS INITIAL AND
             <fs_ordem>-scampo  IS INITIAL.
            "AND <fs_ordem>-menge   IS INITIAL. ---> Alterado por Eduardo (SB) - Inconsistência MENGE deve entrar em Faturamento Item Parcial
            PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                         'Faturamento Item Parcial'.

          ENDIF.

        ELSE.
          "---> Alterado por Eduardo (SB) -  Alteração ordem de bloqueio quando VKORG NE 'VANS' 10-Financeiro 11-Data Bloqueada
          "Motivo Financeiro
          IF ( <fs_ordem>-scmgst  EQ 'B' OR" ???
               <fs_ordem>-scmgst2 EQ 'B' ) OR
             ( <fs_ordem>-scmgst  EQ 'C' OR" ???
               <fs_ordem>-scmgst2 EQ 'C' ) OR
             ( ( <fs_ordem>-slifsk   EQ '24' OR <fs_ordem>-slifsp EQ '24') OR"Restrição Serasa
                 <fs_ordem>-sfaksk   EQ '24' OR
                 <fs_ordem>-ssperr   EQ '24' OR
                 <fs_ordem>-slifsd2  EQ '24' ) OR
             ( ( <fs_ordem>-slifsk   EQ '25' OR <fs_ordem>-slifsp EQ '25') OR"Inadimplencia
                 <fs_ordem>-sfaksk   EQ '25' OR
                 <fs_ordem>-ssperr   EQ '25' OR
                 <fs_ordem>-slifsd2  EQ '25' ) OR
             ( ( <fs_ordem>-slifsk   EQ '26' OR <fs_ordem>-slifsp EQ '26') OR"Restrição + Inadimplencia
                 <fs_ordem>-sfaksk   EQ '26' OR
                 <fs_ordem>-ssperr   EQ '26' OR
                 <fs_ordem>-slifsd2  EQ '26' ) OR
             ( ( <fs_ordem>-slifsk   EQ '27' OR <fs_ordem>-slifsp EQ '27') OR"Dep ant Negociação
                 <fs_ordem>-sfaksk   EQ '27' OR
                 <fs_ordem>-ssperr   EQ '27' OR
                 <fs_ordem>-slifsd2  EQ '27' ) OR
             ( ( <fs_ordem>-slifsk   EQ '28' OR <fs_ordem>-slifsp EQ '28') OR"Dep ant fundação
                 <fs_ordem>-sfaksk   EQ '28' OR
                 <fs_ordem>-ssperr   EQ '28' OR
                 <fs_ordem>-slifsd2  EQ '28' ) OR
             ( ( <fs_ordem>-slifsk   EQ '29' OR <fs_ordem>-slifsp EQ '29') OR"Limite de crédito
                 <fs_ordem>-sfaksk   EQ '29' OR
                 <fs_ordem>-ssperr   EQ '29' OR
                 <fs_ordem>-slifsd2  EQ '29' ).

            PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                         'Financeiro'.

          ENDIF.

          "Faturamento Item Parcial
          IF <fs_ordem>-status  EQ '@0A@'  AND
             <fs_ordem>-faksk   IS INITIAL AND
             <fs_ordem>-sfaksk  IS INITIAL AND
             <fs_ordem>-scmgst  IS INITIAL AND
             <fs_ordem>-scmgst2 IS INITIAL AND
             <fs_ordem>-slifsk  IS INITIAL AND
             <fs_ordem>-ssperr  IS INITIAL AND
             <fs_ordem>-slifsd  IS INITIAL AND "bloqueio completo no cliente.
             <fs_ordem>-slifsd2 IS INITIAL AND "bloqueio no cliente por area de vendas.
             <fs_ordem>-slifsp  IS INITIAL AND
             <fs_ordem>-sabgru  IS INITIAL AND
             <fs_ordem>-abgru   IS INITIAL AND
             <fs_ordem>-scampo  IS INITIAL.
            "AND <fs_ordem>-menge   IS INITIAL. ---> Alterado por Eduardo (SB) - Inconsistência MENGE deve entrar em Faturamento Item Parcial
            PERFORM zf_add_fs_bloq USING 'BLOQUEADO'
                                         'Faturamento Item Parcial'.

          ENDIF.

          IF <fs_alvout2>-tipo_bloq IS INITIAL.
            IF <fs_ordem>-dt_lib_s_1 > sy-datum.

              <fs_alvout2>-lib_bloq  = 'BLOQUEADO'.
              <fs_alvout2>-tipo_bloq = 'Data Bloqueada'.
              IF <fs_alvout2>-bloqueios IS INITIAL.
                <fs_alvout2>-bloqueios = <fs_alvout2>-tipo_bloq.
              ELSE.
                CONCATENATE <fs_alvout2>-bloqueios
                            <fs_alvout2>-tipo_bloq
                       INTO <fs_alvout2>-bloqueios
                       SEPARATED BY '/'.
              ENDIF.
            ENDIF.
          ENDIF.

        ENDIF.

        "Motivo Data Bloqueada
        IF <fs_alvout2>-tipo_bloq IS INITIAL.
          <fs_alvout2>-lib_bloq  = 'LIBERADO'.
          IF <fs_ordem>-pstyv EQ 'YVOL'.

            <fs_alvout2>-tipo_bloq = 'Volume'.

          ELSEIF <fs_ordem>-matkl    EQ '010010000' AND
                 <fs_ordem>-matkl    EQ '010020000' AND
                 <fs_ordem>-grade    EQ 'XX'        AND
                 <fs_ordem>-j_3asean EQ '600'.

            <fs_alvout2>-tipo_bloq = 'Flowrack'.

          ELSE.

            <fs_alvout2>-tipo_bloq = 'Normal'.

          ENDIF.
          IF <fs_alvout2>-bloqueios IS INITIAL.
            <fs_alvout2>-bloqueios = <fs_alvout2>-tipo_bloq.
          ELSE.
            CONCATENATE <fs_alvout2>-bloqueios
                        <fs_alvout2>-tipo_bloq
                   INTO <fs_alvout2>-bloqueios
                   SEPARATED BY '/'.
          ENDIF.
        ENDIF.


        "Jairo 201712
        IF <fs_alvout2>-tipo_bloq EQ 'Normal'.
          IF <fs_ordem>-vtweg EQ '60' OR
             <fs_ordem>-vtweg EQ '61' OR
             <fs_ordem>-vtweg EQ '65'.
            <fs_alvout2>-lib_bloq  = 'BLOQUEADO'.
            <fs_alvout2>-tipo_bloq = 'Exportação'.
          ENDIF.

          IF <fs_alvout2>-bloqueios IS INITIAL.
            <fs_alvout2>-bloqueios = <fs_alvout2>-tipo_bloq.
          ELSE.
            CONCATENATE <fs_alvout2>-bloqueios
                        <fs_alvout2>-tipo_bloq
                   INTO <fs_alvout2>-bloqueios
                   SEPARATED BY '/'.
          ENDIF.

        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " ZF_ADD_TIPOS_BLOQUEIO

FORM zf_add_fs_bloq  USING p_b
                           p_tipo.

  IF <fs_alvout2>-lib_bloq IS INITIAL.
    <fs_alvout2>-lib_bloq  = p_b.
    <fs_alvout2>-tipo_bloq = p_tipo.
  ENDIF.
  IF <fs_alvout2>-bloqueios IS INITIAL.
    <fs_alvout2>-bloqueios = <fs_alvout2>-tipo_bloq.
  ELSE.
    CONCATENATE <fs_alvout2>-bloqueios
                "<fs_alvout2>-tipo_bloq -> Estava causando repetição no campo bloqueio
                "<fs_alvout2>-tipo_bloq contem o valor antigo, já presente no campo bloqueio
                "subistituido pelo parametro p_tipo que possui o novo valor
                p_tipo
           INTO <fs_alvout2>-bloqueios
           SEPARATED BY '/'.
  ENDIF.

ENDFORM.                    " ZF_ADD_FS_BLOQ

"Lucas Pereira - Squad Logística - 01/03/2022 - Fim.
FORM exibe_dados USING p_layout TYPE disvariant-variant.

  TYPES: BEGIN OF ty_aloc,
           stataloc     TYPE tp_alvout-stataloc,
           vbeln        TYPE vbeln,
           posnr        TYPE posnr,
           j_4krcat     TYPE tp_alvout-j_4krcat,
           j_3asize     TYPE tp_alvout-j_3asize,
         END OF ty_aloc,

         BEGIN OF ty_aloc_etq,
           stataloc_etq TYPE tp_alvout-stataloc_etq,
           vbeln        TYPE vbeln,
           posnr        TYPE posnr,
           j_4krcat     TYPE tp_alvout-j_4krcat,
           j_3asize     TYPE tp_alvout-j_3asize,
         END OF ty_aloc_etq,

         BEGIN OF ty_status,
           vbeln        TYPE vbeln,
           posnr        TYPE posnr,
           j_4krcat     TYPE tp_alvout-j_4krcat,
           status       TYPE tp_alvout2-status,
           j_3asize     TYPE tp_alvout-j_3asize,
           stataloc     TYPE tp_alvout-stataloc,
           stataloc_etq TYPE tp_alvout-stataloc_etq,
         END OF ty_status,

         BEGIN OF ty_stat_sum,
           vbeln      TYPE vbeln,
           status     TYPE tp_alvout2-status,
         END OF ty_stat_sum.

  DATA:
    ls_layo    TYPE lvc_s_layo,
    lt_fcat    TYPE STANDARD TABLE OF lvc_s_fcat,
    lt_excl    TYPE ui_functions,
    ls_variant TYPE disvariant,
    lt_alvout2 TYPE TABLE OF tp_alvout2,
    ls_out     LIKE LINE OF lt_alvout2,
    lt_no_sum  TYPE TABLE OF tp_no_sum,
    ls_no_sum  LIKE LINE OF lt_no_sum,
    lt_aloc    TYPE TABLE OF ty_aloc,
    lt_aloc_etq TYPE TABLE OF ty_aloc_etq,
    lt_status  TYPE TABLE OF ty_status,
    lt_stat_sum TYPE TABLE OF ty_stat_sum,
    lt_stat_sum_aux TYPE TABLE OF ty_stat_sum,
    ls_stat_sum LIKE LINE OF lt_stat_sum,
    ls_aloc    LIKE LINE OF lt_aloc,
    ls_aloc_etq LIKE LINE OF lt_aloc_etq,
    ls_status  LIKE LINE OF lt_status,
    lt_alvout_rem TYPE TABLE OF tp_alvout2.


  FIELD-SYMBOLS:
    <fs_alv>    TYPE ANY TABLE,
    <alvout>    LIKE LINE OF t_alvout,
    <out>       LIKE LINE OF t_alvout2,
    <collect>   LIKE LINE OF t_alvout2,
    <fs_fcat>   LIKE LINE OF lt_fcat,
    <fs_konv>   LIKE LINE OF t_konv.

  " Call monitor report
  SKIP.

  IF go_grid IS INITIAL.

    " Create ALV
    CREATE OBJECT go_grid
      EXPORTING
        i_parent          = cl_gui_container=>default_screen
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      RETURN.
    ENDIF.

    PERFORM alv_remove_botoes CHANGING lt_excl.

    " Exibe o ALV
    ls_layo-sel_mode   = c_a.
    ls_layo-zebra      = abap_true.
    ls_layo-cwidth_opt = c_a.

    " Habilita o botão Layout Exibição
    ls_variant-report = sy-repid.

    " Atribuição Layout ALV
    ls_variant-variant = p_layout.

    CLEAR lt_fcat[].
    PERFORM fieldcat_init CHANGING lt_fcat.
    DATA: t_alvout2_aux TYPE TABLE OF tp_alvout2.

    FREE: t_alvout2, lt_no_sum, lt_aloc, lt_status, lt_aloc_etq, lt_stat_sum.

    PERFORM zf_progress_ind USING text-i05 10 100.


    LOOP AT t_alvout ASSIGNING <alvout>.
      CLEAR: ls_out, ls_no_sum.
      MOVE-CORRESPONDING <alvout> TO: ls_out,
                                      ls_no_sum.

      APPEND ls_no_sum TO lt_no_sum.
      IF ls_out-vrkme = 'GRD' OR ls_out-pstyv = 'ZGRD'. "ls_out-j_4krcat = 'XX'.
        CONTINUE.
      ELSEIF ls_out-j_4krcat = 'XX'.
        MOVE-CORRESPONDING <alvout> TO: ls_aloc,
                                        ls_aloc_etq,
                                        ls_status.

        COLLECT: ls_aloc      INTO lt_aloc,
                 ls_aloc_etq  INTO lt_aloc_etq,
                 ls_status    INTO lt_status.

        CLEAR: ls_out-status.

        COLLECT ls_out INTO t_alvout2 ASSIGNING <collect>.
        IF <collect> IS ASSIGNED.
          <collect>-mt_zpvb2 = ls_out-mt_zpvb2.
          <collect>-mt_zapi2 = ls_out-mt_zapi2.
          <collect>-mt_zicp2 = ls_out-mt_zicp2.
          <collect>-mt_zdsc2 = ls_out-mt_zdsc2.
          <collect>-mt_ziib2 = ls_out-mt_ziib2.
          <collect>-mt_zinf2 = ls_out-mt_zinf2.
          <collect>-mt_zroy2 = ls_out-mt_zroy2.
          <collect>-mt_zfpr2 = ls_out-mt_zfpr2.
          <collect>-mt_zcom2 = ls_out-mt_zcom2.
          <collect>-mt_zpnf2 = ls_out-mt_zpnf2.
          <collect>-mt_ztpv2 = ls_out-mt_ztpv2.
          UNASSIGN <collect>.
        ENDIF.
      ELSE.
        MOVE-CORRESPONDING <alvout> TO: ls_status.

        COLLECT: ls_status    INTO lt_status.

        CLEAR: ls_out-status,
               ls_out-j_3asize.

        COLLECT ls_out INTO t_alvout2 ASSIGNING <collect>.
        IF <collect> IS ASSIGNED.
          <collect>-mt_zpvb2 = ls_out-mt_zpvb2.
          <collect>-mt_zapi2 = ls_out-mt_zapi2.
          <collect>-mt_zicp2 = ls_out-mt_zicp2.
          <collect>-mt_zdsc2 = ls_out-mt_zdsc2.
          <collect>-mt_ziib2 = ls_out-mt_ziib2.
          <collect>-mt_zinf2 = ls_out-mt_zinf2.
          <collect>-mt_zroy2 = ls_out-mt_zroy2.
          <collect>-mt_zfpr2 = ls_out-mt_zfpr2.
          <collect>-mt_zcom2 = ls_out-mt_zcom2.
          <collect>-mt_zpnf2 = ls_out-mt_zpnf2.
          <collect>-mt_ztpv2 = ls_out-mt_ztpv2.
          UNASSIGN <collect>.
        ENDIF.
      ENDIF.
    ENDLOOP.

    DATA: lv_lines          TYPE i.

    SORT: "lt_aloc     ASCENDING,
          "lt_aloc_etq ASCENDING,
          lt_stat_sum ASCENDING.

    DELETE ADJACENT DUPLICATES FROM: lt_aloc      COMPARING ALL FIELDS,
                                     lt_aloc_etq  COMPARING ALL FIELDS,
                                     lt_stat_sum  COMPARING ALL FIELDS.

    SORT: lt_no_sum   BY vbeln posnr ,
          lt_status   BY vbeln posnr j_4krcat stataloc stataloc_etq.

    FREE: t_alvout2_aux.
    LOOP AT t_alvout2 INTO ls_out.

      READ TABLE lt_no_sum INTO ls_no_sum WITH KEY vbeln    = ls_out-vbeln
                                                   posnr    = ls_out-posnr
                                                   BINARY SEARCH.
      IF sy-subrc = 0 AND ls_out-wmeng IS NOT INITIAL.
        MOVE-CORRESPONDING ls_no_sum TO ls_out.
      ENDIF.

      READ TABLE lt_status INTO ls_status
        WITH KEY  vbeln         = ls_out-vbeln
                  posnr         = ls_out-posnr
                  j_4krcat      = ls_out-j_4krcat
                  stataloc      = ls_out-stataloc
                  stataloc_etq  = ls_out-stataloc_etq
                  "j_3asize      = ls_out-j_3asize
                  BINARY SEARCH.
      IF sy-subrc = 0.
        ls_out-status = ls_status-status.
      ENDIF.


      APPEND ls_out TO t_alvout2_aux.
    ENDLOOP.

    DATA: lv_tabix TYPE syst-tabix.
    lt_alvout_rem = t_alvout2_aux.
    DELETE lt_alvout_rem WHERE numrem IS INITIAL.

    SORT lt_alvout_rem BY vbeln posnr j_3asize j_4krcat.

    LOOP AT t_alvout2_aux INTO ls_out WHERE numrem IS INITIAL
                                        AND j_4krcat NE 'XX'.
      lv_tabix = sy-tabix.
      READ TABLE lt_alvout_rem ASSIGNING <out> WITH KEY vbeln     = ls_out-vbeln
                                                        posnr     = ls_out-posnr
                                                        j_3asize  = ls_out-j_3asize
                                                        j_4krcat  = ls_out-j_4krcat
                                                        BINARY SEARCH.
      IF sy-subrc = 0.
        DELETE t_alvout2_aux INDEX lv_tabix.

        ls_out-numrem = <out>-numrem.
        COLLECT ls_out INTO t_alvout2_aux.
      ENDIF.
    ENDLOOP.

    PERFORM zf_progress_ind USING text-i06 90 100.

    t_alvout2[] = t_alvout2_aux[].

    CLEAR: t_alvout2_aux, lt_stat_sum.
    LOOP AT t_alvout2 ASSIGNING <out>.
      CLEAR ls_stat_sum.
      MOVE-CORRESPONDING <out> TO ls_stat_sum.

      COLLECT ls_stat_sum INTO lt_stat_sum.

    ENDLOOP.

    lt_stat_sum_aux = lt_stat_sum.
    SORT lt_stat_sum_aux BY vbeln status.

    LOOP AT t_alvout2 ASSIGNING <out>.

      CLEAR lv_lines.
      READ TABLE lt_stat_sum_aux TRANSPORTING NO FIELDS WITH KEY vbeln = <out>-vbeln BINARY SEARCH.
      IF sy-subrc IS INITIAL.
        LOOP AT lt_stat_sum_aux INTO ls_stat_sum FROM sy-tabix.
          IF ls_stat_sum-vbeln NE <out>-vbeln.
            EXIT.
          ENDIF.
          ADD 1 TO lv_lines.
        ENDLOOP.
      ENDIF.
      IF lv_lines = 1.
        READ TABLE lt_stat_sum_aux INTO ls_stat_sum WITH KEY vbeln = <out>-vbeln.
        IF sy-subrc = 0.
          CASE ls_stat_sum-status.
            WHEN 'FAT' OR 'CANC'.
              <out>-stat_ord = ls_stat_sum-status.
            WHEN OTHERS.
              <out>-stat_ord = 'NFAT'.
          ENDCASE.
        ENDIF.
      ELSE.
        IF lv_lines = 2.
          READ TABLE lt_stat_sum_aux TRANSPORTING NO FIELDS
            WITH KEY vbeln  = <out>-vbeln
                     status = 'FAT'.
          IF sy-subrc = 0.
            READ TABLE lt_stat_sum_aux TRANSPORTING NO FIELDS
            WITH KEY vbeln  = <out>-vbeln
                     status = 'CANC'.
            IF sy-subrc = 0.
              <out>-stat_ord = 'FAT'.
            ELSE.
              <out>-stat_ord = 'NFAT'.
            ENDIF.
          ELSE.
            <out>-stat_ord = 'NFAT'.
          ENDIF.
        ELSE.
          <out>-stat_ord = 'NFAT'.
        ENDIF.
      ENDIF.
    ENDLOOP.

    PERFORM add_dados_status.

    "BRAIN CONSULTING - Squad Logística - Lucas Pereira - 21/04/2022 - Início.
    PERFORM f_validar_dados.
    "BRAIN CONSULTING - Squad Logística - Lucas Pereira - 21/04/2022 - Fim.

    SORT   t_alvout2 BY vbeln.
    ASSIGN t_alvout2 TO <fs_alv>.

    PERFORM zf_insere_bd.
    ">>> SB - Adilson - 24/03/2022
    PERFORM zf_contratos.

    PERFORM zf_info_cancelado IN PROGRAM (sy-repid) IF FOUND. "Sinosbyte Adilson - 13.03.2023

****">>>> SBYTE - Diego - Correção na gravação do horario ultima execução.
    PERFORM zf_grava_ultima_execucao.
    PERFORM zf_progress_ind USING text-i12 99 100.
****"<<<< SBYTE - Diego - Correção na gravação do horario ultima execução.

    IF p_alv = ''.
      LEAVE PROGRAM.
    ENDIF.
    "<<< SB - Adilson - 24/03/2022
    CALL METHOD go_grid->set_table_for_first_display
      EXPORTING
        is_variant                    = ls_variant
        is_layout                     = ls_layo
        i_save                        = c_a
        it_toolbar_excluding          = lt_excl
      CHANGING
        it_outtab                     = <fs_alv>
        it_fieldcatalog               = lt_fcat
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      RETURN.
    ENDIF.

    " Ativa modo de entrada
    CALL METHOD go_grid->set_ready_for_input.

    " Cria o handler de enventos
    CREATE OBJECT go_handler.

    " Registra os eventos
    SET HANDLER go_handler->toolbar FOR go_grid.
    SET HANDLER go_handler->hotspot FOR go_grid.

  ELSE.

    " Atualiza ALV
    CALL METHOD go_grid->refresh_table_display.

  ENDIF.

  CALL FUNCTION 'ZFM_SD_DEL_GERAL'
    STARTING NEW TASK 'DEL1'
    DESTINATION 'NONE'.

ENDFORM.                    " EXIBE_DADOS

"BRAIN CONSULTING - Squad Logística - Lucas Pereira - 21/04/2022 - Início.
FORM f_validar_dados.
  DATA: lt_alvout2 TYPE TABLE OF tp_alvout2,
        ls_alvout2 TYPE tp_alvout2,
        ls_tvarv TYPE  tvarv,
        lv_bmeng   TYPE menge_d.

  DATA: lv_validar_dados  TYPE rvari_val_255,
        lo_helper_tvarv TYPE REF TO zcl_helper_tvarv.

  CONSTANTS: lc_validar_dados TYPE rvari_vnam VALUE 'ZRSD_128_CHECK_STATUS_QTD'.

  SELECT SINGLE low
      INTO ls_tvarv
      FROM tvarvc
      WHERE name EQ 'ZSD_TYPE_CONTRACT'
      AND   type EQ 'P'.

  CREATE OBJECT lo_helper_tvarv.
  CHECK lo_helper_tvarv IS BOUND.

  lv_validar_dados = lo_helper_tvarv->get_single( i_nome = lc_validar_dados  ).

  CHECK lv_validar_dados = abap_true.

  LOOP AT t_alvout2 INTO ls_alvout2.
    IF ls_alvout2-stataloc = 'F'.
      CLEAR: ls_alvout2-numfat,
             ls_alvout2-datfat,
             ls_alvout2-fkimg,
             ls_alvout2-nfenum,
             ls_alvout2-menge,
             ls_alvout2-numrem,
             ls_alvout2-lfimg,
*             ls_alvout2-bmeng,
             ls_alvout2-datrem.
    ENDIF.

    IF ls_alvout2-auart <> 'ZKM'.
      IF  ls_alvout2-numfat IS NOT INITIAL AND ls_alvout2-nfenum IS INITIAL.
        CLEAR: ls_alvout2-numfat, ls_alvout2-datfat, ls_alvout2-fkimg.
        IF ls_alvout2-numfat IS INITIAL AND ls_alvout2-stataloc IS INITIAL AND ls_alvout2-stataloc2 IS INITIAL.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDIF.

    CLEAR ls_alvout2-status.

    IF ls_alvout2-fkimg > 0.
      ls_alvout2-status = 'FAT'.
    ELSEIF ls_alvout2-j_3aabgru IS NOT INITIAL
        OR ls_alvout2-abgru IS NOT INITIAL.
      ls_alvout2-status = 'CANC'.
    ELSEIF ls_alvout2-lfimg > 0 .
      ls_alvout2-status = 'REM'.
    ELSEIF ls_alvout2-stataloc = 'F'.
      ls_alvout2-status = 'FIXA'.
    ELSE.
      IF ls_alvout2-pstyv IN gr_catipts.
        CASE ls_alvout2-stataloc.
          WHEN 'F'.
            ls_alvout2-status = 'FIXA'.
          WHEN 'R'.
            IF ls_alvout2-auart = 'ZKM' AND ls_alvout2-stataloc_etq = 'C'.
              ls_alvout2-status = 'FIXA'.
            ELSE.
              ls_alvout2-status = 'RESE'.
            ENDIF.
          WHEN OTHERS.
            IF ls_alvout2-stataloc IS INITIAL.
              IF ls_alvout2-pstyv IN gr_caticon.
                ls_alvout2-status = 'ATE'.
              ELSE.
                ls_alvout2-status = 'NPROC'.
              ENDIF.
            ENDIF.
        ENDCASE.

      ELSEIF ls_alvout2-pstyv IN gr_catioth. ">>> Eduardo (SB) - 14.01.2022 - 2022004 - Parametrização PSTYV
        IF ls_alvout2-kalab > 0.
          ls_alvout2-status = 'FIXA'.
        ELSEIF ls_alvout2-pedcomp IS NOT INITIAL.
          ls_alvout2-status = 'RESE'.
        ENDIF.
      ELSE.
        ls_alvout2-status = 'NPROC'.
      ENDIF.
    ENDIF.

    IF ls_alvout2-status IS INITIAL.
      ls_alvout2-status = 'NPROC'.
    ENDIF.


    IF ls_alvout2-stataloc = 'D'.
      IF ls_alvout2-numfat IS NOT INITIAL.
        CLEAR: ls_alvout2-lfimg.
        ls_alvout2-wmeng = ls_alvout2-fkimg.
      ELSEIF ls_alvout2-numrem IS NOT INITIAL.
        ls_alvout2-wmeng  = ls_alvout2-lfimg.
      ENDIF.
    ELSE.
      IF ls_alvout2-numfat IS NOT INITIAL.
        ls_alvout2-status = 'FAT'.
        IF ls_alvout2-wmeng = 0 AND ls_alvout2-bmeng = 0.
          ls_alvout2-wmeng = ls_alvout2-lfimg.
          ls_alvout2-bmeng = ls_alvout2-lfimg.
        ENDIF.
      ELSE.
        IF ls_alvout2-numrem IS NOT INITIAL AND ls_alvout2-wmeng <> ls_alvout2-lfimg.
          ls_alvout2-lfimg = ls_alvout2-wmeng.
        ENDIF.
      ENDIF.
    ENDIF.
    IF ls_alvout2-fkimg IS NOT INITIAL.
      ls_alvout2-bmeng = ls_alvout2-fkimg.
      CLEAR: ls_alvout2-lfimg.
    ELSEIF ls_alvout2-lfimg IS NOT INITIAL.
      ls_alvout2-bmeng = ls_alvout2-lfimg.
    ELSE.
      ls_alvout2-bmeng = ls_alvout2-wmeng.
    ENDIF.
    ls_alvout2-wmeng = ls_alvout2-bmeng.

    IF ls_alvout2-status = 'CANC' AND ls_alvout2-auart <> ls_tvarv-name. " Sbyte Adilson - 22.02.2023 - ECDK9A01OS
      ls_alvout2-bmeng = 0.
    ENDIF.

    APPEND ls_alvout2 TO lt_alvout2.
    CLEAR: lv_bmeng.
  ENDLOOP.

  t_alvout2 = lt_alvout2.
ENDFORM.                    "f_validar_dados
"BRAIN CONSULTING - Squad Logística - Lucas Pereira - 21/04/2022 - Fim

FORM f_alv_f4  USING p_layout TYPE disvariant-variant.

  DATA: lv_alv_variant  TYPE disvariant,
        lv_save         TYPE char1.

  AUTHORITY-CHECK OBJECT 'S_ALV_LAYO'
    ID 'ACTVT' FIELD '23'.

  IF sy-subrc IS INITIAL.
*   user is authorized to maintain system wide variants
    lv_save = c_a.
  ELSE.
*   user can only save variants for him/herself
    lv_save = c_u.
  ENDIF.

  CLEAR lv_alv_variant.
  lv_alv_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = lv_alv_variant
      i_save     = lv_save
    IMPORTING
      es_variant = lv_alv_variant
    EXCEPTIONS
      not_found  = 2.

  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE c_s NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    p_layout = lv_alv_variant-variant.
  ENDIF.

ENDFORM.                    " F_ALV_F4

FORM alv_toolbar USING i_object TYPE REF TO cl_alv_event_toolbar_set.

  DATA: ls_toolbar TYPE stb_button.

  CLEAR ls_toolbar.
  ls_toolbar-butn_type = 3.
  APPEND ls_toolbar TO i_object->mt_toolbar.

ENDFORM.                    " ALV_TOOLBAR
FORM alv_remove_botoes CHANGING lt_excl TYPE ui_functions.

  APPEND cl_gui_alv_grid=>mc_fc_check          TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_loc_cut        TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy       TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_mb_paste          TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_loc_undo       TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_loc_append_row TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_refresh        TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy_row   TO lt_excl.
  APPEND cl_gui_alv_grid=>mc_fc_info           TO lt_excl.

ENDFORM.                    " ALV_REMOVE_BOTOES
FORM fieldcat_init CHANGING lt_fcat TYPE lvc_t_fcat. "lvc_t_fcat.

  DATA: lo_struct TYPE REF TO cl_abap_structdescr,
        lt_comp   TYPE abap_component_tab,
        ls_comp   TYPE abap_componentdescr,
        ls_fcat   LIKE LINE OF lt_fcat,
        r_val     TYPE dd04v,
        lv_name   TYPE ddobjname,
        ls_out    TYPE tp_alvout2.

  FIELD-SYMBOLS: <fs_fcat> TYPE lvc_s_fcat.

  lo_struct ?= cl_abap_typedescr=>describe_by_data( ls_out ).
  lt_comp    = lo_struct->get_components( ).

  FREE lt_fcat.
  LOOP AT lt_comp INTO ls_comp.

    lv_name = ls_comp-type->absolute_name+6.

    CALL FUNCTION 'DDIF_DTEL_GET'
      EXPORTING
        name          = lv_name
        state         = 'A'
        langu         = sy-langu
      IMPORTING
        dd04v_wa      = r_val
      EXCEPTIONS
        illegal_input = 1
        OTHERS        = 2.

    CLEAR ls_fcat.
    ls_fcat-fieldname = ls_comp-name.
    ls_fcat-col_opt   = 'X'.
    ls_fcat-outputlen = r_val-outputlen.
    ls_fcat-intlen    = r_val-outputlen.
    ls_fcat-coltext   = r_val-reptext.
    ls_fcat-reptext   = r_val-reptext.
    ls_fcat-scrtext_s = r_val-scrtext_s.
    ls_fcat-scrtext_m = r_val-scrtext_m.
    ls_fcat-scrtext_l = r_val-scrtext_l.

    APPEND ls_fcat TO lt_fcat.
  ENDLOOP.

  LOOP AT lt_fcat ASSIGNING <fs_fcat>.

    CASE <fs_fcat>-fieldname.
      WHEN 'VBELN'.
        <fs_fcat>-hotspot   = 'X'.
        <fs_fcat>-convexit  = 'ALPHA'.
      WHEN 'NAME1'.
        <fs_fcat>-coltext = 'Nome Cliente'.
      WHEN 'KUNNR1'.
        <fs_fcat>-convexit  = 'ALPHA'.
      WHEN 'PARVW1'.
        <fs_fcat>-coltext = 'Desp.Origem'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW2'.
        <fs_fcat>-coltext = 'Desp.Destino'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW3'.
        <fs_fcat>-coltext = 'Repre./Consultor'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW4'.
        <fs_fcat>-coltext = 'Anjo'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW5'.
        <fs_fcat>-coltext = 'Coordenador/Superv.'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW6'.
        <fs_fcat>-coltext = 'Loja Matriz'.
        <fs_fcat>-hotspot = 'X'.
        <fs_fcat>-convexit  = 'ALPHA'.
      WHEN 'PARVW7'.
        <fs_fcat>-coltext = 'Loja Antiga'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW8'.
        <fs_fcat>-coltext = 'Agente'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW9'.
        <fs_fcat>-coltext = 'Notefy'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW10'.
        <fs_fcat>-coltext = 'Consignee'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW11'.
        <fs_fcat>-coltext = 'ARZZ'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW12'.
        <fs_fcat>-coltext = 'Ag.Logístico'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW13'.
        <fs_fcat>-coltext = 'Transp./Redespacho'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'PARVW14'.
        <fs_fcat>-coltext = 'Emissor da Ordem'.
        <fs_fcat>-hotspot = 'X'.
        <fs_fcat>-convexit  = 'ALPHA'.
      WHEN 'PARVW15'.
        <fs_fcat>-coltext = 'Recebedor da Fatura'.
        <fs_fcat>-hotspot = 'X'.
        <fs_fcat>-convexit  = 'ALPHA'.
      WHEN 'PARVW16'.
        <fs_fcat>-coltext = 'Pagador'.
        <fs_fcat>-hotspot = 'X'.
        <fs_fcat>-convexit  = 'ALPHA'.
      WHEN 'PARVW1_TXT'.
        <fs_fcat>-coltext = 'Nome Desp.Origem'.
      WHEN 'PARVW2_TXT'.
        <fs_fcat>-coltext = 'Nome Desp.Destino'.
      WHEN 'PARVW3_TXT'.
        <fs_fcat>-coltext = 'Nome Repre./Consultor'.
      WHEN 'PARVW4_TXT'.
        <fs_fcat>-coltext = 'Nome Anjo'.
      WHEN 'PARVW5_TXT'.
        <fs_fcat>-coltext = 'Nome Coordenador/Superv.'.
      WHEN 'PARVW6_TXT'.
        <fs_fcat>-coltext = 'Nome Loja Matriz'.
      WHEN 'PARVW7_TXT'.
        <fs_fcat>-coltext = 'Nome Loja Antiga'.
      WHEN 'PARVW8_TXT'.
        <fs_fcat>-coltext = 'Nome Agente'.
      WHEN 'PARVW9_TXT'.
        <fs_fcat>-coltext = 'Nome Notefy'.
      WHEN 'PARVW10_TXT'.
        <fs_fcat>-coltext = 'Nome Consignee'.
      WHEN 'PARVW11_TXT'.
        <fs_fcat>-coltext = 'Nome ARZZ'.
      WHEN 'PARVW12_TXT'.
        <fs_fcat>-coltext = 'Nome Ag.Logístico'.
      WHEN 'PARVW13_TXT'.
        <fs_fcat>-coltext = 'Nome Transp./Redespacho'.
      WHEN 'PARVW14_TXT'.
        <fs_fcat>-coltext = 'Nome Emissor da Ordem'.
      WHEN 'PARVW15_TXT'.
        <fs_fcat>-coltext = 'Nome Recebedor da Fatura'.
      WHEN 'PARVW16_TXT'.
        <fs_fcat>-coltext = 'Nome Pagador'.
      WHEN '/AFS/THEME'.
        <fs_fcat>-coltext = 'Tema'.
      WHEN 'MTORG'.
        <fs_fcat>-coltext = 'Origem do Material'.
      WHEN 'MVGR4'.
        <fs_fcat>-coltext = 'Grp.Cor'.
      WHEN 'SUBDESC'.
        <fs_fcat>-coltext = 'Sub.Descrição'.
      WHEN 'NETPRVEN'.
        <fs_fcat>-coltext = 'Val.Liq.Item da O.V'.
      WHEN 'NUMREM'.
        <fs_fcat>-coltext = 'Remessa'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'DATREM'.
        <fs_fcat>-coltext = 'Dt.Remessa'.
      WHEN 'ITMREM'.
        <fs_fcat>-coltext = 'Itm.Remessa'.
      WHEN 'MATREM'.
        <fs_fcat>-coltext = 'Mat.Remessa'.
      WHEN 'J_4KSCAT'.
        <fs_fcat>-coltext = 'Categ.Est.Remessa'.
      WHEN 'FAKSP'.
        <fs_fcat>-coltext = 'Bloq.Fat.Itm Remessa'.
      WHEN 'FAKSK'.
        <fs_fcat>-coltext = 'Bloq.Tip.doc.Faturamento'.
      WHEN 'NUMFAT'.
        <fs_fcat>-coltext = 'Fatura'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'DATFAT'.
        <fs_fcat>-coltext = 'Dt.Fatura'.
      WHEN 'ITMFAT'.
        <fs_fcat>-coltext = 'Itm.Fatura'.
      WHEN 'FKIMG'.
        <fs_fcat>-coltext = 'Qtd.Fatura'.
      WHEN 'MEINSFAT'.
        <fs_fcat>-coltext = 'Un.Med.Fatura'.
      WHEN 'MATRIZFAT'.
        <fs_fcat>-coltext = 'Matriz Fat.'.
      WHEN 'CATESTFAT'.
        <fs_fcat>-coltext = 'Cat.Est.Fatura'.
      WHEN 'VLRLIQITMFAT'.
        <fs_fcat>-coltext = 'Val.Liq.Itm.Fatura'.
      WHEN 'VLRBRTITMFAT'.
        CLEAR <fs_fcat>.
      WHEN 'VLRLIQFAT'.
        <fs_fcat>-coltext = 'Val.Liq..Fatura'.
      WHEN 'VLRBRTFAT'.
        CLEAR <fs_fcat>.
      WHEN 'VLRLIQITMORD'.
        <fs_fcat>-coltext = 'Val.Liq.Itm.Ordem'.
      WHEN 'VLRBRTITMORD'.
        CLEAR <fs_fcat>.
      WHEN 'VLRLIQORD'.
        <fs_fcat>-coltext = 'Val.Liq.Ordem'.
      WHEN 'VLRBRTORD'.
        CLEAR <fs_fcat>.
      WHEN 'FATPROFORD'.
        <fs_fcat>-coltext = 'Proforma.Ordem'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'FATPROFREM'.
        <fs_fcat>-coltext = 'Proforma Remessa'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'ESTFAT'.
        CLEAR <fs_fcat>.
      WHEN 'NFENUM'.
        <fs_fcat>-coltext = 'NºNF-e'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'DATANF'.
        <fs_fcat>-coltext = 'Dt.NF-e'.
      WHEN 'MENGE'.
        <fs_fcat>-coltext = 'Qtd.NF-e'.
      WHEN 'MEINSNF'.
        <fs_fcat>-coltext = 'Un.Med.NF-e'.
      WHEN 'NETPRNF'.
        <fs_fcat>-coltext = 'Val.Liq.NFe'.
      WHEN 'VALBRTNF'.
        <fs_fcat>-coltext = 'Val.Brt.NFe'.
      WHEN 'DOCVEN'.
        <fs_fcat>-coltext = 'Doc.Contabil Venda'.
      WHEN 'ORDEMDEV'.
        <fs_fcat>-coltext = 'Ord.Devolução'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'REMDEV'.
        <fs_fcat>-coltext = 'Rem.Devolução'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'FATDEV'.
        <fs_fcat>-coltext = 'Fat.Devolução'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'CONTDEV'.
        <fs_fcat>-coltext = 'Doc.Contábil Devolução'.
      WHEN 'PEDCOMP'.
        <fs_fcat>-coltext = 'Nº Estoque'.
        <fs_fcat>-hotspot = 'X'.
      WHEN 'STATALOC'.
        <fs_fcat>-coltext = 'Stat.Alocação MRP'.
      WHEN 'STATALOC2'.
        <fs_fcat>-coltext = 'Stat.Alocação MRP'.
        <fs_fcat>-no_out  = 'X'.
      WHEN 'STATALOC_TXT'.
        <fs_fcat>-coltext = 'Txt. Stat.Alocação MRP'.
      WHEN 'STATALOC_OV_TXT'.
        <fs_fcat>-coltext = 'Txt. Stat.Alocação OV'.
      WHEN 'STATALOC_OV'.
        <fs_fcat>-coltext = 'Stat.Alocação OV'.
      WHEN 'STATALOC_ETQ_TXT'.
        <fs_fcat>-coltext = 'Txt. Stat.Alocação Estq.'.
      WHEN 'STATALOC_ETQ'.
        <fs_fcat>-coltext = 'Stat.Alocação Estq.'.
      WHEN 'STATALOC_ETQ2'.
        <fs_fcat>-coltext = 'Stat.Alocação Estq.'.
        <fs_fcat>-no_out  = 'X'.
      WHEN 'PESLIQORD'.
        <fs_fcat>-coltext = 'Peso Liq.Ordem '.
      WHEN 'PESBRTORD'.
        <fs_fcat>-coltext = 'Peso Brt.Itm.Ordem'.
      WHEN 'PESLIQREM'.
        <fs_fcat>-coltext = 'Peso Liq.Remessa '.
      WHEN 'PESBRTREM'.
        <fs_fcat>-coltext = 'Peso Brt.Remessa'.
      WHEN 'VKORG_TXT'.
        <fs_fcat>-coltext = 'Desc. Org. Vendas'.
      WHEN 'VTWEG_TXT'.
        <fs_fcat>-coltext = 'Desc. Canal Distr.'.
      WHEN 'SPART_TXT'.
        <fs_fcat>-coltext = 'Desc. Setor Ativ.'.
      WHEN 'VKBUR_TXT'.
        <fs_fcat>-coltext = 'Desc. Escr. Vendas'.
      WHEN 'VKGRP_TXT'.
        <fs_fcat>-coltext = 'Desc. Eq. Vendas'.
      WHEN 'KDGRP_TXT'.
        <fs_fcat>-coltext = 'Desc. Cat. Cliente'.
      WHEN 'J_4KRCAT'.
        <fs_fcat>-coltext = 'Grade OV'.
      WHEN 'BZIRK_TXT'.
        <fs_fcat>-coltext = 'Desc. Região de vendas'.
      WHEN 'VL_ZPVL'.
        <fs_fcat>-coltext = 'Unit. PVL'.
      WHEN 'MT_ZPVL'.
        <fs_fcat>-coltext = 'Valor PVL'.
      WHEN 'VL_ZPVB'.
        <fs_fcat>-coltext = 'Vlr. PV Base'.
      WHEN 'MT_ZPVB'.
        <fs_fcat>-coltext = '% Mark-up'.
      WHEN 'MT_ICBS'.                      "CPOSE
        <fs_fcat>-coltext = 'Mon. ICBS'.  "CPOSE
      WHEN 'VL_ZICP'.
        <fs_fcat>-coltext = 'Vlr. Desc. Cond. Pag.'.
      WHEN 'MT_ZICP'.
        <fs_fcat>-coltext = '% Desc. Cond. Pag.'.
      WHEN 'VL_ZIIB'.
        <fs_fcat>-coltext = 'Vlr. ZIIB'.
      WHEN 'MT_ZIIB'.
        <fs_fcat>-coltext = '% ICMS(ZIIB)'.
      WHEN 'VL_ZINF'.
        <fs_fcat>-coltext = 'Vlr. NF(ZINF)'.
      WHEN 'MT_ZINF'.
        <fs_fcat>-coltext = '% NF s/ PV (ZINF)'.
      WHEN 'VL_ZTPV'.
        <fs_fcat>-coltext = 'Vlr. Total NF(ZTPV)'.
      WHEN 'MT_ZTPV'.
        <fs_fcat>-coltext = 'Vlr. Unit. NF(ZTPV)'.
      WHEN 'VL_VPRS'.
        <fs_fcat>-coltext = 'Vlr. VPRS'.
      WHEN 'MT_VPRS'.
        <fs_fcat>-coltext = 'Mon. VPRS'.
      WHEN 'VL_ZROY'.
        <fs_fcat>-coltext = 'Vlr. Royalties(ZROY)'.
      WHEN 'MT_ZROY'.
        <fs_fcat>-coltext = '% Royalties s/ NF(ZROY)'.
      WHEN 'VL_ZFPR'.
        <fs_fcat>-coltext = 'Vlr. F. Propaganda(ZFPR)'.
      WHEN 'MT_ZFPR'.
        <fs_fcat>-coltext = '% F. Propaganda s/ NF(ZFPR)'.
      WHEN 'VL_ZSE5'.
        <fs_fcat>-coltext = 'Vlr. ZSE5'.
      WHEN 'MT_ZSE5'.
        <fs_fcat>-coltext = 'Mon. ZSE5'.
      WHEN 'VL_ZOU5'.
        <fs_fcat>-coltext = 'Vlr. ZOU5'.
      WHEN 'MT_ZOU5'.
        <fs_fcat>-coltext = 'Mon. ZOU5'.
      WHEN 'VL_ZFPN'.
        <fs_fcat>-coltext = 'Vlr. ZFPN'.
      WHEN 'MT_ZFPN'.
        <fs_fcat>-coltext = 'Mon. ZFPN'.
      WHEN 'VL_ZROM'.
        DELETE lt_fcat INDEX sy-tabix.
        CONTINUE.
        <fs_fcat>-coltext = 'Vlr. ZROM'.
      WHEN 'MT_ZROM'.
        DELETE lt_fcat INDEX sy-tabix.
        CONTINUE.
        <fs_fcat>-coltext = 'Mon. ZROM'.
      WHEN 'VL_ZFPM'.
        DELETE lt_fcat INDEX sy-tabix.
        CONTINUE.
        <fs_fcat>-coltext = 'Vlr. ZFPM'.
      WHEN 'MT_ZFPM'.
        DELETE lt_fcat INDEX sy-tabix.
        CONTINUE.
        <fs_fcat>-coltext = 'Mon. ZFPM'.
      WHEN 'VL_ZCMI'.   " Gazzi - 02.12
        <fs_fcat>-coltext = 'Vlr. ZCMI'.
      WHEN 'MT_ZCMI'.   " Gazzi - 02.12
        <fs_fcat>-coltext = 'Mon. ZCMI'.
      WHEN 'VL_ZCOM'.
        <fs_fcat>-coltext = 'Vlr. Comissão Rep.(ZCOM)'.
      WHEN 'MT_ZCOM'.
        <fs_fcat>-coltext = '% Comissão Rep.(ZCOM)'.
      WHEN 'VL_ZDSC'.
        <fs_fcat>-coltext = 'Vlr. Desc. Comercial(ZDSC)'.
      WHEN 'MT_ZDSC'.
        <fs_fcat>-coltext = '% Desc. Comercial(ZDSC)'.
      WHEN 'VGBEL'.
        <fs_fcat>-coltext = 'Doc. Referência'.
      WHEN 'VGPOS'.
        <fs_fcat>-coltext = 'Itm Referência'.
      WHEN 'ABGRU'.
        <fs_fcat>-coltext = 'Motivo Rec. Div.Rem.'.
      WHEN 'ABGRU_TXT'.
        <fs_fcat>-coltext = 'Desc.Mot.Rec. Div.Rem.'.  "Gazzi - 02.12
      WHEN 'J_3AABGRU'.
        <fs_fcat>-coltext = 'Motivo Rec. It.Ordem'.
      WHEN 'J_3AABGRU_TXT'.
        <fs_fcat>-coltext = 'Desc.Mot.Rec. It.Ordem'.  "Gazzi - 02.12
      WHEN 'FAKSKORD'.
        <fs_fcat>-coltext = 'Bloq Fat. Ordem'.
      WHEN 'FAKSKORD_TXT'.
        <fs_fcat>-coltext = 'Desc.Bloq Fat. Ordem'.  "Gazzi - 02.12
      WHEN 'FAKSPORD'.
        <fs_fcat>-coltext = 'Bloq Fat. It.Ordem'.
      WHEN 'FAKSPORD_TXT'.
        <fs_fcat>-coltext = 'Desc.Bloq Fat. It.Ordem'.  "Gazzi - 02.12
      WHEN 'FAKSKREM'.
        <fs_fcat>-coltext = 'Bloq Fat. Remessa'.
      WHEN 'FAKSKREM_TXT'.
        <fs_fcat>-coltext = 'Desc.Bloq Fat. Remessa'. "Gazzi - 02.12
      WHEN 'FAKSPREM'.
        <fs_fcat>-coltext = 'Bloq Fat. It.Remessa'.
      WHEN 'FAKSPREM_TXT'.
        <fs_fcat>-coltext = 'Desc.Bloq Fat. It.Remessa'.  "Gazzi - 02.12
      WHEN 'LIFSK_TXT'.
        <fs_fcat>-coltext = 'Desc. Bloq. Remessa'.  "Gazzi - 02.12
      WHEN 'CMGST'.
        <fs_fcat>-coltext = 'Sts Verific. Crédito'.
      WHEN 'CMGST_TXT'.
        <fs_fcat>-coltext = 'Desc. Sts Verific. Crédito'.
      WHEN 'AUGRU_TXT'.
        <fs_fcat>-coltext = 'Desc. Motivo Ordem'.
      WHEN 'GBSTK_TXT'.
        <fs_fcat>-coltext = 'Desc. Status Processamento'.
      WHEN 'LFSTK_TXT'.
        <fs_fcat>-coltext = 'Desc. Status Remessa'.
      WHEN 'VL_UROY'.
        <fs_fcat>-coltext = 'Vlr. Unit.Roy'.
      WHEN 'MT_UROY'.
        <fs_fcat>-coltext = 'Vlr. Unit. Roy'.
      WHEN 'VL_UFPR'.
        <fs_fcat>-coltext = 'Vlr. Unit.FP'.
      WHEN 'MT_UFPR'.
        <fs_fcat>-coltext = 'Vlr. Unit FP'.
      WHEN 'VL_TROYFPR'.
        <fs_fcat>-coltext = 'Vlr. Total Roy+FP'.
      WHEN 'MT_TROYFPR'.
        <fs_fcat>-coltext = 'Mon. Total Roy+FP'.
      WHEN 'KALAB'.
        <fs_fcat>-coltext = 'Qtd. Fis. PTO/VOL'.
      WHEN 'J_3ARQDA'.
        <fs_fcat>-coltext = 'Dt. Desejada Rem.'.
      WHEN 'NETWR'.
        <fs_fcat>-coltext = 'Vlr. Unitário Liquido'.
      WHEN 'MWSBP'.
        <fs_fcat>-coltext = 'Vlr. Unitário Imposto'.
      WHEN 'ZTERM_TXT'.
        <fs_fcat>-coltext = 'Desc. Cond. Pgto.'.
      WHEN 'WERKS'.
        <fs_fcat>-coltext = 'Centro'.
      WHEN 'VL_ZAPI'.
        <fs_fcat>-coltext = 'Valor Desc. IPI (ZAPI)'.
      WHEN 'MT_ZPNF'.
        <fs_fcat>-coltext = 'Valor Unit. NF Manual'.
      WHEN 'VL_ZPNF'.
        <fs_fcat>-coltext = 'Valor NF Manual'.
      WHEN 'XBLNR'.
        <fs_fcat>-coltext = 'NF Dev.Ref.'.
      WHEN 'MT_ZAPI'.
        <fs_fcat>-coltext = '% IPI'.
      WHEN 'VL_ZPVL2'.<fs_fcat>-coltext = 'FAT Valor ZPVL'.
      WHEN 'MT_ZPVL2'.<fs_fcat>-coltext = 'FAT % ZPVL'.
      WHEN 'VL_ZPVB2'.<fs_fcat>-coltext = 'FAT Valor PV Base'.
      WHEN 'MT_ZPVB2'.<fs_fcat>-coltext = 'FAT % Mark-Up'.
      WHEN 'VL_ZAPI2'.<fs_fcat>-coltext = 'FAT Valor desconto IPI'.
      WHEN 'MT_ZAPI2'.<fs_fcat>-coltext = 'FAT % IPI'.
      WHEN 'VL_ZICP2'.<fs_fcat>-coltext = 'FAT Valor Desc. Cond. Pagamento'.
      WHEN 'MT_ZICP2'.<fs_fcat>-coltext = 'FAT % Desc. Cond. Pagamento'.
      WHEN 'VL_ZDSC2'.<fs_fcat>-coltext = 'FAT Desc. Comercial'.
      WHEN 'MT_ZDSC2'.<fs_fcat>-coltext = 'FAT % Desc. Comercial'.
*      WHEN 'VL_ZIIB2'.<fs_fcat>-coltext = 'FAT ICMS'.
      WHEN 'MT_ZIIB2'.<fs_fcat>-coltext = 'FAT % ICMS'.
      WHEN 'VL_ZINF2'.<fs_fcat>-coltext = 'FAT Valor s/ PV'.
      WHEN 'MT_ZINF2'.<fs_fcat>-coltext = 'FAT % NF s/ PV'.
      WHEN 'VL_ZROY2'.<fs_fcat>-coltext = 'FAT Valor % Royalties s/ NF'.
      WHEN 'MT_ZROY2'.<fs_fcat>-coltext = 'FAT % Royalties s/ NF'.
      WHEN 'VL_ZFPR2'.<fs_fcat>-coltext = 'FAT Valor % F. Propaganda s/ NF'.
      WHEN 'MT_ZFPR2'.<fs_fcat>-coltext = 'FAT % F. Propaganda s/ NF'.
      WHEN 'VL_ZCOM2'.<fs_fcat>-coltext = 'FAT Valor Comissão Rep.'.
      WHEN 'MT_ZCOM2'.<fs_fcat>-coltext = 'FAT % Comissão Rep.'.
      WHEN 'STATUS'.  <fs_fcat>-coltext = 'Status'.
      WHEN 'STEUC'.   <fs_fcat>-coltext = 'NCM'.
      WHEN 'BSTKD_E'. <fs_fcat>-coltext = 'Carrinho/Serviço'.
      WHEN 'VL_ZPNF2'.<fs_fcat>-coltext = 'FAT Valor NF Manual'.
      WHEN 'MT_ZPNF2'.<fs_fcat>-coltext = 'FAT Vlr.Unit. NF Manual'.
      WHEN 'VL_ZTPV2'.<fs_fcat>-coltext = 'FAT Vlr. Total NF(ZTPV)'.
      WHEN 'MT_ZTPV2'.<fs_fcat>-coltext = 'FAT Vlr. Unit. NF(ZTPV)'.
      WHEN 'ZTERM2'.  <fs_fcat>-coltext = 'FAT Cond.Pagamento'.
      WHEN 'ZTERM_TXT2'.<fs_fcat>-coltext = 'FAT Desc.Cond.Pagto'.
      WHEN 'TEXT_SEAN'.  <fs_fcat>-coltext = 'Desc. Estação'.
      WHEN 'TEXT_COLLE'. <fs_fcat>-coltext = 'Desc. Coleção'.
      WHEN 'TEXT_THEME'. <fs_fcat>-coltext = 'Desc. Lançamento'.
      WHEN 'J_3ADLDV'. <fs_fcat>-coltext = 'Dt.Desde(Receb.)'.
      WHEN 'J_3ADLDB'. <fs_fcat>-coltext = 'Dt.Até(Receb.)'.
      WHEN 'LIB_BLOQ'. <fs_fcat>-coltext = 'Liberado/Bloqueado'.
      WHEN 'SORT1'. <fs_fcat>-coltext = 'Operador'.
      WHEN 'DT_SELLOUT'. <fs_fcat>-coltext = 'Dt.Sell Out'.
      WHEN 'TIPO_BLOQ'. <fs_fcat>-coltext = 'Tipo de Bloqueio'.
      WHEN 'TEXT_MTORG'. <fs_fcat>-coltext = 'Desc. Organização de Material'.
      WHEN 'UF'. <fs_fcat>-coltext = 'UF'.
      WHEN 'STAT_ORD'. <fs_fcat>-coltext = 'Status Ordem'.
      WHEN 'J_3ASIZE'. <fs_fcat>-coltext = 'Tamanho'.
*        DELETE lt_fcat INDEX sy-tabix.
*        CONTINUE.
      WHEN 'LPRIO'. <fs_fcat>-coltext = 'Prioridade Remessa'.
      WHEN 'KVGR2'. <fs_fcat>-coltext = 'Segmento Canal'.
      WHEN 'KVGR3'. <fs_fcat>-coltext = 'Segmento Nível'.
      WHEN 'EINDT'. <fs_fcat>-coltext = 'Data de Remessa do Item'.
      WHEN 'ZZGENERO'.          <fs_fcat>-coltext = 'Gênero do produto'.
      WHEN 'ZZSILHUETA'.        <fs_fcat>-coltext = 'Silhueta'.
      WHEN 'ZZSIZE_CATEGORY'.   <fs_fcat>-coltext = 'Size category'.
      WHEN 'ZZCARRY_OVER'.      <fs_fcat>-coltext = 'SKU continuável'.
      WHEN 'ZZSUB_GRUPO'.       <fs_fcat>-coltext = 'Sub Grupo'.
      WHEN 'ZZSUB_LINHA'.       <fs_fcat>-coltext = 'Sub Linha'.
      WHEN 'BSTKD'.             <fs_fcat>-coltext = 'Nº pedido do cliente'.
      WHEN 'MVGR5_DESCR'.       <fs_fcat>-coltext = 'Descrição Grupo de Material'.
      WHEN 'ZMVGR4_DESC'.       <fs_fcat>-coltext = 'Descrição Grupo de Cor'.
      WHEN 'ZMVGR6_DESC'.       <fs_fcat>-coltext = 'Descrição do Modelo'.
      WHEN 'OBS_PEDIDO'.        <fs_fcat>-coltext = 'Observação do Pedido'.
      WHEN 'STATUS_MERCADORIA'. <fs_fcat>-coltext = 'Status Mercadoria'.
      WHEN 'MATNR_VANS'.        <fs_fcat>-coltext = 'Código Produto Vans'.
      WHEN 'IHREZ'.             <fs_fcat>-coltext = 'Sua Referência'.
      WHEN 'STCD1'.
        <fs_fcat>-coltext = 'CNPJ da Loja'.
        "Lucas Pereira - Squad Logística - 02/03/2022 - Início.
      WHEN 'LIB_BLOQ'.          <fs_fcat>-coltext = 'Liberado/Bloqueado'.
      WHEN 'TIPO_BLOQ'.         <fs_fcat>-coltext = 'Tipo de Bloqueio'.
      WHEN 'BLOQUEIOS'.
        <fs_fcat>-coltext = 'Bloqueios'.
        "Lucas Pereira - Squad Logística - 02/03/2022 - Fim.
      WHEN 'SALDO_CONTRATO'.    <fs_fcat>-coltext = 'Saldo Contrato'. " SB - Adilson - 28/03/2022
      WHEN 'KUNNR1_RECEB'. ">>> Adilson - Sinosbyte - 05/07/2022.
        <fs_fcat>-convexit  = 'ALPHA'.
        <fs_fcat>-coltext   = 'Recebedor Mercadoria'.
      WHEN 'NAME1_RECEB'. <fs_fcat>-coltext = 'Nome Recebedor'.
      WHEN 'SORT1_RECEB'. <fs_fcat>-coltext = 'Operador Recebedor'.
      WHEN 'CITY1_RECEB'. <fs_fcat>-coltext = 'Cidade Recebedor'.
      WHEN 'UF_RECEB'. <fs_fcat>-coltext = 'UF Recebedor'.
      WHEN 'ZZNOMESHOP_RECEB'. <fs_fcat>-coltext = 'Shopping Recebedor'. "<<< Adilson - Sinosbyte - 05/07/2022.
      WHEN 'KNUMV'.
      WHEN 'DTCANC'. <fs_fcat>-coltext = 'Data Cancelamento'. "<<< Adilson - Sinosbyte .
      WHEN 'USERCANC'. <fs_fcat>-coltext = 'Usuario Cancelamento'. "<<< Adilson - Sinosbyte.
      WHEN 'PEDIDO_BI'.
        <fs_fcat>-coltext = 'Pedido BI'.
        DELETE lt_fcat INDEX sy-tabix.
        CONTINUE.
    ENDCASE.
    <fs_fcat>-reptext   = <fs_fcat>-coltext.
    <fs_fcat>-scrtext_l = <fs_fcat>-coltext.
    <fs_fcat>-scrtext_m = <fs_fcat>-coltext.
    <fs_fcat>-scrtext_s = <fs_fcat>-coltext.
  ENDLOOP.

* Oculat as colunas do ALV....
  DELETE lt_fcat WHERE fieldname IS INITIAL.

ENDFORM.                    " FIELDCAT_INIT

FORM preenche_range.

  FREE: r_kschl.
  CLEAR r_kschl.
  r_kschl-sign   = c_i.
  r_kschl-option = 'EQ'.

  r_kschl-low    = c_zpvl.
  APPEND r_kschl.
  r_kschl-low    = c_zpvb.
  APPEND r_kschl.
  r_kschl-low    = c_zicp.
  APPEND r_kschl.
  r_kschl-low    = c_ziib.
  APPEND r_kschl.
  r_kschl-low    = c_zinf.
  APPEND r_kschl.
  r_kschl-low    = c_ztpv.
  APPEND r_kschl.
  r_kschl-low    = c_vprs.
  APPEND r_kschl.
  r_kschl-low    = c_zroy.
  APPEND r_kschl.
  r_kschl-low    = c_zfpr.
  APPEND r_kschl.
  r_kschl-low    = c_zse5.
  APPEND r_kschl.
  r_kschl-low    = c_zou5.
  APPEND r_kschl.
  r_kschl-low    = c_zpnf.
  APPEND r_kschl.
  r_kschl-low    = c_zrom.
  APPEND r_kschl.
  r_kschl-low    = c_zfpm.
  APPEND r_kschl.
  r_kschl-low    = c_zcom.
  APPEND r_kschl.
  r_kschl-low    = c_zpnf.
  APPEND r_kschl.
*** Gazzi - 02.12
  r_kschl-low    = c_zcmi.

  r_kschl-low    = c_icbs. "CPOSE
  APPEND r_kschl.          "CPOSE



  r_kschl-low    = 'ZDSC'.
  APPEND r_kschl.
  r_kschl-low    = 'ZAPI'.
  APPEND r_kschl.

ENDFORM.                    " PREENCHE_RANGE
FORM seleciona_dados_inicial  CHANGING pt_inicial TYPE type_t_inicial.

  DATA: lt_vbap TYPE TABLE OF tp_vbap2,
        lt_vbak TYPE TABLE OF tp_vbak2,

        ls_vbap LIKE LINE OF lt_vbap,
        ls_vbak LIKE LINE OF lt_vbak,

        ls_inicial LIKE LINE OF pt_inicial,
        lt_inicial TYPE type_t_inicial,
        lt_ordens_del LIKE gt_ordens,
        ls_ordens LIKE LINE OF gt_ordens,
        lv_msg(300).

  DATA: lt_nfs TYPE TABLE OF ty_ordem_nf.

  IF r_auto IS NOT INITIAL.
    CHECK gt_ordens IS NOT INITIAL.

    SELECT a~vbeln a~erdat a~audat a~auart a~vkorg a~vtweg a~spart a~vkgrp a~vkbur a~kunnr
         a~lifsk a~faksk a~knumv a~vbtyp a~augru a~xblnr a~bukrs_vf b~posnr b~matnr b~matkl b~werks b~j_3asean
         b~/afs/theme b~/afs/collection b~arktx b~kwmeng b~zmeng b~zieme b~netpr
         b~abgru b~faksp b~j_1bcfop b~pstyv b~uepos b~ntgew b~brgew b~prctr b~lgort b~route b~vgbel b~vgpos b~j_3arqda b~netwr b~mwsbp
     INTO CORRESPONDING FIELDS OF TABLE pt_inicial
     FROM ( vbak AS a
     INNER JOIN vbap AS b ON b~vbeln EQ a~vbeln )
     FOR ALL ENTRIES IN gt_ordens
     WHERE a~vbeln           = gt_ordens-vbeln.

    IF s_auart IS NOT INITIAL.
      DELETE pt_inicial WHERE auart NOT IN s_auart.
    ENDIF.

  ELSE.

    SELECT a~vbeln a~erdat a~audat a~auart a~vkorg a~vtweg a~spart a~vkgrp a~vkbur a~kunnr
           a~lifsk a~faksk a~knumv a~vbtyp a~augru a~xblnr a~bukrs_vf b~posnr b~matnr b~matkl b~werks b~j_3asean
           b~/afs/theme b~/afs/collection b~arktx b~kwmeng b~zmeng b~zieme b~netpr
           b~abgru b~faksp b~j_1bcfop b~pstyv b~uepos b~ntgew b~brgew b~prctr b~lgort b~route b~vgbel b~vgpos b~j_3arqda b~netwr b~mwsbp
       INTO CORRESPONDING FIELDS OF TABLE pt_inicial
       FROM ( vbak AS a
       INNER JOIN vbap AS b ON b~vbeln EQ a~vbeln )
       WHERE a~vbeln           IN so_vbeln
       AND   a~erdat           IN so_erdat
       AND   a~ernam           IN so_ernam
       AND   a~vkorg           IN so_vkorg
       AND   a~vtweg           IN so_vtweg
       AND   a~kunnr           IN so_kunnr
       AND   a~auart           IN so_auart
       AND   a~augru           IN so_augru
       AND   a~vkbur           IN so_vkbur
       AND   a~vkgrp           IN so_vkgrp
       AND   a~ernam           IN so_ernam  " Gazzi - 02.12
       AND   b~posnr           IN so_posnr
       AND   b~matnr           IN so_matnr
       AND   b~werks           IN so_werks
       AND   b~matkl           IN so_matkl
       AND   b~abgru           IN so_abgru
       AND   b~j_3asean        IN so_asean
       AND   b~/afs/collection IN so_colle
       AND   b~/afs/theme      IN so_theme.

    IF pt_inicial IS NOT INITIAL .
      PERFORM zf_ordens_nf_sel_indiv CHANGING pt_inicial lt_nfs.
    ENDIF.

    IF lt_nfs IS NOT INITIAL.
      SELECT a~vbeln a~erdat a~audat a~auart a~vkorg a~vtweg a~spart a~vkgrp a~vkbur a~kunnr
             a~lifsk a~faksk a~knumv a~vbtyp a~augru a~xblnr a~bukrs_vf b~posnr b~matnr b~matkl b~werks b~j_3asean
             b~/afs/theme b~/afs/collection b~arktx b~kwmeng b~zmeng b~zieme b~netpr
             b~abgru b~faksp b~j_1bcfop b~pstyv b~uepos b~ntgew b~brgew b~prctr b~lgort b~route b~vgbel b~vgpos b~j_3arqda b~netwr b~mwsbp
         APPENDING CORRESPONDING FIELDS OF TABLE pt_inicial
         FROM ( vbak AS a
         INNER JOIN vbap AS b ON b~vbeln EQ a~vbeln )
         FOR ALL ENTRIES IN lt_nfs
         WHERE a~vbeln  EQ lt_nfs-vbeln.
    ENDIF.

    "Brain Consulting - Squad Logística - Lucas Pereira - 09/06/2022 - Início.
    PERFORM filtra_dados_inicial CHANGING pt_inicial.
    "Brain Consulting - Squad Logística - Lucas Pereira - 09/06/2022 - Fim.
  ENDIF.

  IF pt_inicial IS NOT INITIAL.
    SORT pt_inicial BY vbeln erdat vkorg matnr werks.
  ELSE.

    MESSAGE text-001 TYPE 'S' DISPLAY LIKE 'E'.
    PERFORM zf_registra_execucao.
    STOP.
  ENDIF.
  "Brain Consulting - Squad Logística - Lucas Pereira - 09/06/2022 - Fim.



  LOOP AT so_vbeln.
    CLEAR ls_ordens.
    MOVE so_vbeln-low TO ls_ordens-vbeln.

    APPEND ls_ordens TO gt_ordens.
  ENDLOOP.

  SORT gt_ordens.
  DELETE ADJACENT DUPLICATES FROM gt_ordens COMPARING ALL FIELDS.

  lv_msg = |Inicio da eliminação de ordens!|.
  PERFORM zf_progress_ind USING lv_msg 10 100.

  lt_inicial = pt_inicial.
  SORT lt_inicial BY vbeln.

  LOOP AT gt_ordens INTO ls_ordens.
    AT NEW vbeln.
      READ TABLE lt_inicial TRANSPORTING NO FIELDS
        WITH KEY vbeln = ls_ordens-vbeln BINARY SEARCH.
      IF sy-subrc NE 0.
        DELETE FROM ztsd_geral2 WHERE vbeln = ls_ordens-vbeln.
        IF sy-subrc = 0.
          lv_msg = |Eliminando Ordem: { ls_ordens-vbeln }|.
          PERFORM zf_progress_ind USING lv_msg 50 100.
        ENDIF.
      ENDIF.
    ENDAT.
  ENDLOOP.

  lv_msg = |Fim da eliminação de ordens!|.
  PERFORM zf_progress_ind USING lv_msg 100 100.

  IF pt_inicial IS NOT INITIAL.
    SELECT * FROM j_3aseant
      INTO TABLE t_3aseant
      FOR ALL ENTRIES IN pt_inicial
      WHERE
            spras = sy-langu
            " Estação
        AND ( j_3asean        = pt_inicial-j_3asean
        AND   /afs/collection = space
        AND   /afs/theme      = space )
            " Coleção
        OR  ( j_3asean        = pt_inicial-j_3asean
        AND   /afs/collection = pt_inicial-/afs/collection
        AND   /afs/theme      = space )
            " Lançamento
        OR  ( j_3asean        = pt_inicial-j_3asean
        AND   /afs/collection = pt_inicial-/afs/collection
        AND   /afs/theme      = pt_inicial-/afs/theme ).
    IF sy-subrc = 0.
      SORT t_3aseant BY j_3asean /afs/collection /afs/theme.
    ENDIF.

    CALL FUNCTION 'ZFM_SD_SEL_KOND'
      STARTING NEW TASK 'FUNC5'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbep ON END OF TASK
      TABLES
        it_inicial = pt_inicial.

    IF rb_venda IS NOT INITIAL.

      SELECT * FROM vbfa
        INTO TABLE gt_vbfa_j
        FOR ALL ENTRIES IN pt_inicial
        WHERE vbelv   EQ pt_inicial-vbeln
        AND   posnv   EQ pt_inicial-posnr
        AND   vbtyp_n IN ('J', 'M').

      DELETE gt_vbfa_j WHERE rfmng <= 0.

      gt_vbfa_m = gt_vbfa_j.
      DELETE: gt_vbfa_m WHERE vbtyp_n NE 'M',
              gt_vbfa_j WHERE vbtyp_n NE 'J'.

    ELSE.
      SELECT * FROM vbfa
        INTO TABLE gt_vbfa_j
        FOR ALL ENTRIES IN pt_inicial
        WHERE vbelv   EQ pt_inicial-vbeln
        AND   posnv   EQ pt_inicial-posnr
        AND   vbtyp_n IN ('T', 'O') .

      DELETE gt_vbfa_j WHERE rfmng <= 0.

      gt_vbfa_m = gt_vbfa_j.
      DELETE: gt_vbfa_j WHERE vbtyp_n NE 'T',
              gt_vbfa_m WHERE vbtyp_n NE 'O'.
    ENDIF.

*** Inicio Alteração - Maxsuel Maia - ITS - 20.11.2019
    SELECT kunnr
           vkorg
           vtweg
           spart
           lprio
           kvgr2
           kvgr3
      "Lucas Pereira - Squad Logística - 01/03/2022 - Início.
           faksd
      "Lucas Pereira - Squad Logística - 01/03/2022 - Fim.
      FROM knvv
      INTO TABLE t_knvv
      FOR ALL ENTRIES IN pt_inicial
      WHERE kunnr EQ pt_inicial-kunnr
        AND vkorg EQ pt_inicial-vkorg
        AND vtweg EQ pt_inicial-vtweg
        AND spart EQ pt_inicial-spart.
    IF sy-subrc IS INITIAL.
      SORT t_knvv BY kunnr vkorg vtweg spart.
    ENDIF.

    SELECT matnr
           bismt
           zzgenero
           zzsilhueta
           zzsize_category
           zzcarry_over
           zzsub_grupo
           zzsub_linha
      FROM mara
      INTO TABLE t_mara
      FOR ALL ENTRIES IN pt_inicial
      WHERE matnr EQ pt_inicial-matnr.
    IF sy-subrc IS INITIAL.
      SORT t_mara BY matnr.

      SELECT *
        FROM ztsd_grp_linha
        INTO TABLE t_grp_linha
        FOR ALL ENTRIES IN t_mara
        WHERE sub_grupo EQ t_mara-zzsub_grupo
          AND sub_linha EQ t_mara-zzsub_linha.
      IF sy-subrc IS INITIAL.
        SORT t_grp_linha BY sub_grupo sub_linha.
      ENDIF.

      SELECT *
        FROM ztsd_silhueta
        INTO TABLE t_silhueta
        FOR ALL ENTRIES IN t_mara
        WHERE silhueta EQ t_mara-zzsilhueta.
      IF sy-subrc IS INITIAL.
        SORT t_silhueta BY silhueta.
      ENDIF.

      SELECT *
        FROM ztsd_size_categ
        INTO TABLE t_size_categ
        FOR ALL ENTRIES IN t_mara
        WHERE size_category EQ t_mara-zzsize_category.
      IF sy-subrc IS INITIAL.
        SORT t_size_categ BY size_category.
      ENDIF.

    ENDIF.
*** Fim Alteração - Maxsuel Maia - ITS - 20.11.2019

  ENDIF.

ENDFORM.                    " SELECIONA_DADOS_INICIAL

FORM seleciona_dados_proforma  CHANGING pt_proforma TYPE type_t_proforma.

  DATA: lt_inicial  TYPE type_t_inicial,
        lt_vbrp     TYPE TABLE OF tp_vbrp2,
        BEGIN OF ls_vbrk2,
          vbeln TYPE vbrk-vbeln,
          fkart TYPE vbrk-fkart,
          knumv TYPE vbrk-knumv,
          zterm TYPE vbrk-zterm,
          fkdat TYPE vbrk-fkdat,
          netwr TYPE vbrk-netwr,
        END OF ls_vbrk2,
        lt_vbrk     LIKE TABLE OF ls_vbrk2,
        ls_proforma LIKE LINE OF pt_proforma,
        ls_vbrp     LIKE LINE OF t_vbrp.

  FIELD-SYMBOLS: <fs_vbrp> LIKE LINE OF lt_vbrp,
                 <fs_vbrk> LIKE LINE OF lt_vbrk.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY vbeln posnr.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING vbeln posnr.

  CHECK gt_vbfa_m IS NOT INITIAL.

* Proforma ordem/Proforma remessa

  SELECT vbeln     posnr     matnr   fkimg   vrkme shkzg
         j_3asize j_3avgete  j_4kscat  aubel   aupos
         vgbel  vgpos  netwr
    FROM vbrp
    INTO TABLE lt_vbrp
    FOR ALL ENTRIES IN gt_vbfa_m
    WHERE   vbeln = gt_vbfa_m-vbeln
      AND   posnr = gt_vbfa_m-posnn.
*adicionando os faturamentos pela remessa
  IF NOT lt_inicial[] IS INITIAL.
    SELECT vbeln     posnr     matnr   fkimg   vrkme shkzg
           j_3asize j_3avgete  j_4kscat  aubel   aupos
           vgbel  vgpos  netwr
      FROM vbrp
      APPENDING TABLE lt_vbrp
      FOR ALL ENTRIES IN lt_inicial
      WHERE   aubel = lt_inicial-vbeln
        AND   aupos = lt_inicial-posnr.
  ENDIF.
*fim adicao faturamentos pela remessa.
  IF lt_vbrp IS NOT INITIAL.
    SORT lt_vbrp BY vbeln posnr.
    DELETE ADJACENT DUPLICATES FROM lt_vbrp.
    DATA: lt_vbrp_aux TYPE TABLE OF tp_vbrp2.

    lt_vbrp_aux = lt_vbrp.
    SORT lt_vbrp_aux BY vbeln.
    DELETE ADJACENT DUPLICATES FROM lt_vbrp_aux COMPARING vbeln.

    SELECT vbeln fkart knumv zterm fkdat netwr
      FROM vbrk
      INTO TABLE lt_vbrk
      FOR ALL ENTRIES IN lt_vbrp_aux
      WHERE vbeln = lt_vbrp_aux-vbeln
        AND   fksto NE c_x.

    IF lt_vbrk IS NOT INITIAL.
      SELECT zterm text1
      FROM t052u APPENDING TABLE t_zterm
        FOR ALL ENTRIES IN lt_vbrk
          WHERE spras EQ sy-langu
            AND zterm EQ lt_vbrk-zterm.
      IF sy-subrc EQ 0.
        SORT t_zterm BY zterm.
      ENDIF.
    ENDIF.

    IF lt_vbrk IS NOT INITIAL.

      FREE t_konv2.
      SELECT knumv kposn j_3aetenr kappl kschl kbetr kwert kmprs
        FROM konv
        INTO TABLE t_konv2
        FOR ALL ENTRIES IN lt_vbrk
        WHERE   knumv EQ lt_vbrk-knumv
          AND   kappl EQ 'V'  "c_v
          AND   kschl IN r_kschl.

    ENDIF.

    FREE: pt_proforma, t_vbrp.
    LOOP AT lt_vbrp ASSIGNING <fs_vbrp>.
      CLEAR: ls_proforma, ls_vbrp.

      MOVE-CORRESPONDING <fs_vbrp> TO ls_proforma.
      READ TABLE lt_vbrk ASSIGNING <fs_vbrk> WITH KEY vbeln = <fs_vbrp>-vbeln.
      IF sy-subrc = 0.
        IF <fs_vbrk>-fkart = c_f5 OR <fs_vbrk>-fkart = c_f8.
          MOVE <fs_vbrk>-fkart TO ls_proforma-fkart.
          APPEND ls_proforma TO pt_proforma.
        ENDIF.
        IF <fs_vbrk>-fkdat IN so_fkdat.

          MOVE-CORRESPONDING: <fs_vbrk> TO ls_vbrp,
                              <fs_vbrp> TO ls_vbrp.

          APPEND ls_vbrp TO t_vbrp.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT pt_proforma BY aubel aupos fkart.
    SORT t_vbrp BY aubel aupos j_3asize j_4kscat.
  ENDIF.

ENDFORM.                    " SELECIONA_DADOS_PROFORMA
FORM seleciona_dados_kna1 CHANGING pt_kna1 TYPE type_t_kna1.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY kunnr.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING kunnr.

  IF lt_inicial IS NOT INITIAL.
    CALL FUNCTION 'ZFM_SD_SEL_KNA1'
      STARTING NEW TASK 'FUNC3'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbep ON END OF TASK
      TABLES
        it_inicial = lt_inicial.
  ENDIF.
ENDFORM.                    " SELECIONA_DADOS_KNA1
FORM seleciona_dados_kna1_receb  CHANGING pt_kna1_receb TYPE type_t_kna1.

  DATA: lt_inicial  TYPE type_t_inicial. ">>> Adilson Sbyte - 2022034 - 05/07/2022
  DATA: ls_vbpa     LIKE LINE OF t_vbpa.
  DATA: ls_inicial  LIKE LINE OF lt_inicial.
  DATA: lt_vbpa     TYPE type_t_vbpa.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY kunnr.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING kunnr.

  IF lt_inicial IS NOT INITIAL.
    lt_vbpa[] = t_vbpa[].
    DELETE lt_vbpa WHERE parvw <> c_we.
    IF lt_vbpa IS NOT INITIAL.

      SELECT kunnr name1 ort01 adrnr regio stcd1 txjcd zznomeshop sperr
       FROM kna1
       INTO CORRESPONDING FIELDS OF TABLE pt_kna1_receb
       FOR ALL ENTRIES IN lt_vbpa
       WHERE kunnr EQ lt_vbpa-kunnr.

      IF sy-subrc EQ 0.
        SORT pt_kna1_receb BY kunnr.
      ENDIF.
    ENDIF.

    IF pt_kna1_receb IS NOT INITIAL.
      SELECT addrnumber sort1 FROM adrc
        INTO TABLE t_adrc_receb
        FOR ALL ENTRIES IN pt_kna1_receb
        WHERE addrnumber = pt_kna1_receb-adrnr.
      IF sy-subrc = 0.
        SORT t_adrc_receb BY addrnumber.
      ENDIF.
    ENDIF.
  ENDIF. "<<< Adilson Sbyte - 2022034 - 05/07/2022
  CLEAR lt_vbpa.
  CLEAR lt_inicial.

ENDFORM.                    " SELECIONA_DADOS_KNA1_RECEB

FORM seleciona_dados_vbkd  CHANGING pt_vbkd  TYPE type_t_vbkd.

  DATA: lt_inicial  TYPE type_t_inicial,
        lv_tabix    LIKE sy-tabix,
        ls_inicial  LIKE LINE OF lt_inicial,
        lr_kdgrp    TYPE TABLE OF rsis_s_range,
        lr_fkdat    TYPE TABLE OF rsis_s_range,
        ls_range    LIKE LINE OF lr_kdgrp.

  CLEAR: lr_kdgrp, lr_fkdat, lr_kdgrp, lr_fkdat.

  LOOP AT so_kdgrp.
    CLEAR ls_range.
    MOVE-CORRESPONDING so_kdgrp TO ls_range.

    APPEND ls_range TO lr_kdgrp.
  ENDLOOP.

  LOOP AT so_fkdat.
    CLEAR ls_range.
    MOVE-CORRESPONDING so_fkdat TO ls_range.

    APPEND ls_range TO lr_fkdat.
  ENDLOOP.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY vbeln.

  IF lt_inicial IS NOT INITIAL.

    CALL FUNCTION 'ZFM_SD_SEL_VBKD'
      STARTING NEW TASK 'FUNC6'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbep ON END OF TASK
      TABLES
        it_inicial = lt_inicial.

  ENDIF.
ENDFORM.                    " SELECIONA_DADOS_VBKD

FORM seleciona_dados_vbpa_knvp  CHANGING pt_vbpa TYPE type_t_vbpa
                                         pt_knvp TYPE type_t_knvp.

  DATA: lt_inicial  TYPE type_t_inicial.

  CALL FUNCTION 'ZFM_SD_SEL_VBPA'
    STARTING NEW TASK 'FUNC4'
    DESTINATION 'NONE'
    PERFORMING zf_flg_sel_vbep ON END OF TASK
    TABLES
      it_inicial = t_inicial.
ENDFORM.                    " SELECIONA_DADOS_VBPA_KNVP

FORM seleciona_dados_mvke  CHANGING pt_mvke TYPE type_t_mvke.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY vkorg vtweg.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING vkorg vtweg.

  IF lt_inicial IS NOT INITIAL.

    SELECT matnr vkorg vtweg mvgr5 zmvgr4 zmvgr6
      FROM mvke
      INTO TABLE pt_mvke
      FOR ALL ENTRIES IN lt_inicial
      WHERE matnr EQ lt_inicial-matnr
      AND   vkorg EQ lt_inicial-vkorg
      AND   vtweg EQ lt_inicial-vtweg.
    IF sy-subrc EQ 0.
      SORT pt_mvke BY vkorg vtweg.

      SELECT *
        FROM tvm5t
        INTO TABLE t_tvm5t
        FOR ALL ENTRIES IN pt_mvke
        WHERE mvgr5 EQ pt_mvke-mvgr5
          AND spras EQ sy-langu.

      SELECT *
        FROM ztsd_zmvgr4
        INTO TABLE t_zmvgr4
        FOR ALL ENTRIES IN pt_mvke
        WHERE familia EQ pt_mvke-zmvgr4
          AND spras   EQ sy-langu.

      SELECT *
        FROM ztsd_zmvgr6
        INTO TABLE t_zmvgr6
        FOR ALL ENTRIES IN pt_mvke
        WHERE modelo EQ pt_mvke-zmvgr6
          AND spras   EQ sy-langu.

    ENDIF.
  ENDIF.
ENDFORM.                    " SELECIONA_DADOS_MVKE

FORM seleciona_dados_vbuk  CHANGING pt_vbuk TYPE type_t_vbuk.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING vbeln.

  IF lt_inicial IS NOT INITIAL.
    CALL FUNCTION 'ZFM_SD_SEL_VBUK'
      STARTING NEW TASK 'FUNC1'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbuk ON END OF TASK
      TABLES
        it_inicial = lt_inicial.
  ENDIF.

ENDFORM.                    " SELECIONA_DADOS_VBUK

FORM seleciona_dados_vbep  CHANGING pt_vbep TYPE type_t_vbep.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY vbeln posnr.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING vbeln posnr.

  IF lt_inicial IS NOT INITIAL.
    CALL FUNCTION 'ZFM_SD_SEL_VBEP'
      STARTING NEW TASK 'FUNC2'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbep ON END OF TASK
      TABLES
        it_inicial = lt_inicial.
  ENDIF.
ENDFORM.                    " SELECIONA_DADOS_VBEP

FORM seleciona_dados_marc  CHANGING pt_marc TYPE type_t_marc.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY matnr werks.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING matnr werks.

  IF lt_inicial IS NOT INITIAL.

    CALL FUNCTION 'ZFM_SD_SEL_MARC'
      STARTING NEW TASK 'FUNC7'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbep ON END OF TASK
      TABLES
        it_inicial = lt_inicial.
  ENDIF.

ENDFORM.                    " SELECIONA_DADOS_MARC

FORM seleciona_dados_lips  CHANGING pt_lips TYPE type_t_lips.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY vbeln posnr.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING vbeln posnr.

  CHECK gt_vbfa_j IS NOT INITIAL.

  CALL FUNCTION 'ZFM_SD_SEL_LIPS'
    STARTING NEW TASK 'FUNC8'
    DESTINATION 'NONE'
    PERFORMING zf_flg_sel_vbep ON END OF TASK
    TABLES
      it_vbfa = gt_vbfa_j.

ENDFORM.                    " SELECIONA_DADOS_LIPS

FORM seleciona_dados_likp  CHANGING pt_likp TYPE type_t_likp.


ENDFORM.                    " SELECIONA_DADOS_LIKP

FORM seleciona_dados_vbrp  CHANGING pt_vbrp  TYPE type_t_vbrp.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY vbeln posnr.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING vbeln posnr.

ENDFORM.                    " SELECIONA_DADOS_VBRP

FORM seleciona_dados_bnflin  CHANGING pt_bnflin TYPE type_t_bnflin.

  TYPES: BEGIN OF type_vbrp,
          vbeln  TYPE j_1brefkey,
          posnr  TYPE j_1brefitm,
         END OF type_vbrp.

  DATA: lt_vbrp  TYPE type_t_vbrp,
        ls_vbrp  TYPE tp_vbrp,
        lt_vbrp2 TYPE TABLE OF type_vbrp,
        ls_vbrp2 TYPE type_vbrp.

  lt_vbrp[] = t_vbrp[].
  SORT lt_vbrp BY vbeln.

  LOOP AT lt_vbrp INTO ls_vbrp.
    ls_vbrp2-vbeln = ls_vbrp-vbeln.
    ls_vbrp2-posnr = ls_vbrp-posnr.
    APPEND ls_vbrp2 TO lt_vbrp2.
  ENDLOOP.

  CHECK lt_vbrp2 IS NOT INITIAL.

  CALL FUNCTION 'ZFM_SD_SEL_DOC'
    STARTING NEW TASK 'FUNC9'
    DESTINATION 'NONE'
    PERFORMING zf_flg_sel_vbep ON END OF TASK
    TABLES
      it_vbrp = lt_vbrp2.

ENDFORM.                    " SELECIONA_DADOS_BNFLIN

FORM seleciona_dados_bnfdoc  CHANGING pt_bnfdoc TYPE type_t_bnfdoc.



ENDFORM.                    " SELECIONA_DADOS_BNFDOC

FORM seleciona_dados_eket  CHANGING pt_eket TYPE type_t_eket.

  TYPES: BEGIN OF ltp_inicial,
          vbeln  TYPE char12,
          posnr  TYPE posnr_va,
         END OF ltp_inicial.

  DATA: lt_inicial  TYPE TABLE OF ltp_inicial,
        ls_inicial  TYPE ltp_inicial,
        lt_inicial2 TYPE type_t_inicial,
        ls_inicial2 TYPE tp_inicial.

  CALL FUNCTION 'ZFM_SD_SEL_EKET'
    STARTING NEW TASK 'FUNC10'
    DESTINATION 'NONE'
    PERFORMING zf_flg_sel_vbep ON END OF TASK
    TABLES
      it_inicial = t_inicial.

ENDFORM.                    " SELECIONA_DADOS_EKET

FORM seleciona_dados_konv  CHANGING pt_konv  TYPE type_t_konv.

  DATA: lt_inicial  TYPE type_t_inicial.

  lt_inicial[] = t_inicial[].
  SORT lt_inicial BY knumv.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING knumv.

  IF lt_inicial IS NOT INITIAL.

    CALL FUNCTION 'ZFM_SD_SEL_KONV'
      STARTING NEW TASK 'FUNC13'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbep ON END OF TASK
      TABLES
        t_inicial = lt_inicial.

  ENDIF.

ENDFORM.                    " SELECIONA_DADOS_KONV

FORM seleciona_dados_j3abdbs  CHANGING pt_j3abdbs TYPE type_t_j3abdbs.

  TYPES: BEGIN OF ltp_inicial,
          vbeln  TYPE char12,
          posnr  TYPE posnr_va,
          werks  TYPE werks_d,
          matnr  TYPE matnr,
         END OF ltp_inicial.

  DATA: lt_inicial  TYPE TABLE OF ltp_inicial,
        ls_inicial  TYPE ltp_inicial,
        ls_inicial2 TYPE tp_inicial,
        lt_inicial2 TYPE type_t_inicial.

  lt_inicial2[] = t_inicial[].
  SORT lt_inicial2 BY vbeln posnr werks matnr.
  DELETE ADJACENT DUPLICATES FROM lt_inicial2 COMPARING vbeln posnr werks matnr.

  "DELETE lt_inicial2 WHERE pstyv NE 'YPTS'.
  DELETE lt_inicial2 WHERE pstyv NOT IN gr_catipts. ">>> Eduardo (SB) - 14.01.2022 - 2022004 - Parametrização PSTYV

  LOOP AT lt_inicial2 INTO ls_inicial2.
    ls_inicial-vbeln = ls_inicial2-vbeln.
    ls_inicial-posnr = ls_inicial2-posnr.
    ls_inicial-werks = ls_inicial2-werks.
    ls_inicial-matnr = ls_inicial2-matnr.
    APPEND ls_inicial TO lt_inicial.
  ENDLOOP.

  IF lt_inicial IS NOT INITIAL.
    SELECT werks matnr aufnr posnr etenr j_3astat j_3abskz j_3absnr j_3ahbsp j_3aebsp menge edatu_po
      FROM j_3abdbs
      INTO TABLE pt_j3abdbs
      FOR ALL ENTRIES IN lt_inicial
      WHERE werks EQ lt_inicial-werks
      AND   matnr EQ lt_inicial-matnr
      AND   aufnr EQ lt_inicial-vbeln
      AND   posnr EQ lt_inicial-posnr.

    IF sy-subrc EQ 0.
      SORT pt_j3abdbs BY werks matnr aufnr posnr etenr j_3abskz.
    ENDIF.

  ENDIF.
  flg_j3abdbs  = abap_true.
ENDFORM.                    " SELECIONA_DADOS_J3ABDBS

FORM processa_vbep.

  FIELD-SYMBOLS: <fs_vbep> TYPE tp_vbep,
                 <fs_konv> TYPE tp_konv.

  DATA: ls_alvout  TYPE tp_alvout.
  DATA: lv_bezei   TYPE tvagt-bezei.


  LOOP AT t_vbep ASSIGNING <fs_vbep>.

*   EAN
    CLEAR ls_alvout.
    SORT t_alvout BY vbeln posnr.
    READ TABLE t_alvout INTO ls_alvout WITH KEY vbeln = <fs_vbep>-vbeln
                                                posnr = <fs_vbep>-posnr
                                                             BINARY SEARCH.
    IF sy-subrc EQ 0.

      ls_alvout-vbeln     = <fs_vbep>-vbeln.
      ls_alvout-posnr     = <fs_vbep>-posnr.
      ls_alvout-wmeng     = <fs_vbep>-wmeng.
      ls_alvout-bmeng     = <fs_vbep>-bmeng.
      ls_alvout-vrkme     = <fs_vbep>-vrkme.
      ls_alvout-j_3asize  = <fs_vbep>-j_3asize.
      ls_alvout-j_4krcat  = <fs_vbep>-j_4krcat.
      ls_alvout-j_3aean11 = <fs_vbep>-j_3aean11.
      ls_alvout-j_3aabgru = <fs_vbep>-j_3aabgru.

*     Gazzi - 02.12
*     Descrição do Motivo Recusa da divisão de remessa do item
      CLEAR: lv_bezei.

      SELECT SINGLE bezei
        INTO lv_bezei
        FROM tvagt
      WHERE abgru = ls_alvout-j_3aabgru
        AND spras = sy-langu.

      IF sy-subrc IS INITIAL.
        ls_alvout-j_3aabgru_txt = lv_bezei.
      ENDIF.

      READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv     = ls_alvout-knumv
                                                     kposn     = ls_alvout-posnr
                                                     j_3aetenr = <fs_vbep>-etenr
                                                     kschl     = c_ztpv          BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_alvout-vl_ztpv = <fs_konv>-kwert.
        ls_alvout-mt_ztpv = <fs_konv>-kbetr.
      ENDIF.
    ENDIF.

    APPEND ls_alvout TO t_alvout.

  ENDLOOP.

  DELETE t_alvout WHERE wmeng     IS INITIAL
                  AND   vrkme     IS INITIAL
                  AND   j_3asize  IS INITIAL
                  AND   j_3aean11 IS INITIAL
                  AND   j_3aabgru IS INITIAL.


ENDFORM.                    " PROCESSA_VBEP

FORM processa_lips.

  FIELD-SYMBOLS: <fs_lips>   TYPE tp_lips,
                 <fs_likp>   TYPE tp_likp,
                 <fs_alvout> TYPE tp_alvout.


  SORT t_lips BY vbeln posnr.

  LOOP AT t_lips ASSIGNING <fs_lips>.

*   Remessa
    SORT t_alvout BY vbeln posnr vrkme j_3asize j_4krcat.
    READ TABLE t_alvout ASSIGNING <fs_alvout> WITH KEY vbeln    = <fs_lips>-vgbel
                                                       posnr    = <fs_lips>-vgpos
                                                       vrkme    = <fs_lips>-vrkme
                                                       j_3asize = <fs_lips>-j_3asize
                                                       j_4krcat = <fs_lips>-j_4krcat
                                                                       BINARY SEARCH.
    IF sy-subrc EQ 0.
      <fs_alvout>-numrem    = <fs_lips>-vbeln.
      <fs_alvout>-itmrem    = <fs_lips>-posnr.
      <fs_alvout>-lfimg     = <fs_lips>-lfimg.
      <fs_alvout>-matrizrem = <fs_lips>-j_3asize.
      <fs_alvout>-faksprem  = <fs_lips>-faksp.

*     Gazzi - 02.12
*     Descrição Bloq. faturamento do item da remessa
      DATA: lv_faksprem_txt TYPE tvfst-vtext.
      CLEAR: lv_faksprem_txt.

      SELECT SINGLE vtext
        INTO lv_faksprem_txt
        FROM tvfst
      WHERE faksp = <fs_alvout>-faksprem
        AND spras = sy-langu.
      IF sy-subrc IS INITIAL.
        <fs_alvout>-faksprem_txt = lv_faksprem_txt.
      ENDIF.

      READ TABLE t_likp ASSIGNING <fs_likp> WITH KEY vbeln = <fs_lips>-vbeln
                                                               BINARY SEARCH.
      IF sy-subrc EQ 0.
        <fs_alvout>-datrem   = <fs_likp>-bldat.
        <fs_alvout>-fakskrem = <fs_likp>-faksk.

*       Gazzi - 02.12
*       Descrição Bloq. faturamento do cabeçalho da remessa
        DATA: lv_fakskrem_txt TYPE tvfst-vtext.
        CLEAR: lv_fakskrem_txt.

        SELECT SINGLE vtext
          INTO lv_fakskrem_txt
          FROM tvfst
        WHERE faksp = <fs_alvout>-fakskrem
          AND spras = sy-langu.
        IF sy-subrc IS INITIAL.
          <fs_alvout>-fakskrem_txt = lv_fakskrem_txt.
        ENDIF.

      ENDIF.

    ENDIF.

  ENDLOOP.

ENDFORM.                    " PROCESSA_LIPS

FORM processa_vbrp_vbrk.

  FIELD-SYMBOLS: <fs_vbrp>    TYPE tp_vbrp,
                 <fs_prof>    TYPE tp_proforma,
                 <fs_bnflin>  TYPE tp_bnflin,
                 <fs_bnfdoc>  TYPE tp_bnfdoc,
                 <fs_sd002>   TYPE ztsd_002,
                 <fs_alvout>  TYPE tp_alvout.

  LOOP AT t_vbrp ASSIGNING <fs_vbrp>.

*   Fatura
    SORT t_alvout BY vbeln posnr vrkme j_3asize j_4krcat.
    READ TABLE t_alvout ASSIGNING <fs_alvout> WITH KEY vbeln    = <fs_vbrp>-aubel
                                                       posnr    = <fs_vbrp>-aupos
                                                       vrkme    = <fs_vbrp>-vrkme
                                                       j_3asize = <fs_vbrp>-j_3asize
                                                       j_4krcat = <fs_vbrp>-j_4kscat
                                                                       BINARY SEARCH.
    IF sy-subrc EQ 0.
      <fs_alvout>-numfat       = <fs_vbrp>-vbeln.
      <fs_alvout>-itmfat       = <fs_vbrp>-aupos.
      <fs_alvout>-datfat       = <fs_vbrp>-fkdat.
      <fs_alvout>-fkimg        = <fs_vbrp>-fkimg.
    ENDIF.

*   Estorno Fatura
    READ TABLE t_proforma ASSIGNING <fs_prof> WITH KEY aubel = <fs_vbrp>-aubel
                                                       aupos = <fs_vbrp>-aupos
                                                       fkart = c_s1 BINARY SEARCH.
    IF sy-subrc EQ 0.
      <fs_alvout>-estfat = <fs_prof>-vbeln.
    ENDIF.

*   Dados da NF-e
    READ TABLE t_bnflin ASSIGNING <fs_bnflin> WITH KEY refkey = <fs_vbrp>-vbeln
                                                       refitm = <fs_vbrp>-posnr
                                                                  BINARY SEARCH.
    IF sy-subrc EQ 0.
      READ TABLE t_bnfdoc ASSIGNING <fs_bnfdoc> WITH KEY docnum = <fs_bnflin>-docnum
                                                                       BINARY SEARCH.
      IF sy-subrc EQ 0.
*       Nota Fiscal
        <fs_alvout>-nfenum = <fs_bnfdoc>-nfenum.
        <fs_alvout>-series = <fs_bnfdoc>-series.
*       Data da Nota Fiscal
        <fs_alvout>-datanf = <fs_bnfdoc>-docdat.
*       QUuantidade da Nota Fiscal
        <fs_alvout>-menge = <fs_bnflin>-menge.
        READ TABLE t_sd002 ASSIGNING <fs_sd002> WITH KEY nfenum = <fs_bnfdoc>-nfenum
                                                         series = <fs_bnfdoc>-series.
        IF sy-subrc = 0.
          <fs_alvout>-cod_ocorr = <fs_sd002>-cod_ocorr.
          <fs_alvout>-dt_ocorr  = <fs_sd002>-dt_ocorr.
          <fs_alvout>-tx_ocorr  = <fs_sd002>-tx_ocorr.
          <fs_alvout>-dt_eloja  = <fs_sd002>-dt_eloja.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " PROCESSA_VBRP_VBRK


FORM seleciona_textos.
  DATA: lt_vbpa LIKE t_vbpa.

  WAIT UNTIL: flg_vbep    EQ abap_true,
              flg_vbpa    EQ abap_true,
              flg_kond    EQ abap_true,
              flg_lips    EQ abap_true.
*              flg_j3abdbs EQ abap_true.

  CHECK t_inicial IS NOT INITIAL.
* Organização vendas
  SELECT * FROM tvkot INTO TABLE t_tvkot
    FOR ALL ENTRIES IN t_inicial
      WHERE vkorg EQ t_inicial-vkorg
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_tvkot BY vkorg.
  ENDIF.
* Canal de distribuição
  SELECT * FROM tvtwt INTO TABLE t_tvtwt
    FOR ALL ENTRIES IN t_inicial
      WHERE vtweg EQ t_inicial-vtweg
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_tvtwt BY vtweg.
  ENDIF.
* Setor de atividade
  SELECT * FROM tspat INTO TABLE t_tspat
    FOR ALL ENTRIES IN t_inicial
      WHERE spart EQ t_inicial-spart
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_tspat BY spart.
  ENDIF.
* Escritório de vendas
  SELECT * FROM tvkbt INTO TABLE t_tvkbt
    FOR ALL ENTRIES IN t_inicial
      WHERE vkbur EQ t_inicial-vkbur
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_tvkbt BY vkbur.
  ENDIF.
* Equipe de vendas
  SELECT * FROM tvgrt INTO TABLE t_tvgrt
    FOR ALL ENTRIES IN t_inicial
      WHERE vkgrp EQ t_inicial-vkgrp
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_tvgrt BY vkgrp.
  ENDIF.
* Categoria de clientes
  SELECT * FROM t151t INTO TABLE t_t151t
    FOR ALL ENTRIES IN t_vbkd
      WHERE kdgrp EQ t_vbkd-kdgrp
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_t151t BY kdgrp.
  ENDIF.

  lt_vbpa = t_vbpa.
  DELETE lt_vbpa WHERE kunnr IS INITIAL.

* Nome parceiros
  IF lt_vbpa IS NOT INITIAL.
    SELECT kunnr name1
      FROM kna1 INTO TABLE t_parceiros_txt
        FOR ALL ENTRIES IN lt_vbpa
          WHERE kunnr EQ lt_vbpa-kunnr.
  ENDIF.

  lt_vbpa = t_vbpa.
  DELETE lt_vbpa WHERE lifnr IS INITIAL.

  IF lt_vbpa IS NOT INITIAL.
    SELECT lifnr name1
    FROM lfa1 APPENDING TABLE t_parceiros_txt
      FOR ALL ENTRIES IN lt_vbpa
        WHERE lifnr EQ lt_vbpa-lifnr.
  ENDIF.

  IF t_parceiros_txt IS NOT INITIAL.
    SORT t_parceiros_txt BY codpa.
  ENDIF.

* Sap credit management
  CALL FUNCTION 'RM_DOMAIN_VALUES_GET'
    EXPORTING
      i_name          = 'CMGST'
      i_langu         = sy-langu
      i_read_texts    = 'X'
    IMPORTING
      e_domain_values = t_cmgst.
  IF sy-subrc EQ 0.
    SORT t_cmgst BY domvalue_l.
  ENDIF.

* Grupo de mercadorias
  SELECT * FROM t023t INTO TABLE t_t023t
    FOR ALL ENTRIES IN t_inicial
      WHERE matkl EQ t_inicial-matkl
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_t023t BY matkl.
  ENDIF.

  IF t_j3abdbs IS NOT INITIAL.
* Status Alocaçao MRP
    SELECT * FROM j_3addtt INTO TABLE t_3addtt
      FOR ALL ENTRIES IN t_j3abdbs
        WHERE j_3astat EQ t_j3abdbs-j_3astat
          AND spras EQ sy-langu.
    IF sy-subrc EQ 0.
      SORT t_3addtt BY j_3astat.
    ENDIF.
  ENDIF.

* Status Alocaçao OV
  SELECT *
    FROM tvbst INTO TABLE t_3arun1
      WHERE spras EQ sy-langu
        AND tbnam EQ 'VBUP'
        AND fdnam EQ 'J_3ARUN1'.
  IF sy-subrc EQ 0.
    SORT t_3arun1 BY statu.
  ENDIF.

* Status Alocaçao Estoque
  CALL FUNCTION 'RM_DOMAIN_VALUES_GET'
    EXPORTING
      i_name          = 'J_3ABSKZ'
      i_langu         = sy-langu
      i_read_texts    = 'X'
    IMPORTING
      e_domain_values = t_3abskz.
  IF sy-subrc EQ 0.
    SORT t_3abskz BY domvalue_l.
  ENDIF.

  IF t_vbkd IS NOT INITIAL.
* região de vendas
    SELECT * FROM t171t INTO TABLE t_t171t
      FOR ALL ENTRIES IN t_vbkd
        WHERE bzirk EQ t_vbkd-bzirk
          AND spras EQ sy-langu.
    IF sy-subrc EQ 0.
      SORT t_t171t BY bzirk.
    ENDIF.
  ENDIF.

* Motivo da ordem
  SELECT * FROM tvaut INTO TABLE t_tvaut
    FOR ALL ENTRIES IN t_inicial
      WHERE augru EQ t_inicial-augru
        AND spras EQ sy-langu.
  IF sy-subrc EQ 0.
    SORT t_tvaut BY augru.
  ENDIF.

* Sap credit management
  CALL FUNCTION 'RM_DOMAIN_VALUES_GET'
    EXPORTING
      i_name          = 'STATV'
      i_langu         = sy-langu
      i_read_texts    = 'X'
    IMPORTING
      e_domain_values = t_statv.
  IF sy-subrc EQ 0.
    SORT t_cmgst BY domvalue_l.
  ENDIF.

  SELECT *
      INTO TABLE t_tvlst
      FROM tvlst
    FOR ALL ENTRIES IN t_inicial
    WHERE lifsp = t_inicial-lifsk
      AND spras = sy-langu.
  IF sy-subrc IS INITIAL.
    SORT t_tvlst BY lifsp.
  ENDIF.


  SELECT *
      INTO TABLE t_tvfst
      FROM tvfst
    FOR ALL ENTRIES IN t_inicial
    WHERE ( faksp = t_inicial-faksk OR faksp = t_inicial-faksp )
      AND spras = sy-langu.
  IF sy-subrc IS INITIAL.
    SORT t_tvfst BY faksp.
  ENDIF.

  IF t_lips IS NOT INITIAL.
    SELECT * APPENDING TABLE t_tvfst
      FROM tvfst
      FOR ALL ENTRIES IN t_lips
      WHERE faksp = t_lips-faksp
        AND spras = sy-langu.
    IF sy-subrc = 0.
      SORT t_tvfst BY faksp.
      DELETE ADJACENT DUPLICATES FROM t_tvfst COMPARING ALL FIELDS.

      SORT t_tvfst BY faksp.
    ENDIF.
  ENDIF.

  SELECT *
      INTO TABLE t_tvagt
      FROM tvagt
    FOR ALL ENTRIES IN t_inicial
    WHERE abgru = t_inicial-abgru
      AND spras = sy-langu.
  IF sy-subrc IS INITIAL.
    SORT t_tvagt BY abgru.
  ENDIF.

  IF t_vbep IS NOT INITIAL.
    SELECT * FROM tvagt
      APPENDING TABLE t_tvagt
      FOR ALL ENTRIES IN t_vbep
      WHERE abgru = t_vbep-j_3aabgru
        AND spras = sy-langu.
    IF sy-subrc = 0.
      SORT t_tvagt BY abgru.
      DELETE ADJACENT DUPLICATES FROM t_tvagt COMPARING ALL FIELDS.
      SORT t_tvagt BY abgru.
    ENDIF.
  ENDIF.

  SELECT vbeln posnr kwmeng
      INTO TABLE t_vbap
      FROM vbap
    FOR ALL ENTRIES IN t_inicial
     WHERE  vbeln = t_inicial-vbeln
        AND posnr = t_inicial-posnr.
  IF sy-subrc = 0.
    SORT t_vbap BY vbeln posnr.
  ENDIF.

  CALL FUNCTION 'RM_DOMAIN_VALUES_GET'
    EXPORTING
      i_name          = 'ZDSD_GENERO'
      i_langu         = sy-langu
      i_read_texts    = 'X'
    IMPORTING
      e_domain_values = t_genero.
  IF sy-subrc EQ 0.
    SORT t_genero BY domvalue_l.
  ENDIF.

  CALL FUNCTION 'RM_DOMAIN_VALUES_GET'
    EXPORTING
      i_name          = 'ZDSD_CARRY_OVER'
      i_langu         = sy-langu
      i_read_texts    = 'X'
    IMPORTING
      e_domain_values = t_carry.
  IF sy-subrc EQ 0.
    SORT t_carry BY domvalue_l.
  ENDIF.

  SELECT *
    FROM tprit
    INTO TABLE t_tprit
    WHERE spras EQ sy-langu.
  IF sy-subrc IS INITIAL.

  ENDIF.

  SELECT *
    FROM tvv2t
    INTO TABLE t_tvv2t
    WHERE spras EQ sy-langu.
  IF sy-subrc IS INITIAL.

  ENDIF.

  SELECT *
    FROM tvv3t
    INTO TABLE t_tvv3t
    WHERE spras EQ sy-langu.
  IF sy-subrc IS INITIAL.

  ENDIF.

ENDFORM.                    " SELECIONA_TEXTOS


FORM busca_descricao_parceiro  USING    p_codpa
                               CHANGING p_descr.
  DATA: ls_parceiros_txt TYPE tp_parceiros_txt.

  READ TABLE t_parceiros_txt INTO ls_parceiros_txt WITH KEY codpa = p_codpa BINARY SEARCH.
  IF sy-subrc EQ 0.
    p_descr = ls_parceiros_txt-name1.
  ENDIF.

ENDFORM.                    " BUSCA_DESCRICAO_PARCEIRO

FORM seleciona_dados_vbup  CHANGING p_vbup.



ENDFORM.                    " SELECIONA_DADOS_VBUP

FORM seleciona_dados_mska CHANGING p_t_mska TYPE type_t_mska.

  DATA: lt_temp TYPE TABLE OF tp_inicial.

  lt_temp = t_inicial.
  DELETE lt_temp WHERE pstyv NE 'YVOL'
                   AND pstyv NE 'YPTO'.

  IF lt_temp IS NOT INITIAL.
    CALL FUNCTION 'ZFM_SD_SEL_MSKA'
      STARTING NEW TASK 'FUNC12'
      DESTINATION 'NONE'
      PERFORMING zf_flg_sel_vbep ON END OF TASK
      TABLES
        it_inicial = lt_temp.
  ENDIF.

ENDFORM.                    " SELECIONA_DADOS_MSKA

FORM filtra_dados_inicial  CHANGING pt_inicial TYPE type_t_inicial.

  "Brain Consulting - Squad Logística - Lucas Pereira - 09/06/2022 - Início.
  IF so_vbeln IS NOT INITIAL.
    DELETE pt_inicial WHERE vbeln NOT IN so_vbeln.
  ENDIF.
  "Brain Consulting - Squad Logística - Lucas Pereira - 09/06/2022 - Fim.

  IF so_vkorg IS NOT INITIAL.
    DELETE pt_inicial WHERE vkorg NOT IN so_vkorg.
  ENDIF.

  IF so_vtweg IS NOT INITIAL.
    DELETE pt_inicial WHERE vtweg NOT IN so_vtweg.
  ENDIF.

  IF so_kunnr IS NOT INITIAL.
    DELETE pt_inicial WHERE kunnr NOT IN so_kunnr.
  ENDIF.

  IF so_auart IS NOT INITIAL.
    DELETE pt_inicial WHERE auart NOT IN so_auart.
  ENDIF.

  IF so_augru IS NOT INITIAL.
    DELETE pt_inicial WHERE augru NOT IN so_augru.
  ENDIF.

  IF so_vkbur IS NOT INITIAL.
    DELETE pt_inicial WHERE vkbur NOT IN so_vkbur.
  ENDIF.

  IF so_vkgrp IS NOT INITIAL.
    DELETE pt_inicial WHERE vkgrp NOT IN so_vkgrp.
  ENDIF.

  IF so_matnr IS NOT INITIAL.
    DELETE pt_inicial WHERE matnr NOT IN so_matnr.
  ENDIF.

  IF so_werks IS NOT INITIAL.
    DELETE pt_inicial WHERE werks NOT IN so_werks.
  ENDIF.

  IF so_matkl IS NOT INITIAL.
    DELETE pt_inicial WHERE matkl NOT IN so_matkl.
  ENDIF.

  IF so_abgru IS NOT INITIAL.
    DELETE pt_inicial WHERE abgru NOT IN so_abgru.
  ENDIF.

  IF so_asean IS NOT INITIAL.
    DELETE pt_inicial WHERE j_3asean NOT IN so_asean.
  ENDIF.

  IF so_colle IS NOT INITIAL.
    DELETE pt_inicial WHERE /afs/collection NOT IN so_colle.
  ENDIF.

  IF so_theme IS NOT INITIAL.
    DELETE pt_inicial WHERE /afs/theme NOT IN so_theme.
  ENDIF.
ENDFORM.                    " FILTRA_DADOS_INICIAL

FORM seleciona_origem_material.

  DATA: lt_temp TYPE TABLE OF tp_inicial.

  lt_temp = t_inicial.

  IF lt_temp IS NOT INITIAL.
    SELECT matnr bwkey mtorg
      FROM mbew
      INTO TABLE t_mbew
      FOR ALL ENTRIES IN t_inicial
      WHERE matnr = t_inicial-matnr
        AND bwkey = t_inicial-werks
        AND mtorg IN so_mtorg.
    IF sy-subrc EQ 0.
      SORT t_mbew BY matnr bwkey.
    ENDIF.

  ENDIF.

ENDFORM.                    " SELECIONA_ORIGEM_MATERIAL

FORM zf_insere_bd .

  DATA: "lt_geral TYPE TABLE OF ztsd_geral2, Sbyte Adilson - 16/12/2022
        ls_geral LIKE LINE OF gt_geral, "Sbyte Adilson - 16/12/2022
        lt_geral_aux TYPE TABLE OF ztsd_geral2,
        ls_out   LIKE LINE OF t_alvout2,
        lv_uname TYPE syst-uname,
        lv_datum TYPE syst-datum,
        lv_uzeit TYPE syst-uzeit,
        lv_cont  TYPE numc10,
        ls_last_exe TYPE ztsd_last_exe,
        lv_msg(300).

  DATA: ls_exec128 TYPE ztsd_exec128.

  "FREE gt_geral. "Sbyte Adilson - 16/12/2022

  lv_datum = sy-datum.
  lv_uzeit = sy-uzeit.
  lv_uname = sy-uname.

  PERFORM zf_progress_ind USING text-i07 10 100.

  SORT t_alvout2 ASCENDING.

  CLEAR lv_cont.
  LOOP AT t_alvout2 INTO ls_out.
    CLEAR ls_geral.

    AT NEW vbeln.
      DELETE FROM ztsd_geral2 WHERE vbeln = ls_out-vbeln.
      COMMIT WORK AND WAIT. "TESTE
    ENDAT.

    AT NEW posnr.
      CLEAR lv_cont.
    ENDAT.

    ls_out-stataloc_etq2 = ls_out-stataloc_etq.
    ls_out-stataloc2     = ls_out-stataloc.

    ADD 1 TO lv_cont.
    MOVE-CORRESPONDING ls_out TO ls_geral.


    ls_geral-uname  = lv_uname.
    ls_geral-credat = lv_datum.
    ls_geral-cretim = lv_uzeit.
    ls_geral-cont   = lv_cont.

    APPEND ls_geral TO gt_geral. "Sbyte Adilson 16/12/2022

    MODIFY ztsd_geral2 FROM ls_geral.

    AT END OF vbeln.
      IF p_rujb EQ 'X'.

        LOOP AT gt_exec128 INTO ls_exec128.
          UPDATE ztsd_exec128
             SET status = 'P'
                 dtfim  = sy-datum
                 hrfim  = sy-timlo
           WHERE vbeln  = ls_exec128-vbeln
             AND dtreg  = ls_exec128-dtreg
             AND hrreg  = ls_exec128-hrreg.
        ENDLOOP.
      ENDIF.

      COMMIT WORK.

      IF sy-batch IS NOT INITIAL.
        lv_msg = |A ordem | && ls_out-vbeln && | foi gravada.|.
        PERFORM zf_progress_ind USING lv_msg 10 100.
      ENDIF.

    ENDAT.
  ENDLOOP.

  MODIFY ztsd_002 FROM TABLE t_sd002.

  PERFORM zf_registra_execucao.

  PERFORM zf_progress_ind USING text-i08 100 100.
ENDFORM.                    " ZF_INSERE_BD

FORM zf_progress_ind  USING    p_text
                               value(p_ini) TYPE i
                               value(p_fin) TYPE i.

  IF sy-batch IS INITIAL.
    CALL FUNCTION 'PROGRESS_INDICATOR'
      EXPORTING
        i_text               = p_text
        i_processed          = p_ini
        i_total              = p_fin
        i_output_immediately = 'X'.
  ELSE.
    MESSAGE p_text TYPE 'S'. "s001(00) WITH p_text.
    COMMIT WORK.
  ENDIF.

ENDFORM.                    " ZF_PROGRESS_IND

MODULE status_0050 OUTPUT.
  SET PF-STATUS '0050'.
*  SET TITLEBAR 'xxx'.

ENDMODULE.                 " STATUS_0050  OUTPUT

MODULE user_command_0050 INPUT.
  CASE sy-ucomm.
    WHEN 'OK' OR 'OKAY' OR 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0050  INPUT


FORM zf_registra_execucao .
  DATA: ls_last_exe TYPE ztsd_last_exe.

  IF r_auto IS NOT INITIAL.
    IF r_log IS NOT INITIAL.
      CLEAR ls_last_exe.
      ls_last_exe-exetp   = '01'.
      ls_last_exe-credat  = gv_credat.
      ls_last_exe-cretim  = gv_cretim.
      APPEND ls_last_exe TO gt_registro_da_ultima_execucao.
    ENDIF.

    IF r_fatur IS NOT INITIAL.
      CLEAR ls_last_exe.
      ls_last_exe-exetp   = '02'.
      ls_last_exe-credat  = gv_credat.
      ls_last_exe-cretim  = gv_cretim.
      APPEND ls_last_exe TO gt_registro_da_ultima_execucao.
    ENDIF.

    IF r_aloc IS NOT INITIAL.
      ls_last_exe-exetp   = '03'.
      ls_last_exe-credat  = gv_credat.
      ls_last_exe-cretim  = gv_cretim.
      APPEND ls_last_exe TO gt_registro_da_ultima_execucao.
    ENDIF.
  ENDIF.
ENDFORM.                    " ZF_REGISTRA_EXECUÇÃO

FORM zf_grava_ultima_execucao.
  DATA: ls_ultima_execucao TYPE ztsd_last_exe,
        ls_ultima_execucao_key TYPE ztsd_last_exe.

  IF NOT gt_registro_da_ultima_execucao IS INITIAL.
    SORT gt_registro_da_ultima_execucao BY mandt exetp ASCENDING credat cretim DESCENDING.
    DELETE ADJACENT DUPLICATES FROM gt_registro_da_ultima_execucao COMPARING ALL FIELDS.
    READ TABLE gt_registro_da_ultima_execucao  INDEX 1 INTO ls_ultima_execucao_key .
    CHECK sy-subrc = 0 .
    LOOP AT gt_registro_da_ultima_execucao INTO ls_ultima_execucao.
      IF ls_ultima_execucao = ls_ultima_execucao_key .
        CONTINUE.
      ELSE.
        IF ls_ultima_execucao_key-exetp = ls_ultima_execucao-exetp.
          DELETE gt_registro_da_ultima_execucao  INDEX sy-tabix.
        ENDIF.
      ENDIF.
    ENDLOOP.
    MODIFY ztsd_last_exe FROM TABLE gt_registro_da_ultima_execucao.
    COMMIT WORK.
  ENDIF.
ENDFORM.                    "zf_grava_ultima_execucao

FORM zf_flg_proforma USING taskname.

  RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_PROFORMA'
    IMPORTING
      t_vbrp      = t_vbrp
      t_proforma  = t_proforma
      t_zterm_o   = t_zterm
      t_konv      = t_konv2.

  flg_proforma = abap_true.

ENDFORM.                    " ZF_FLG_PROFORMA

FORM zf_flg_sel_vbuk USING taskname.

  RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_VBUK'
    TABLES
      et_vbuk      = t_vbuk.

  flg_vbuk = abap_true.

ENDFORM.                    " ZF_FLG_PROFORMA

FORM zf_flg_sel_vbep  USING taskname.
  CASE taskname.
    WHEN 'FUNC2'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_VBEP'
        TABLES
          it_vbep      = t_vbep.

      flg_vbep = abap_true.
    WHEN 'FUNC3'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_KNA1'
        TABLES
          it_kna1       = t_kna1
          it_adrc       = t_adrc.

      flg_kna1 = abap_true.
    WHEN 'FUNC4'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_VBPA'
        TABLES
          it_vbpa       = t_vbpa
          it_knvp       = t_knvp.

      flg_vbpa = abap_true.
    WHEN 'FUNC5'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_KOND'
        TABLES
          it_kond       = t_dprg_kond
          it_kond2      = t_dprg_kond2.

      flg_kond = abap_true.
    WHEN 'FUNC6'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_VBKD'
        TABLES
          it_vbkd       = t_vbkd
          it_zterm      = t_zterm.

      flg_vbkd  = abap_true.
    WHEN 'FUNC7'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_MARC'
        TABLES
          it_marc       = t_marc.

      flg_marc  = abap_true.
    WHEN 'FUNC8'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_LIPS'
        TABLES
          it_lips       = t_lips
          it_likp       = t_likp.

      flg_lips  = abap_true.
    WHEN 'FUNC9'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_DOC'
        TABLES
          it_lin        = t_bnflin
          it_doc        = t_bnfdoc
          it_nad        = t_nad
          it_sd002      = t_sd002.

      flg_doc  = abap_true.
    WHEN 'FUNC10'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_EKET'
        TABLES
          it_eket        = t_eket.

      flg_eket  = abap_true.
    WHEN 'FUNC11'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_J3ABDBS'
        TABLES
          it_j3abdbs        = t_j3abdbs.

      flg_j3abdbs  = abap_true.
    WHEN 'FUNC12'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_MSKA'
        TABLES
          it_mska        = t_mska.

      flg_mska  = abap_true.
    WHEN 'FUNC13'.
      RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_KONV'
        TABLES
          it_konv        = t_konv.

      flg_konv  = abap_true.
  ENDCASE.
ENDFORM.                    " ZF_FLG_SEL_VBEP

FORM zf_fields_no_sum  CHANGING p_geral   TYPE tp_alvout.

  CLEAR:
    "Brain Consulting - Squad Logística - Lucas Pereira - 07/06/2022 - Fim.
          p_geral-vlrbrtitmfat,
          p_geral-vlrbrtfat,
          p_geral-vlrbrtitmord,
          p_geral-vlrbrtord,
          p_geral-vl_zpvl,
          p_geral-mt_zpvl,
          p_geral-vl_zpvb,
          p_geral-mt_zpvb,
          p_geral-vl_zicp,
          p_geral-mt_zicp,
          p_geral-mt_ziib,
          p_geral-vl_zinf,
          p_geral-mt_zinf,
          p_geral-vl_ztpv,
          p_geral-mt_ztpv,
          p_geral-vl_vprs,
          p_geral-mt_vprs,
          p_geral-vl_zroy,
          p_geral-mt_zroy,
          p_geral-vl_zfpr,
          p_geral-mt_zfpr,
          p_geral-vl_zpnf,
          p_geral-mt_zpnf,
          p_geral-vl_zrom,
          p_geral-mt_zrom,
          p_geral-vl_zfpm,
          p_geral-mt_zfpm,
          p_geral-vl_zcom,
          p_geral-mt_zcom,
          p_geral-vl_zdsc,
          p_geral-mt_zdsc,
          p_geral-mt_uroy,
          p_geral-mt_ufpr,
          p_geral-vl_zapi,
          p_geral-mt_zapi,
          p_geral-netwr,
          p_geral-mwsbp.
ENDFORM.                    " ZF_FIELDS_NO_SUM

FORM zf_busca_ordens   TABLES ct_ordens TYPE STANDARD TABLE
                       USING p_credat TYPE credat
                             p_cretim TYPE j_1bcretim.

  DATA: lv_credat TYPE credat,
        lv_cretim TYPE j_1bcretim.

  MOVE: p_credat TO lv_credat,
        p_cretim TO lv_cretim.

  IF p_credat IS NOT INITIAL.
    "AND p_cretim IS NOT INITIAL.

    SELECT DISTINCT a~objectid
      FROM ( cdhdr AS a INNER JOIN vbak AS b
              ON a~objectid = b~vbeln )
      INTO TABLE ct_ordens
      WHERE a~objectclas = 'VERKBELEG'
        AND ( ( a~udate = lv_credat AND a~utime > lv_cretim )
           OR ( a~udate > lv_credat )
            )
        AND b~auart IN s_auart.

    SELECT DISTINCT vbeln
      FROM vbak
      APPENDING TABLE ct_ordens
      WHERE ( ( erdat = lv_credat AND erzet > lv_cretim )
              OR ( erdat > lv_credat )
            )
            AND auart IN s_auart.

    SELECT DISTINCT objectid
      FROM cdhdr
      APPENDING TABLE ct_ordens
      WHERE objectclas = 'VERKBELEG'
        AND ( ( udate = lv_credat AND utime > lv_cretim )
           OR ( udate > lv_credat ) ).

    SORT ct_ordens.
    DELETE ADJACENT DUPLICATES FROM ct_ordens COMPARING ALL FIELDS.
  ENDIF.
ENDFORM.                    "zf_busca_ordens

FORM zf_seleciona_dados_dispo_displ  CHANGING pt_3adbbad TYPE type_t_3adbbad.

  DATA: lt_inicial  TYPE type_t_inicial,
        lt_inicial2 TYPE type_t_inicial,
        lt_t399d    TYPE TABLE OF t399d,
        lv_tabix    TYPE syst-tabix.

  FIELD-SYMBOLS: <fs_inicial> TYPE tp_inicial.

  lt_inicial = t_inicial.
  SORT lt_inicial BY matnr werks.
  DELETE ADJACENT DUPLICATES FROM lt_inicial COMPARING matnr werks.

  SELECT *
    FROM t399d
    INTO TABLE lt_t399d
    FOR ALL ENTRIES IN lt_inicial
    WHERE werks EQ lt_inicial-werks.
  IF sy-subrc IS INITIAL.
    SORT lt_t399d BY werks.
  ENDIF.

  LOOP AT lt_inicial ASSIGNING <fs_inicial>.
    lv_tabix = sy-tabix.

    READ TABLE lt_t399d TRANSPORTING NO FIELDS WITH KEY werks = <fs_inicial>-werks BINARY SEARCH.
    IF sy-subrc IS NOT INITIAL.
      DELETE lt_inicial INDEX lv_tabix.
    ENDIF.

  ENDLOOP.


  CALL FUNCTION 'ZFM_SD_SEL_DISP'
    STARTING NEW TASK 'FUNC11'
    DESTINATION 'NONE'
    PERFORMING zf_flg_sel_disp_new ON END OF TASK
    TABLES
      it_inicial = lt_inicial.

ENDFORM.                    " ZF_SELECIONA_DADOS_DISPO_DISPL

FORM zf_flg_sel_disp_new  USING taskname.

  DATA: lt_dbba TYPE j_3adbbad_t.

  RECEIVE RESULTS FROM FUNCTION 'ZFM_SD_SEL_DISP'
    TABLES
      it_dbba      = lt_dbba.

  APPEND LINES OF lt_dbba TO t_dbba.

  SORT t_dbba BY werks matnr aufnr posnr etenr.


  flg_disp = abap_true.


ENDFORM.                    " ZF_FLG_SEL_DISP_NEW

FORM zf_busca_fatur_ordens  TABLES ct_ordens TYPE STANDARD TABLE
                             USING p_datini TYPE credat
                                   p_datfim TYPE credat.

  TYPES: BEGIN OF tp_vbrp,
           vbeln      TYPE vbrp-vbeln,
           posnr      TYPE vbrp-posnr,
           aubel      TYPE vbrp-aubel,
           aupos      TYPE vbrp-aupos,
           vgbel      TYPE vbrp-vgbel,
           vgpos      TYPE vbrp-vgpos,
           fkimg      TYPE vbrp-fkimg,
           j_3avgete  TYPE vbrp-j_3avgete,
           j_3asize   TYPE vbrp-j_3asize,
           j_4kscat   TYPE vbrp-j_4kscat,
         END OF tp_vbrp,
         BEGIN OF tp_fatura,
           vbeln TYPE vbrk-vbeln,
         END OF tp_fatura,
         BEGIN OF ty_geral,
           vbeln      TYPE ztsd_geral2-vbeln,
           posnr      TYPE ztsd_geral2-posnr,
           j_4krcat   TYPE ztsd_geral2-j_4krcat,
           cont       TYPE ztsd_geral2-cont,
         END OF ty_geral.


  DATA: lt_vbrp     TYPE TABLE OF tp_vbrp,
        lt_vbrp2    TYPE TABLE OF tp_vbrp,
        lt_fatura   TYPE TABLE OF tp_fatura,
        lt_geral    TYPE TABLE OF ty_geral.

  DATA: lv_datum  TYPE syst-datum.

  FIELD-SYMBOLS: <fs_geral>  LIKE LINE OF lt_geral,
                 <fs_ordens> TYPE tp_ordens.

  IF ( p_datfim IS INITIAL AND  p_datini <= sy-datum ) OR ( p_datfim IS NOT INITIAL AND p_datini <= p_datfim ).
    IF p_datini IS INITIAL.
      p_datini = sy-datum - 1.
      lv_datum = sy-datum - 30.
    ELSE.
      lv_datum = p_datini.
    ENDIF.
    IF p_datfim IS INITIAL.
      p_datfim = sy-datum.
    ENDIF.

    CREATE OBJECT go_geral_fatur
      EXPORTING
        i_credat  = p_datini
        i_credat2 = p_datfim.

    IF go_geral_fatur IS BOUND.

      go_geral_fatur->busca_faturamentos( ).
      go_geral_fatur->busca_ocorrencias( ).

      go_geral_fatur->get_vbrp( IMPORTING et_vbrp = lt_vbrp ).
      IF lt_vbrp IS NOT INITIAL.
        SORT lt_vbrp BY aubel aupos ASCENDING.
        DELETE lt_vbrp WHERE aubel IS INITIAL.

        DELETE ADJACENT DUPLICATES FROM lt_vbrp COMPARING aubel aupos.
        IF lt_vbrp IS NOT INITIAL.

          SELECT vbeln posnr j_4krcat cont
            FROM ztsd_geral2 INTO TABLE lt_geral
            FOR ALL ENTRIES IN lt_vbrp
            WHERE vbeln EQ lt_vbrp-aubel
              AND posnr EQ lt_vbrp-aupos
              AND auart IN s_auart.

          SELECT vbeln
            FROM vbrk INTO TABLE lt_fatura
            WHERE fksto EQ abap_true.

          IF lt_fatura IS NOT INITIAL.
            SELECT vbeln posnr j_4krcat cont
              FROM ztsd_geral2
              APPENDING TABLE lt_geral
              FOR ALL ENTRIES IN lt_fatura
              WHERE numfat = lt_fatura-vbeln.
          ENDIF.

        ENDIF.
      ENDIF.
    ENDIF.

    SORT lt_geral BY vbeln.
    DELETE ADJACENT DUPLICATES FROM lt_geral COMPARING vbeln.
    LOOP AT lt_geral ASSIGNING <fs_geral>.
      APPEND INITIAL LINE TO ct_ordens ASSIGNING <fs_ordens>.
      <fs_ordens>-vbeln = <fs_geral>-vbeln.
    ENDLOOP.

  ENDIF.

ENDFORM.                    " ZF_BUSCA_FATUR_ORDENS

FORM zf_busca_alocation_ordens  TABLES ct_ordens TYPE STANDARD TABLE
                                 USING p_datini TYPE credat
                                       p_datfim TYPE credat
                                       p_hora   TYPE j_1bcretim.

  TYPES: BEGIN OF ty_ordens,
          vakey TYPE vakey,
         END OF ty_ordens.

  DATA: lv_hour     TYPE j_1bcretim VALUE '010000',
        ls_last_exe TYPE ztsd_last_exe,
        lt_ordens   TYPE TABLE OF ty_ordens,
        ls_ordens   LIKE LINE OF lt_ordens,
        lv_check(1).

  DATA: lo_geral  TYPE REF TO zcl_sd_geral.

  FIELD-SYMBOLS: <fs_ordens> TYPE tp_ordens.

  IF ( p_datfim IS INITIAL AND  p_datini <= sy-datum ) OR ( p_datfim IS NOT INITIAL AND p_datini <= p_datfim ).
    CLEAR lv_check.
    IF p_datini IS INITIAL AND p_datfim IS INITIAL. "AND p_cretim IS INITIAL.
      SELECT SINGLE credat cretim
        FROM ztsd_last_exe
        INTO CORRESPONDING FIELDS OF ls_last_exe
       WHERE exetp = '03'.
      p_datini  = ls_last_exe-credat. "- 1.
      p_hora    = ls_last_exe-cretim.
      p_hora    = p_hora - lv_hour.

      IF p_cretim(2) = '23'.
        SUBTRACT 1 FROM p_datini.
      ENDIF.

      lv_check = abap_true.
    ENDIF.
    IF p_datfim IS INITIAL.
      p_datfim = sy-datum.
    ENDIF.

    CREATE OBJECT lo_geral
      EXPORTING
        i_credat  = p_datini
        i_credat2 = p_datfim
        i_cretim  = p_hora.
    IF lo_geral IS BOUND.
      lo_geral->busca_arun( ).
      lo_geral->get_ordens( IMPORTING et_ordens = lt_ordens ).
    ENDIF.

    LOOP AT lt_ordens INTO ls_ordens.
      APPEND INITIAL LINE TO ct_ordens ASSIGNING <fs_ordens>.
      <fs_ordens>-vbeln = ls_ordens-vakey+26(10).
    ENDLOOP.
  ENDIF.

ENDFORM.                    " ZF_BUSCA_ALOCATION_ORDENS

FORM zf_atualiza_ocorencias .
  DATA: lt_002      TYPE TABLE OF ztsd_002,
        ls_002      LIKE LINE OF lt_002,
        lv_msg(300).

  FIELD-SYMBOLS: <fs_002>     LIKE LINE OF lt_002,
                 <geral>      TYPE ztsd_geral2.

  MESSAGE 'Inicio da atualização de ocorrências' TYPE 'S'.
  COMMIT WORK.


  lt_002 = go_geral_fatur->mt_002.
  DATA: lt_geral  TYPE TABLE OF ztsd_geral2,
        lt_t001w  TYPE TABLE OF t001w,
        ls_t001w  LIKE LINE OF lt_t001w,
        rg_werks  TYPE RANGE OF werks_d,
        ls_werks  LIKE LINE OF rg_werks.

  FREE lt_geral.
  IF lt_002 IS NOT INITIAL.
    SELECT *
      FROM ztsd_geral2 INTO TABLE lt_geral
      FOR ALL ENTRIES IN lt_002
      WHERE nfenum = lt_002-nfenum
        AND EXISTS ( SELECT kunnr FROM t001w
                       WHERE werks = ztsd_geral2~werks
                         AND ( kunnr = lt_002-pesemit
                          OR lifnr = lt_002-pesemit
                             ) )
      %_HINTS sybase 'TABLE ZTSD_GERAL2 ABINDEX(ZNF)'.

    FREE rg_werks.
    LOOP AT lt_geral ASSIGNING <geral>.
      CLEAR ls_werks.

      READ TABLE rg_werks TRANSPORTING NO FIELDS
        WITH KEY low = <geral>-werks.
      IF sy-subrc NE 0.
        ls_werks-sign     = 'I'.
        ls_werks-option   = 'EQ'.
        ls_werks-low      = <geral>-werks.

        APPEND ls_werks TO rg_werks.
      ENDIF.
    ENDLOOP.

    SELECT * FROM t001w INTO TABLE lt_t001w
      WHERE werks IN rg_werks.
  ENDIF.

  SORT lt_geral BY vbeln.
  LOOP AT lt_geral ASSIGNING <geral>.

    READ TABLE lt_t001w INTO ls_t001w WITH KEY werks = <geral>-werks.
    IF sy-subrc = 0.
      READ TABLE lt_002 ASSIGNING <fs_002> WITH KEY pesemit = ls_t001w-kunnr
                                             nfenum  = <geral>-nfenum.
      IF sy-subrc NE 0.
        READ TABLE lt_002 ASSIGNING <fs_002> WITH KEY pesemit = ls_t001w-lifnr
                                                      nfenum  = <geral>-nfenum.
      ENDIF.
      IF sy-subrc = 0.
        <geral>-cod_ocorr = <fs_002>-cod_ocorr.
        <geral>-dt_ocorr  = <fs_002>-dt_ocorr.
        <geral>-tx_ocorr  = <fs_002>-tx_ocorr.
        <geral>-dt_eloja  = <fs_002>-dt_eloja.

        <geral>-uname     = sy-uname.
        <geral>-credat    = sy-datum.
        <geral>-cretim    = sy-uzeit.

        <fs_002>-dt_inser = sy-datum.
        <fs_002>-hr_inser = sy-uzeit.
      ENDIF.
    ENDIF.
  ENDLOOP.

  LOOP AT lt_geral ASSIGNING <geral>.
    UPDATE ztsd_geral2
    SET cod_ocorr = <geral>-cod_ocorr
        dt_ocorr  = <geral>-dt_ocorr
        tx_ocorr  = <geral>-tx_ocorr
        dt_eloja  = <geral>-dt_eloja
        "Campo gravados a partir de 10.07.2019 - Solicitação LuizFaleiro
        "E-mail "Ocorrências na ZTSD_GERAL2" de 10.07 as 8:50
        uname     = <geral>-uname
        credat    = <geral>-credat
        cretim    = <geral>-cretim
    WHERE vbeln     = <geral>-vbeln
      AND posnr     = <geral>-posnr
      AND j_4krcat  = <geral>-j_4krcat.
*      AND cont      = <geral>-cont.
    AT END OF vbeln.
      lv_msg = |Ordem | && <geral>-vbeln && | gravada com sucesso!|.
      MESSAGE lv_msg TYPE 'S'.
      COMMIT WORK.
    ENDAT.
  ENDLOOP.

  IF lt_002 IS NOT INITIAL.
    MODIFY ztsd_002 FROM TABLE lt_002.
  ENDIF.


  MESSAGE 'Fim da atualização de ocorrências' TYPE 'S'.
  COMMIT WORK.

ENDFORM.                    " ZF_ATUALIZA_OCORENCIAS

FORM zf_ordens_nf.
  "Irá buscar as ordens que fazem parte da mesma NF.

  TYPES: BEGIN OF ty_ordem_nf,
            vbeln   TYPE ztsd_geral2-vbeln,
            posnr   TYPE ztsd_geral2-posnr,
            nfenum  TYPE ztsd_geral2-nfenum,
         END OF ty_ordem_nf.

  DATA: lt_ordem_nf TYPE TABLE OF ty_ordem_nf,
        lt_nfs      TYPE TABLE OF ty_ordem_nf,
        ls_ordens   LIKE LINE OF gt_ordens.

  FIELD-SYMBOLS: <fs_ordens> TYPE tp_ordens.

  SELECT vbeln posnr nfenum
    FROM ztsd_geral2
    INTO TABLE lt_ordem_nf
     FOR ALL ENTRIES IN gt_ordens
   WHERE vbeln EQ gt_ordens-vbeln.

  SORT lt_ordem_nf BY nfenum.
  DELETE ADJACENT DUPLICATES FROM lt_ordem_nf COMPARING nfenum.
  DELETE lt_ordem_nf WHERE nfenum IS INITIAL.

  IF lt_ordem_nf IS NOT INITIAL.
    SELECT vbeln posnr nfenum
      FROM ztsd_geral2
      INTO TABLE lt_nfs
       FOR ALL ENTRIES IN lt_ordem_nf
     WHERE nfenum EQ lt_ordem_nf-nfenum.
  ENDIF.

  SORT lt_nfs BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_nfs COMPARING vbeln.
  DELETE lt_nfs WHERE nfenum IS INITIAL.

  IF lt_nfs IS NOT INITIAL.
    LOOP AT lt_nfs INTO ls_ordens .
      APPEND INITIAL LINE TO gt_ordens ASSIGNING <fs_ordens>.
      <fs_ordens>-vbeln = ls_ordens-vbeln.
    ENDLOOP.
  ENDIF.

  SORT gt_ordens BY vbeln.
  DELETE ADJACENT DUPLICATES FROM gt_ordens COMPARING vbeln.


ENDFORM.                    " ZF_ORDENS_NF

FORM zf_ordens_nf_sel_indiv  CHANGING pt_inicial TYPE type_t_inicial
                                      pt_nfs     TYPE type_t_ordemnf.


  DATA: lt_ordem_nf TYPE TABLE OF ty_ordem_nf,
        lt_nfs      TYPE TABLE OF ty_ordem_nf,
        ls_ordens   LIKE LINE OF lt_nfs,
        lv_index    TYPE syst-tabix.

  FIELD-SYMBOLS: <fs_ordens> TYPE tp_ordens.

  SELECT vbeln posnr nfenum
    FROM ztsd_geral2
    INTO TABLE lt_ordem_nf
     FOR ALL ENTRIES IN pt_inicial
   WHERE vbeln EQ pt_inicial-vbeln.

  SORT lt_ordem_nf BY nfenum.
  DELETE ADJACENT DUPLICATES FROM lt_ordem_nf COMPARING nfenum.
  DELETE lt_ordem_nf WHERE nfenum IS INITIAL.

  IF lt_ordem_nf IS NOT INITIAL.
    SELECT vbeln posnr nfenum
      FROM ztsd_geral2
      INTO TABLE lt_nfs
       FOR ALL ENTRIES IN lt_ordem_nf
     WHERE nfenum EQ lt_ordem_nf-nfenum.
  ENDIF.

  SORT lt_nfs BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_nfs COMPARING vbeln.
  DELETE lt_nfs WHERE nfenum IS INITIAL.

  IF lt_nfs IS NOT INITIAL.
    LOOP AT lt_nfs INTO ls_ordens .
      lv_index = sy-tabix.
      READ TABLE pt_inicial TRANSPORTING NO FIELDS
                                WITH KEY vbeln = ls_ordens-vbeln.

      IF sy-subrc <> 0.
        APPEND ls_ordens TO pt_nfs.
      ENDIF.
      "Brain Consulting - Squad Logística - Lucas Pereira - 09/06/2022 - Fim.
    ENDLOOP.
  ENDIF.



ENDFORM.                    " ZF_ORDENS_NF_SEL_INDIV

FORM zf_grava_alvout  USING     p_vbep    TYPE tp_vbep
                                p_inicial TYPE tp_inicial
                                p_j3abdbs TYPE tp_j3abdbs
                      CHANGING  p_alvout  TYPE tp_alvout.

  DATA: idd07v TYPE TABLE OF  dd07v WITH HEADER LINE.

  DATA: ls_dbba       TYPE j_3adbbad,
        ls_j3         LIKE LINE OF t_j3abdbs,
        ls_vbep_aux   TYPE tp_vbep.

  DATA: lv_bezei        TYPE tvagt-bezei.

  FIELD-SYMBOLS: <fs_eket>    TYPE tp_eket,
                 <fs_3addtt>  TYPE j_3addtt,
                 <fs_3abskz>  TYPE rmdi_domvl,
                 <fs_konv>    TYPE tp_konv,
                 <fs_mska>    TYPE tp_mska,
                 <fs_mbew>    LIKE LINE OF t_mbew,
                 <fs_lips>    TYPE tp_lips,
                 <fs_tvagt>   TYPE tvagt,
                 <fs_tvfst>   TYPE tvfst,
                 <fs_likp>    TYPE tp_likp,
                 <fs_vbrp>    TYPE tp_vbrp,
                 <fs_3aseant> LIKE LINE OF t_3aseant,
                 <dprg_kond2> LIKE LINE OF t_dprg_kond2,
                 <dprg_kond>  LIKE LINE OF t_dprg_kond,
                 <fs_prof>    TYPE tp_proforma,
                 <fs_bnflin>  TYPE tp_bnflin,
                 <fs_bnfdoc>  TYPE tp_bnfdoc,
                 <fs_sd002>   TYPE ztsd_002,
                 <fs_zterm>      TYPE tp_zterm,
                 <fs_cross_stat> TYPE ty_cross_stat,
                 <07v>        LIKE LINE OF idd07v.

*Requisição e Pedido de compra
  CLEAR: p_alvout-pedcomp,
         p_alvout-pedido_bi.

  READ TABLE t_eket ASSIGNING <fs_eket> WITH KEY j_3auanr = p_inicial-vbeln
                                                 j_3aupos = p_inicial-posnr
                                                                 BINARY SEARCH.
  IF sy-subrc EQ 0.
*   ls_alvout-reqcomp = <fs_eket>-banfn.
    p_alvout-pedcomp = <fs_eket>-ebeln.
    p_alvout-eindt   = <fs_eket>-eindt.
  ENDIF.

*Status da alocação
  IF p_j3abdbs IS NOT INITIAL.
    IF p_alvout-pedcomp IS INITIAL.
      p_alvout-pedcomp = p_j3abdbs-j_3absnr.
    ENDIF.

    p_alvout-stataloc     = p_j3abdbs-j_3astat.
    p_alvout-stataloc_etq = p_j3abdbs-j_3abskz.
    p_alvout-eindt        = p_j3abdbs-edatu_po.

    READ TABLE t_3addtt ASSIGNING <fs_3addtt> WITH KEY j_3astat = p_j3abdbs-j_3astat BINARY SEARCH.
    IF sy-subrc EQ 0.
      p_alvout-stataloc_txt = <fs_3addtt>-j_3atext.
    ENDIF.

    READ TABLE t_3abskz ASSIGNING <fs_3abskz> WITH KEY domvalue_l = p_j3abdbs-j_3abskz BINARY SEARCH.
    IF sy-subrc EQ 0.
      p_alvout-stataloc_etq_txt = <fs_3abskz>-ddtext.
    ENDIF.
  ENDIF.

  IF NOT p_alvout-pedcomp CA sy-abcde .
    IF p_alvout-pedcomp >= 4450000000 AND p_alvout-pedcomp <= 4599999999.
      p_alvout-pedido_bi = p_alvout-pedcomp.
    ENDIF.
  ENDIF.


  IF p_alvout-stataloc_etq = 'C'.
    CLEAR p_alvout-pedcomp.
  ENDIF.

  p_alvout-vbeln     = p_vbep-vbeln.
  p_alvout-posnr     = p_vbep-posnr.

  IF p_j3abdbs IS NOT INITIAL.
    p_alvout-wmeng   = p_j3abdbs-menge.
  ELSE.
    p_alvout-wmeng   = p_vbep-wmeng.
  ENDIF.
  p_alvout-bmeng   = p_vbep-bmeng.
  "Brain Consulting - Squad Logística - Lucas Pereira - 09/06/2022 - Fim.
  p_alvout-vrkme     = p_vbep-vrkme.
  p_alvout-j_3asize  = p_vbep-j_3asize.
  p_alvout-j_4krcat  = p_vbep-j_4krcat.
  p_alvout-j_3aean11 = p_vbep-j_3aean11.
  p_alvout-j_3aabgru = p_vbep-j_3aabgru.

*   Status Mercadoria
  READ TABLE t_cross_stat ASSIGNING <fs_cross_stat>
                           WITH KEY vbeln = p_vbep-vbeln
                                    vbelp = p_vbep-posnr
                                    BINARY SEARCH.
  IF sy-subrc = 0.
    READ TABLE t_vbuk_stat TRANSPORTING NO FIELDS
                           WITH KEY vbeln = <fs_cross_stat>-vbeln_vl
                           BINARY SEARCH.
    IF sy-subrc = 0.
      p_alvout-status_mercadoria = 'Em Trânsito'.
    ELSE.
      p_alvout-status_mercadoria = 'Em estoque'.
    ENDIF.

  ELSE.
    p_alvout-status_mercadoria = 'Em estoque'.
  ENDIF.

  IF p_alvout-j_4krcat EQ 'XX'.
    READ TABLE t_vbep INTO ls_vbep_aux WITH KEY vbeln = p_inicial-vbeln
                                                posnr = p_inicial-uepos
                                                etenr = p_vbep-j_3areten
                                                BINARY SEARCH.
    IF sy-subrc = 0.
      IF ls_vbep_aux-j_3asize IS NOT INITIAL.
        p_alvout-j_4krcat = ls_vbep_aux-j_3asize.
      ENDIF.
    ENDIF.
  ENDIF.

  " Calculos das condições.
  p_alvout-vl_zpvb = p_alvout-vl_zpvb * p_alvout-wmeng.

  READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = p_inicial-knumv
                                                 kposn = p_inicial-posnr
                                                 kschl = c_vprs BINARY SEARCH.
  IF sy-subrc EQ 0.
    p_alvout-mt_vprs = <fs_konv>-kbetr.
    p_alvout-vl_vprs = <fs_konv>-kbetr * p_alvout-wmeng.
  ENDIF.

  READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = p_inicial-knumv
                                                 kposn = p_inicial-posnr
                                                 kschl = c_zpvl BINARY SEARCH.
  IF sy-subrc EQ 0.
    p_alvout-vl_zpvl = <fs_konv>-kwert.
    p_alvout-mt_zpvl = <fs_konv>-kwert * p_alvout-wmeng.
  ENDIF.

  READ TABLE t_konv ASSIGNING <fs_konv> WITH KEY knumv = p_inicial-knumv
                                                 kposn = p_inicial-posnr
                                                 kschl = 'ZAPI' BINARY SEARCH.
  IF sy-subrc = 0.
    p_alvout-mt_zapi = <fs_konv>-kbetr / 10.
    p_alvout-vl_zapi = <fs_konv>-kwert * p_alvout-wmeng.
  ENDIF.

  p_alvout-vl_zicp = p_alvout-vl_zicp * p_alvout-wmeng.
  p_alvout-vl_zdsc = p_alvout-vl_zdsc * p_alvout-wmeng.
  p_alvout-vl_zinf = p_alvout-vl_zinf * p_alvout-wmeng.
  p_alvout-vl_zroy = p_alvout-vl_zroy * p_alvout-wmeng.
  p_alvout-vl_zfpr = p_alvout-mt_ufpr * p_alvout-wmeng.
  p_alvout-vl_zcom = p_alvout-vl_zcom * p_alvout-wmeng.
  p_alvout-vl_zroy = p_alvout-mt_uroy * p_alvout-wmeng.
  p_alvout-vl_zpnf = p_alvout-mt_zpnf * p_alvout-wmeng.

  IF p_alvout-vl_zdsc IS INITIAL AND ch_zdsc = abap_true.
    EXIT.
  ENDIF.

  IF p_alvout-vl_zicp IS INITIAL AND ch_zicp = abap_true.
    EXIT.
  ENDIF.

  CLEAR p_alvout-fkimg.

*  ENDIF.

  READ TABLE t_mska ASSIGNING <fs_mska> WITH KEY matnr    = p_inicial-matnr
                                                 werks    = p_inicial-werks
                                                 lgort    = p_inicial-lgort
                                                 vbeln    = p_inicial-vbeln
                                                 posnr    = p_inicial-posnr
                                                 j_3asize = p_vbep-j_3asize BINARY SEARCH.
  IF sy-subrc EQ 0.
    p_alvout-kalab = <fs_mska>-kalab.
  ELSE.
    CLEAR p_alvout-kalab.
  ENDIF.

* Gazzi - 02.12
* Descrição do Motivo Recusa da divisão de remessa do item
  CLEAR: lv_bezei.

  READ TABLE t_tvagt ASSIGNING <fs_tvagt> WITH KEY abgru = p_alvout-j_3aabgru.
  IF sy-subrc = 0.
    p_alvout-j_3aabgru_txt = lv_bezei = <fs_tvagt>-bezei.
  ENDIF.

  READ TABLE gt_konv_aux ASSIGNING <fs_konv> WITH KEY knumv     = p_alvout-knumv
                                                      kposn     = p_alvout-posnr
                                                      j_3aetenr = p_vbep-etenr
                                                      kschl     = c_ztpv BINARY SEARCH.
  IF sy-subrc EQ 0.
*    IF p_vbep-wmeng IS NOT INITIAL.
    p_alvout-vl_ztpv = <fs_konv>-kbetr * p_alvout-wmeng .
*    ENDIF.
    p_alvout-mt_ztpv = <fs_konv>-kbetr.
  ENDIF.

  " Estação
  READ TABLE t_3aseant ASSIGNING <fs_3aseant>
    WITH KEY j_3asean         = p_alvout-j_3asean
             /afs/collection  = space
             /afs/theme       = space
             BINARY SEARCH.
  IF sy-subrc = 0.
    p_alvout-text_sean = <fs_3aseant>-text.
  ENDIF.

  " Coleção
  READ TABLE t_3aseant ASSIGNING <fs_3aseant>
    WITH KEY j_3asean         = p_alvout-j_3asean
             /afs/collection  = p_alvout-/afs/collection
             /afs/theme       = space
             BINARY SEARCH.
  IF sy-subrc = 0.
    p_alvout-text_colle = <fs_3aseant>-text.
  ENDIF.

  " Lançamento
  READ TABLE t_3aseant ASSIGNING <fs_3aseant>
    WITH KEY j_3asean         = p_alvout-j_3asean
             /afs/collection  = p_alvout-/afs/collection
             /afs/theme       = p_alvout-/afs/theme
             BINARY SEARCH.
  IF sy-subrc = 0.
    p_alvout-text_theme = <fs_3aseant>-text.
  ENDIF.

  READ TABLE t_dprg_kond2 ASSIGNING <dprg_kond2>
    WITH KEY j_3asean         = p_alvout-j_3asean
             /afs/collection  = p_alvout-/afs/collection
             /afs/theme       = p_alvout-/afs/theme
             BINARY SEARCH.
  IF sy-subrc = 0.
    p_alvout-j_3adldv = <dprg_kond2>-j_3adldv.
    p_alvout-j_3adldb = <dprg_kond2>-j_3adldb.
  ENDIF.

  READ TABLE t_dprg_kond ASSIGNING <dprg_kond>
    WITH KEY j_3asean         = p_alvout-j_3asean
             /afs/collection  = p_alvout-/afs/collection
             /afs/theme       = p_alvout-/afs/theme
             BINARY SEARCH.
  IF sy-subrc = 0.
    p_alvout-dt_sellout = <dprg_kond>-j_3adldv.
  ENDIF.

  READ TABLE t_mbew ASSIGNING <fs_mbew> WITH KEY matnr = p_inicial-matnr
                                                 bwkey = p_inicial-werks
                                                 BINARY SEARCH.
  IF sy-subrc = 0.

    p_alvout-mtorg = <fs_mbew>-mtorg.

    CALL FUNCTION 'DD_DOMVALUES_GET'
      EXPORTING
        domname        = 'J_1BMATORG'   "<-- Your Domain Here
        text           = 'X'
        langu          = sy-langu
      TABLES
        dd07v_tab      = idd07v
      EXCEPTIONS
        wrong_textflag = 1
        OTHERS         = 2.

    READ TABLE idd07v ASSIGNING <07v> WITH KEY domvalue_l = p_alvout-mtorg.
    IF sy-subrc = 0.
      p_alvout-text_mtorg = <07v>-ddtext.
    ENDIF.
  ELSE.
    EXIT.
  ENDIF.

  READ TABLE t_lips TRANSPORTING NO FIELDS BINARY SEARCH
  WITH KEY vgbel     = p_alvout-vbeln
           vgpos     = p_alvout-posnr
           j_3aeten  = p_vbep-etenr .
  "Brain Consulting - Squad Logística - Lucas Pereira - 16/06/2022 - Início.
*  IF sy-subrc = 0.
  IF sy-subrc = 0 AND ( p_alvout-stataloc = 'D' OR p_alvout-stataloc IS INITIAL ).
    "Brain Consulting - Squad Logística - Lucas Pereira - 16/06/2022 - Início.

    LOOP AT t_lips ASSIGNING <fs_lips> FROM sy-tabix.
      IF <fs_lips>-vgbel    NE p_alvout-vbeln
      OR <fs_lips>-vgpos    NE p_alvout-posnr
      OR <fs_lips>-j_3aeten NE p_vbep-etenr.
        EXIT.
      ENDIF.

      IF p_alvout-stataloc = 'D'.
        IF <fs_lips>-lfimg <> p_j3abdbs-menge.
          CONTINUE.
        ENDIF.
      ENDIF.
      "Brain Consulting - Squad Logística - Lucas Pereira - 17/06/2022 - Fim.

      p_alvout-numrem     = <fs_lips>-vbeln.
      p_alvout-itmrem     = <fs_lips>-posnr.
      p_alvout-lfimg      = <fs_lips>-lfimg.
      p_alvout-matrizrem  = <fs_lips>-j_3asize.
      p_alvout-faksprem   = <fs_lips>-faksp.

* Gazzi - 02.12
* Descrição Bloq. faturamento do item da remessa
      DATA: lv_faksprem_txt TYPE tvfst-vtext.
      CLEAR: lv_faksprem_txt.

      READ TABLE t_tvfst ASSIGNING <fs_tvfst> WITH KEY faksp = p_alvout-faksprem.
      IF sy-subrc = 0.
        p_alvout-faksprem_txt = <fs_tvfst>-vtext.
      ENDIF.

      READ TABLE t_likp ASSIGNING <fs_likp> WITH KEY vbeln = <fs_lips>-vbeln
                                                               BINARY SEARCH.
      IF sy-subrc EQ 0.
        p_alvout-datrem   = <fs_likp>-bldat.
        p_alvout-fakskrem = <fs_likp>-faksk.

*   Gazzi - 02.12
*   Descrição Bloq. faturamento do cabeçalho da remessa
        DATA: lv_fakskrem_txt TYPE tvfst-vtext.
        CLEAR: lv_fakskrem_txt.

        SELECT SINGLE vtext
          INTO lv_fakskrem_txt
          FROM tvfst
        WHERE faksp = p_alvout-fakskrem
          AND spras = sy-langu.
        IF sy-subrc IS INITIAL.
          p_alvout-fakskrem_txt = lv_fakskrem_txt.
        ENDIF.
      ENDIF.

      "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Início.
      IF  p_alvout-stataloc IS INITIAL OR p_alvout-stataloc = 'D'.
        "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Fim.
        DATA: lv_encontrou_fat TYPE char1.
        CLEAR lv_encontrou_fat.
        READ TABLE gt_vbrp_aux ASSIGNING <fs_vbrp> BINARY SEARCH
                                WITH KEY vgbel     = <fs_lips>-vbeln
                                         vgpos     = <fs_lips>-posnr
                                         shkzg     = ''. "Sinosbyte - JB - 12.04.2024 - Ajuste ZRSD_128.
        IF sy-subrc = 0.
          lv_encontrou_fat = abap_true.
        ENDIF.
        IF lv_encontrou_fat = abap_true.
          "Brain Consulting - Squad Logística - Lucas Pereira - 24/06/2022 - Início.
          IF p_alvout-stataloc = 'D'.
            CONTINUE.
          ENDIF.
          "Brain Consulting - Squad Logística - Lucas Pereira - 24/06/2022 - Fim.

          p_alvout-numfat       = <fs_vbrp>-vbeln.
          p_alvout-itmfat       = <fs_vbrp>-posnr.
          p_alvout-datfat       = <fs_vbrp>-fkdat.
          IF so_fkdat IS NOT INITIAL AND p_alvout-datfat NOT IN so_fkdat.
            CONTINUE.
          ENDIF.
          p_alvout-fkimg = <fs_vbrp>-fkimg.

*        Estorno Fatura
          READ TABLE t_proforma ASSIGNING <fs_prof> WITH KEY aubel = <fs_vbrp>-aubel
                                                             aupos = <fs_vbrp>-aupos
                                                             fkart = c_s1 BINARY SEARCH.
          IF sy-subrc EQ 0.
            p_alvout-estfat = <fs_prof>-vbeln.
          ENDIF.


*         Dados da NF-e
          READ TABLE t_bnflin ASSIGNING <fs_bnflin> BINARY SEARCH
                               WITH KEY refkey = <fs_vbrp>-vbeln
                                        refitm = <fs_vbrp>-posnr.
          IF sy-subrc EQ 0.
            READ TABLE t_bnfdoc ASSIGNING <fs_bnfdoc> WITH KEY docnum = <fs_bnflin>-docnum
                                                                             BINARY SEARCH.
            IF sy-subrc EQ 0.
*             Nota Fiscal
              p_alvout-nfenum = <fs_bnfdoc>-nfenum.
*             Serie
              p_alvout-series = <fs_bnfdoc>-series.
*             Data da Nota Fiscal
              p_alvout-datanf = <fs_bnfdoc>-docdat.
*             QUuantidade da Nota Fiscal
              p_alvout-menge = <fs_bnflin>-menge.
              READ TABLE t_sd002 ASSIGNING <fs_sd002> WITH KEY nfenum = <fs_bnfdoc>-nfenum
                                                               series = <fs_bnfdoc>-series..
              IF sy-subrc = 0.
                p_alvout-cod_ocorr = <fs_sd002>-cod_ocorr.
                p_alvout-dt_ocorr  = <fs_sd002>-dt_ocorr.
                p_alvout-tx_ocorr  = <fs_sd002>-tx_ocorr.
                p_alvout-dt_eloja  = <fs_sd002>-dt_eloja.

                <fs_sd002>-dt_inser = sy-datum.
                <fs_sd002>-hr_inser = sy-uzeit.
              ENDIF.
            ENDIF.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zpvl BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zpvl2  = <fs_konv>-kwert. "* <fs_vbep>-wmeng.
*         p_alvout-mt_zpvl2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
*                                                        j_3aetenr = <fs_vbep>-etenr
                                                          kschl = c_zpvb BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zpvb2  = <fs_konv>-kwert * <fs_vbrp>-fkimg.
            p_alvout-mt_zpvb2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = 'ZAPI' BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zapi2  = <fs_konv>-kwert * <fs_vbrp>-fkimg.
            p_alvout-mt_zapi2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zicp BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zicp2  = <fs_konv>-kwert * <fs_vbrp>-fkimg.
            p_alvout-mt_zicp2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zdsc BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zdsc2  = <fs_konv>-kwert * <fs_vbrp>-fkimg.
            p_alvout-mt_zdsc2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_ziib BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_ziib2  = <fs_konv>-kwert * <fs_vbrp>-fkimg.
            p_alvout-mt_ziib2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zinf BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zinf2  = <fs_konv>-kwert * <fs_vbrp>-fkimg.
            p_alvout-mt_zinf2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zroy BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zroy2  = <fs_konv>-kwert. "* <fs_vbep>-wmeng.
            p_alvout-mt_zroy2  = <fs_konv>-kbetr / 10.

            READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                            kposn = <fs_vbrp>-posnr
                                                            kschl = c_zrom BINARY SEARCH.
            IF sy-subrc = 0 AND <fs_konv>-kwert IS NOT INITIAL.
              p_alvout-vl_zroy2  = <fs_konv>-kwert.
            ENDIF.

          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zfpr BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zfpr2  = <fs_konv>-kwert. "* <fs_vbep>-wmeng.
            p_alvout-mt_zfpr2  = <fs_konv>-kbetr / 10.

            READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                            kposn = <fs_vbrp>-posnr
                                                            kschl = c_zfpm BINARY SEARCH.
            IF sy-subrc = 0.
              p_alvout-vl_zfpr2  = <fs_konv>-kwert.
            ENDIF.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zcom BINARY SEARCH.
          IF sy-subrc = 0.
            p_alvout-vl_zcom2  = <fs_konv>-kwert * <fs_vbrp>-fkimg.
            p_alvout-mt_zcom2  = <fs_konv>-kbetr / 10.
          ENDIF.

          READ TABLE t_konv2 ASSIGNING <fs_konv> WITH KEY knumv = <fs_vbrp>-knumv
                                                          kposn = <fs_vbrp>-posnr
                                                          kschl = c_zpnf BINARY SEARCH.
          IF sy-subrc EQ 0.
            p_alvout-mt_zpnf2 = <fs_konv>-kbetr. "/ 10.
            p_alvout-vl_zpnf2 = p_alvout-mt_zpnf2 * <fs_vbrp>-fkimg.
          ENDIF.

          READ TABLE gt_konv2_aux ASSIGNING <fs_konv> WITH KEY knumv     = <fs_vbrp>-knumv
                                                               kposn     = <fs_vbrp>-posnr
                                                               kschl     = c_ztpv BINARY SEARCH.
          IF sy-subrc EQ 0.
*          p_alvout-vl_ztpv2 = <fs_konv>-kwert.
            p_alvout-vl_ztpv2 = <fs_konv>-kbetr * p_alvout-wmeng.
            p_alvout-mt_ztpv2 = <fs_konv>-kbetr.
          ENDIF.

          p_alvout-zterm2 = <fs_vbrp>-zterm.

          READ TABLE t_zterm ASSIGNING <fs_zterm> WITH KEY zterm = <fs_vbrp>-zterm
                                                           BINARY SEARCH.
          IF sy-subrc EQ 0.
            p_alvout-zterm_txt2 = <fs_zterm>-text1.
          ELSE.
            CLEAR p_alvout-zterm_txt2.
          ENDIF.

          "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Início.
*     ENDIF.
        ELSE.
          "Brain Consulting - Squad Logística - Lucas Pereira - 24/06/2022 - Início.
          IF p_alvout-stataloc IS INITIAL.
            CONTINUE.
          ENDIF.
          "Brain Consulting - Squad Logística - Lucas Pereira - 24/06/2022 - Fim.
        ENDIF.
      ENDIF.
      "Brain Consulting - Squad Logística - Lucas Pereira - 23/06/2022 - Fim.

      "Brain Consulting - Squad Logística - Lucas Pereira - 17/06/2022 - Início.
      IF p_alvout-numfat IS NOT INITIAL AND p_alvout-nfenum IS NOT INITIAL.
        CLEAR: p_alvout-stataloc, p_alvout-stataloc_etq.
      ENDIF.
      "Brain Consulting - Squad Logística - Lucas Pereira - 17/06/2022 - Fim.

      APPEND p_alvout TO t_alvout.

      "Brain Consulting - Squad Logística - Lucas Pereira - 07/06/2022 - Início.
*      CLEAR:  p_alvout-wmeng,
*              p_alvout-bmeng.
      CLEAR: p_alvout-numfat,
             p_alvout-itmfat,
             p_alvout-datfat,
             p_alvout-fkimg,
             p_alvout-nfenum,
             p_alvout-series,
             p_alvout-datanf,
             p_alvout-menge.
      "Brain Consulting - Squad Logística - Lucas Pereira - 07/06/2022 - Fim.

      PERFORM zf_fields_no_sum
        CHANGING p_alvout.

    ENDLOOP.
  ELSE.
    APPEND p_alvout TO t_alvout.
  ENDIF.

ENDFORM.                    " ZF_GRAVA_ALVOUT

FORM seleciona_cross_stat CHANGING p_t_cross TYPE type_t_cross
                                   p_t_vbuk  TYPE type_t_vbuk_s.

  CHECK t_vbep IS NOT INITIAL.

  SELECT vbeln vbelp ebeln ebelp vbeln_vl
    FROM ztmm_cross_stat
    INTO TABLE p_t_cross
    FOR ALL ENTRIES IN t_vbep
    WHERE vbeln = t_vbep-vbeln
      AND vbelp = t_vbep-posnr.

  IF sy-subrc = 0.
    SORT p_t_cross BY vbeln vbelp.

    SELECT vbeln wbstk
      FROM vbuk
      INTO TABLE p_t_vbuk
      FOR ALL ENTRIES IN p_t_cross
      WHERE vbeln = p_t_cross-vbeln_vl.
    IF sy-subrc = 0.
      SORT p_t_vbuk BY wbstk.

*         Manter somente status "Não processado"
      DELETE p_t_vbuk WHERE wbstk <> 'A'.

      SORT p_t_vbuk BY vbeln.
    ENDIF.

  ENDIF.

ENDFORM.                    " SELECIONA_CROSS_STAT
">>> Eduardo (SB) - 14.01.2022 - 2022004 - Parametrização PSTYV

FORM zf_find_params .

  SELECT sign opti low high INTO TABLE gr_catipts FROM tvarvc
    WHERE name = 'ZSD_128_PSTYV_PTS'
      AND type = 'S'.

  SELECT sign opti low high INTO TABLE gr_catioth FROM tvarvc
    WHERE name = 'ZSD_128_PSTYV_OUTROS'
      AND type = 'S'.

  SELECT sign opti low high INTO TABLE gr_caticon FROM tvarvc
    WHERE name = 'ZSD_128_PSTYV_CONT'
      AND type = 'S'.
ENDFORM.                    " ZF_FIND_PARAMS
"<<< Eduardo (SB) - 14.01.2022 - 2022004 - Parametrização PSTYV

FORM zf_contratos .

  DATA: lt_ztsd_geral2 TYPE TABLE OF ztsd_geral2,
        ls_geral2      TYPE ztsd_geral2,
        lt_vbak  TYPE TABLE OF vbak,
        lt_knvp  TYPE TABLE OF tp_knvp,
        lt_vbap  TYPE TABLE OF vbap,
        lt_copyalvout TYPE TABLE OF tp_alvout2,
        lt_outaux     TYPE TABLE OF tp_alvout2,
        lv_saldo TYPE integer,
        ls_tvarv TYPE  tvarv,
        lv_uroy  TYPE kwert,
        lv_ufpr  TYPE kwert.


  DATA: ls_out LIKE LINE OF t_alvout2.

  DATA: lt_alvoutzkm TYPE TABLE OF ztsd_geral2."tp_alvout2. "Sbyte Adilson - 16/12/2022

  DATA: lr_vbeln TYPE RANGE OF vbap-vgbel,
        ls_vbeln LIKE LINE OF lr_vbeln.

  DATA: lr_vgbel TYPE RANGE OF vbap-vgbel,
        ls_vgbel LIKE LINE OF lr_vgbel.

  DATA: ls_alvoutzkm  TYPE ztsd_geral2, "tp_alvout2, "Sbyte Adilson - 16/12/2022
        ls_cobyalvout TYPE tp_alvout2.


  ">>> Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido
  DATA: lt_vbfa TYPE TABLE OF vbfa,
        lt_callof TYPE TABLE OF vbap.

  DATA: lv_altstatus TYPE abap_bool.

  FIELD-SYMBOLS: <fs_vbfa> LIKE LINE OF lt_vbfa,
                 <fs_callof> LIKE LINE OF lt_callof.
  "<<< Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido

  FIELD-SYMBOLS: <fs_vbap> LIKE LINE OF lt_vbap,
                 <fs_talvout2> LIKE LINE OF t_alvout2,
                 <fs_alvout2> LIKE LINE OF gt_geral,"t_alvout2,
                 <fs_ztsd_geral2> LIKE LINE OF lt_ztsd_geral2,
                 <fs_knvp> LIKE LINE OF lt_knvp.

  CLEAR ls_tvarv.

  SELECT SINGLE low
      INTO ls_tvarv
      FROM tvarvc
      WHERE name EQ 'ZSD_TYPE_CONTRACT'
      AND   type EQ 'P'.

*  IF t_alvout2 IS NOT INITIAL. ">>> Sbyte Adilson - 16/12/2022
  IF gt_geral IS NOT INITIAL.

    lt_alvoutzkm[] = gt_geral. "t_alvout2[].

    SORT lt_alvoutzkm BY auart.
    DELETE lt_alvoutzkm WHERE auart NE ls_tvarv-name.

    IF lt_alvoutzkm IS NOT INITIAL.

      PERFORM zf_progress_ind USING text-i13 100 100.

      "Buscar parceiros KNVP
      SELECT * FROM knvp APPENDING CORRESPONDING FIELDS OF TABLE lt_knvp
        FOR ALL ENTRIES IN lt_alvoutzkm
        WHERE kunnr = lt_alvoutzkm-kunnr1.

      IF lt_knvp IS NOT INITIAL.
        SELECT lifnr name1
        FROM lfa1 APPENDING TABLE t_parceiros_txt
          FOR ALL ENTRIES IN lt_knvp
            WHERE lifnr EQ lt_knvp-lifnr.
      ENDIF.
      IF t_parceiros_txt IS NOT INITIAL. "Sbyte Adilson - 28.02.2023
        SORT t_parceiros_txt BY codpa.
      ENDIF.
      SORT t_knvp BY kunnr vkorg parvw.
      SORT lt_knvp BY kunnr vkorg vtweg parvw. "Sbyte Adilson - 28.02.2023

      "SORT t_alvout2 BY vbeln posnr.
      SORT gt_geral BY vbeln posnr.
      SORT t_alvout2 BY vbeln posnr j_4krcat status.

      ">>> Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido
      SELECT vbelv posnv vbeln posnn vbtyp_n rfmng meins
        FROM vbfa INTO CORRESPONDING FIELDS OF TABLE lt_vbfa
        FOR ALL ENTRIES IN lt_alvoutzkm
        WHERE vbelv = lt_alvoutzkm-vbeln
          AND posnv = lt_alvoutzkm-posnr
          AND vbtyp_n = 'C'.

      SORT lt_vbfa BY vbelv posnv.

      IF sy-subrc EQ 0.
        SELECT vbeln posnr abgru kwmeng
          FROM vbap INTO CORRESPONDING FIELDS OF TABLE lt_callof
          FOR ALL ENTRIES IN lt_vbfa
          WHERE vbeln = lt_vbfa-vbeln
            AND posnr = lt_vbfa-posnn.

        SORT lt_callof BY vbeln posnr abgru.
      ENDIF.

      "<<< Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido

      LOOP AT lt_alvoutzkm INTO ls_alvoutzkm.

*        READ TABLE t_alvout2 TRANSPORTING NO FIELDS
*        WITH KEY vbeln = ls_alvoutzkm-vbeln
*        BINARY SEARCH.

        READ TABLE gt_geral TRANSPORTING NO FIELDS
                            WITH KEY vbeln = ls_alvoutzkm-vbeln
                                     posnr = ls_alvoutzkm-posnr
                                     BINARY SEARCH.

        IF sy-subrc IS INITIAL.

          LOOP AT gt_geral ASSIGNING <fs_alvout2> FROM sy-tabix.
            IF <fs_alvout2>-vbeln NE ls_alvoutzkm-vbeln
            OR <fs_alvout2>-posnr NE ls_alvoutzkm-posnr.
              EXIT.
            ENDIF.

            CLEAR lv_saldo.

            ">>> Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido
            CLEAR: lv_altstatus.

            lv_saldo = <fs_alvout2>-wmeng.

            IF <fs_alvout2>-status = 'ATE'.

              READ TABLE lt_vbfa
                WITH KEY vbelv = <fs_alvout2>-vbeln
                         posnv = <fs_alvout2>-posnr
                ASSIGNING <fs_vbfa>
                BINARY SEARCH.

              IF sy-subrc EQ 0.

                READ TABLE lt_callof
                  WITH KEY vbeln = <fs_vbfa>-vbeln
                           posnr = <fs_vbfa>-posnn
                           abgru = ''
                  ASSIGNING <fs_callof>
                  BINARY SEARCH.

                IF sy-subrc EQ 0.
                  lv_saldo = 0.
                ELSE.
                  <fs_alvout2>-status = 'NPROC'.
                  lv_altstatus = 'X'.
                ENDIF.

              ELSE.
                <fs_alvout2>-status = 'NPROC'.
                lv_altstatus = 'X'.
              ENDIF.

            ENDIF.
            "<<< Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido

            ">>> Eduardo - 12.05.2022 - Saldo do contrato na quantidade da ordem

            "Coluna Qtd.Ordem e Saldo com campo Saldo
            <fs_alvout2>-saldo_contrato = lv_saldo.
            <fs_alvout2>-wmeng          = lv_saldo.


            "Zerar Qtd. Remessa
            <fs_alvout2>-lfimg = 0.

            "Valor PVL
            <fs_alvout2>-mt_zpvl = <fs_alvout2>-vl_zpvl * lv_saldo.
            "Valor PV. Base
            <fs_alvout2>-vl_zpvb = ( <fs_alvout2>-vl_zpvb / <fs_alvout2>-bmeng ) * lv_saldo.
            "Valor NF(ZINF)
            <fs_alvout2>-vl_zinf = ( <fs_alvout2>-vl_zinf / <fs_alvout2>-bmeng ) * lv_saldo.
            "Vlr. Total NF(ZTPV)
            <fs_alvout2>-vl_ztpv = ( <fs_alvout2>-vl_ztpv / <fs_alvout2>-bmeng ) * lv_saldo.
            "Vlr. VPRS
            <fs_alvout2>-vl_vprs = <fs_alvout2>-mt_vprs * lv_saldo.

            "Parceiros KNVP
*  represent./consultor
            READ TABLE lt_knvp ASSIGNING <fs_knvp> WITH KEY kunnr = <fs_alvout2>-kunnr1
                                                            vkorg = <fs_alvout2>-vkorg " Sbyte Adilson - 28/02/2023
                                                            vtweg = <fs_alvout2>-vtweg " Brain Consulting - Lucas Pereira - 06/02/2024.
                                                            parvw = c_zc BINARY SEARCH.
            IF sy-subrc EQ 0.
              <fs_alvout2>-parvw3 = <fs_knvp>-lifnr.
              PERFORM busca_descricao_parceiro USING    <fs_knvp>-lifnr
                                               CHANGING <fs_alvout2>-parvw3_txt.
            ENDIF.

*   Anjo
            READ TABLE lt_knvp ASSIGNING <fs_knvp>  WITH KEY kunnr = <fs_alvout2>-kunnr1
                                                             vkorg = <fs_alvout2>-vkorg " Sbyte Adilson - 28/02/2023
                                                             vtweg = <fs_alvout2>-vtweg " Brain Consulting - Lucas Pereira - 06/02/2024.
                                                             parvw = c_zd BINARY SEARCH.
            IF sy-subrc EQ 0.
              <fs_alvout2>-parvw4 = <fs_knvp>-lifnr.
              PERFORM busca_descricao_parceiro USING    <fs_knvp>-lifnr
                                               CHANGING <fs_alvout2>-parvw4_txt.
            ENDIF.

*   Coordenador/Superv.
            READ TABLE lt_knvp ASSIGNING <fs_knvp> WITH KEY kunnr = <fs_alvout2>-kunnr1
                                                            vkorg = <fs_alvout2>-vkorg " Sbyte Adilson - 28/02/2023
                                                            vtweg = <fs_alvout2>-vtweg " Brain Consulting - Lucas Pereira - 06/02/2024.
                                                            parvw = c_ze BINARY SEARCH.
            IF sy-subrc EQ 0.
              <fs_alvout2>-parvw5 = <fs_knvp>-lifnr.
              PERFORM busca_descricao_parceiro USING    <fs_knvp>-lifnr
                                               CHANGING <fs_alvout2>-parvw5_txt.
            ENDIF.

*  Loja Matriz
            READ TABLE lt_knvp ASSIGNING <fs_knvp> WITH KEY kunnr = <fs_alvout2>-kunnr1
                                                            vkorg = <fs_alvout2>-vkorg " Sbyte Adilson - 28/02/2023
                                                            vtweg = <fs_alvout2>-vtweg " Brain Consulting - Lucas Pereira - 06/02/2024.
                                                            parvw = c_zf BINARY SEARCH.
            IF sy-subrc EQ 0.
              <fs_alvout2>-parvw6 = <fs_knvp>-kunn2.
            ENDIF.

            ">>> Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido
            IF lv_altstatus IS INITIAL.
              READ TABLE t_alvout2 ASSIGNING <fs_talvout2> WITH KEY vbeln = <fs_alvout2>-vbeln
                                                      posnr  = <fs_alvout2>-posnr
                                                      j_4krcat = <fs_alvout2>-j_4krcat
                                                      status = <fs_alvout2>-status BINARY SEARCH.
            ELSE.
              READ TABLE t_alvout2 ASSIGNING <fs_talvout2> WITH KEY vbeln = <fs_alvout2>-vbeln
                                                      posnr  = <fs_alvout2>-posnr
                                                      j_4krcat = <fs_alvout2>-j_4krcat
                                                      status = 'ATE' BINARY SEARCH.
            ENDIF.

            IF sy-subrc IS INITIAL.
              MOVE-CORRESPONDING <fs_alvout2> TO <fs_talvout2>.
            ENDIF.
            "<<< Eduardo (SB) - 19.01.2024 - 2024002 - Contrato Atendido

            MOVE-CORRESPONDING <fs_alvout2> TO ls_geral2.

            MODIFY ztsd_geral2 FROM ls_geral2.

          ENDLOOP. "LOOP AT gt_geral ASSIGNING <fs_alvout2>
        ENDIF.
      ENDLOOP. "LOOP AT lt_alvoutzkm
      COMMIT WORK.

    ENDIF. "IF lt_alvoutzkm IS NOT INITIAL
  ENDIF.   "IF gt_geral IS NOT INITIAL.

  PERFORM zf_progress_ind USING text-i14 100 100.

ENDFORM.                    " zf_contratos
">>> Eduardo (SB) - 08.09.2023 - Tabela Auxiliar

FORM zf_grava_tabela_aux .

  CONSTANTS c_maxline TYPE i VALUE 20000.

  DATA: lt_exec128 TYPE TABLE OF ztsd_exec128,
        ls_exec128 TYPE ztsd_exec128,
        lr_vbeln   TYPE RANGE OF vbeln,
        ls_vbeln   LIKE LINE OF so_vbeln,
        ls_ordens  LIKE LINE OF gt_ordens,
        lv_count   TYPE i.
  ">>> Adilson (SB) - 29.02.2024
  DATA: lr_auart TYPE RANGE OF auart,
        lt_vbak  TYPE TABLE OF vbak,
        lt_vbap  TYPE TABLE OF vbap.

  FIELD-SYMBOLS: <fs_callof> TYPE vbap,
                 <fs_ordens> TYPE tp_ordens.

  SELECT sign opti AS option low high
    FROM tvarvc
    INTO CORRESPONDING FIELDS OF TABLE lr_auart
   WHERE name EQ 'ZSD_128_GERAL2'
     AND type EQ 'S'.
  "<<< Adilson (SB) - 29.02.2024

  PERFORM zf_progress_ind USING text-i16 100 100.

  IF r_auto IS INITIAL.
    LOOP AT so_vbeln INTO ls_vbeln.
      lv_count = lv_count + 1.
      APPEND ls_vbeln TO lr_vbeln.

      IF lv_count EQ c_maxline.
        SELECT vbeln FROM vbak
        APPENDING TABLE gt_ordens
            WHERE vbeln IN lr_vbeln.

        lv_count = 0.
        FREE lr_vbeln.
      ENDIF.
    ENDLOOP.

    IF lr_vbeln IS NOT INITIAL.
      SELECT vbeln FROM vbak
      APPENDING TABLE gt_ordens
          WHERE vbeln IN lr_vbeln.
    ENDIF.
  ENDIF.

  ">>> Adilson (SB) - 29.02.2024
  IF gt_ordens IS NOT INITIAL.
    SELECT vbeln auart
      FROM vbak
      INTO CORRESPONDING FIELDS OF TABLE lt_vbak
      FOR ALL ENTRIES IN gt_ordens
      WHERE vbeln = gt_ordens-vbeln.

    IF sy-subrc IS INITIAL.
      SORT lt_vbak BY vbeln.
      DELETE lt_vbak WHERE auart NOT IN lr_auart.
    ENDIF.

    SORT lt_vbak BY vbeln.

    ">>> Diego (SB) - 22.04.2024 - Busca contrato CallOff
    SELECT vbeln posnr vgbel vgpos
      FROM vbap
      INTO CORRESPONDING FIELDS OF TABLE lt_vbap
      FOR ALL ENTRIES IN lt_vbak
      WHERE vbeln = lt_vbak-vbeln.
    DELETE lt_vbap WHERE vgbel IS INITIAL.
    SORT lt_vbap BY vgbel.
    DELETE ADJACENT DUPLICATES FROM lt_vbap COMPARING vgbel.

    IF lt_vbap IS NOT INITIAL.
      SELECT vbeln auart
        FROM vbak
        APPENDING CORRESPONDING FIELDS OF TABLE lt_vbak
        FOR ALL ENTRIES IN lt_vbap
        WHERE vbeln = lt_vbap-vgbel.

      LOOP AT lt_vbap ASSIGNING <fs_callof>.
        APPEND INITIAL LINE TO gt_ordens ASSIGNING <fs_ordens>.
        <fs_ordens>-vbeln = <fs_callof>-vgbel.
      ENDLOOP.
      SORT  gt_ordens BY vbeln.
      DELETE ADJACENT DUPLICATES FROM gt_ordens COMPARING ALL FIELDS.
    ENDIF.
    "<<< Diego (SB) - 22.04.2024
  ENDIF.
  "<<< Adilson (SB) - 29.02.2024

  SELECT * FROM ztsd_exec128
    INTO TABLE lt_exec128
    FOR ALL ENTRIES IN gt_ordens
    WHERE vbeln  EQ gt_ordens-vbeln
      AND status IN ('A','N').

  ls_exec128-status = 'N'.
  ls_exec128-dtreg  = sy-datum.
  ls_exec128-hrreg  = sy-timlo.

  LOOP AT gt_ordens INTO ls_ordens.

    READ TABLE lt_exec128
      WITH KEY vbeln  = ls_ordens-vbeln
      TRANSPORTING NO FIELDS
      BINARY SEARCH.

    IF sy-subrc IS INITIAL.
      CONTINUE.
    ENDIF.
    ">>> Adilson (SB) - 29.02.2024
    READ TABLE lt_vbak
      WITH KEY vbeln  = ls_ordens-vbeln
      TRANSPORTING NO FIELDS
      BINARY SEARCH.

    IF sy-subrc IS NOT INITIAL.
      CONTINUE.
    ENDIF.
    "<<< Adilson (SB) - 29.02.2024

    ls_exec128-vbeln = ls_ordens-vbeln.

    INSERT ztsd_exec128 FROM ls_exec128.

    COMMIT WORK AND WAIT.

  ENDLOOP.

  PERFORM zf_progress_ind USING text-i17 100 100.

ENDFORM.                    " ZF_GRAVA_TABELA_AUX
"<<< Eduardo (SB) - 08.09.2023 - Tabela Auxiliar

FORM zf_grava_execucao .
  DATA: ls_exec128 TYPE ztsd_exec128.

  PERFORM zf_progress_ind USING text-i18 100 100.

  SELECT * FROM ztsd_exec128
    INTO TABLE gt_exec128
   WHERE vbeln  IN so_vbeln
     AND status EQ 'A'.


  ls_exec128-status = 'E'.
  ls_exec128-dtini = sy-datum.
  ls_exec128-hrini = sy-timlo.

  MODIFY gt_exec128 FROM ls_exec128
   TRANSPORTING status dtini hrini
   WHERE status EQ 'A'.
  MODIFY ztsd_exec128 FROM TABLE gt_exec128.
  COMMIT WORK AND WAIT.

ENDFORM.                    " ZF_GRAVA_EXECUCAO

FORM zf_info_cancelado.

  CONSTANTS c_maxline TYPE i VALUE 20000.

  TYPES: BEGIN OF ty_rvbeln,
        sign   TYPE c LENGTH 1,
        option TYPE c LENGTH 2,
        low    TYPE cdhdr-objectid,
        high   TYPE cdhdr-objectid,
       END OF ty_rvbeln.

  DATA: ls_ordens LIKE LINE OF gt_ordens,
        lr_vbeln  TYPE TABLE OF ty_rvbeln,
        ls_vbeln  TYPE ty_rvbeln,
        ls_geral  TYPE ztsd_geral2,
        lt_geral  TYPE TABLE OF ztsd_geral2.

  DATA: lr_vbeln_aux  LIKE lr_vbeln,
        lv_count      TYPE i.

  FIELD-SYMBOLS: <fs_geral2> LIKE LINE OF lt_geral,
                 <fs_out2>   LIKE LINE OF t_alvout2.

  SORT t_alvout2 BY vbeln posnr j_4krcat.

  CLEAR: ls_vbeln, lr_vbeln.
  IF p_alv NE ''.
    IF ( r_auto IS NOT INITIAL AND p_cancel IS NOT INITIAL ) OR ( r_manual IS NOT INITIAL ).

      PERFORM zf_progress_ind USING text-i15 100 100.

      ls_vbeln-sign   = 'I'.
      ls_vbeln-option  = 'EQ'.

      LOOP AT gt_geral INTO ls_geral.
        ls_vbeln-low = ls_geral-vbeln.
        APPEND ls_vbeln TO lr_vbeln.
        CLEAR ls_vbeln-low.
      ENDLOOP.

      SORT lr_vbeln BY low.
      DELETE ADJACENT DUPLICATES FROM lr_vbeln COMPARING low.

      SUBMIT zsdr_relatorio_ovs_canc
                WITH s_vbeln IN lr_vbeln
                WITH p_flag  EQ 'X' AND RETURN.

      LOOP AT lr_vbeln INTO ls_vbeln.
        lv_count = lv_count + 1.
        APPEND ls_vbeln TO lr_vbeln_aux.

        IF lv_count EQ c_maxline.
          SELECT vbeln posnr j_4krcat cont dtcanc usercanc
            FROM ztsd_geral2
            APPENDING CORRESPONDING FIELDS OF TABLE lt_geral
           WHERE vbeln IN lr_vbeln_aux.

          lv_count = 0.
          FREE lr_vbeln_aux.
        ENDIF.
      ENDLOOP.

      IF lr_vbeln_aux IS NOT INITIAL.
        SELECT vbeln posnr j_4krcat cont dtcanc usercanc
          FROM ztsd_geral2
          APPENDING CORRESPONDING FIELDS OF TABLE lt_geral
         WHERE vbeln IN lr_vbeln_aux.
      ENDIF.

      LOOP AT lt_geral ASSIGNING <fs_geral2>.
        READ TABLE t_alvout2 WITH KEY vbeln    = <fs_geral2>-vbeln
                                      posnr    = <fs_geral2>-posnr
                                      j_4krcat = <fs_geral2>-j_4krcat
                             ASSIGNING <fs_out2>
                             BINARY SEARCH.
        IF sy-subrc IS INITIAL.
          <fs_out2>-dtcanc   = <fs_geral2>-dtcanc.
          <fs_out2>-usercanc = <fs_geral2>-usercanc.
        ENDIF.
      ENDLOOP.

    ENDIF.
  ENDIF.

ENDFORM.

FORM zf_grava_log .
  DATA: lt_vbeln LIKE t_inicial,
        lt_log   TYPE TABLE OF ztsd_geral2_log.

  FIELD-SYMBOLS: <fs_vbeln> LIKE LINE OF lt_vbeln,
                 <fs_log>   LIKE LINE OF lt_log.

  lt_vbeln = t_inicial.
  SORT lt_vbeln BY vbeln.
  DELETE ADJACENT DUPLICATES FROM lt_vbeln COMPARING vbeln.

  LOOP AT lt_vbeln ASSIGNING <fs_vbeln>.
    APPEND INITIAL LINE TO lt_log ASSIGNING <fs_log>.
    <fs_log>-vbeln    = <fs_vbeln>-vbeln.
    <fs_log>-data     = sy-datum.
    <fs_log>-hora     = sy-uzeit.
    <fs_log>-usuario  = sy-uname.

    IF r_auto IS NOT INITIAL.
      CASE 'X'.
        WHEN r_log.
          <fs_log>-tipo_ger   = '01'.
        WHEN r_fatur.
          <fs_log>-tipo_ger   = '02'.
        WHEN r_aloc.
          <fs_log>-tipo_ger   = '03'.
      ENDCASE.
    ELSE.
      <fs_log>-tipo_ger = ''.
    ENDIF.
  ENDLOOP.

  MODIFY ztsd_geral2_log FROM TABLE lt_log.
  COMMIT WORK.
ENDFORM.                    " ZF_GRAVA_LOG
